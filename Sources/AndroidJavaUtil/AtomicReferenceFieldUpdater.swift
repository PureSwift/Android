// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.concurrent.atomic.AtomicReferenceFieldUpdater")
open class AtomicReferenceFieldUpdater<T: AnyJavaObject, V: AnyJavaObject>: JavaObject {
  @JavaMethod
  open func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func set(_ arg0: JavaObject?, _ arg1: JavaObject?)

  @JavaMethod
  open func compareAndSet(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  open func weakCompareAndSet(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  open func getAndSet(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func lazySet(_ arg0: JavaObject?, _ arg1: JavaObject?)
}
extension JavaClass {
  @JavaStaticMethod
  public func newUpdater<T: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaClass<JavaObject>?, _ arg1: JavaClass<JavaObject>?, _ arg2: String) -> AtomicReferenceFieldUpdater<JavaObject, JavaObject>! where ObjectType == AtomicReferenceFieldUpdater<T, V>
}
