// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitFunction
import JavaRuntime

@JavaInterface("java.util.Comparator")
public struct Comparator<T: AnyJavaObject> {
  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func compare(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Int32

  @JavaMethod
  public func reversed() -> Comparator<JavaObject>!

  @JavaMethod
  public func thenComparing(_ arg0: JavaFunction<JavaObject, JavaObject>?, _ arg1: Comparator<JavaObject>?) -> Comparator<JavaObject>!

  @JavaMethod
  public func thenComparing(_ arg0: Comparator<JavaObject>?) -> Comparator<JavaObject>!

  @JavaMethod
  public func thenComparingInt(_ arg0: JavaToIntFunction<JavaObject>?) -> Comparator<JavaObject>!

  @JavaMethod
  public func thenComparingLong(_ arg0: JavaToLongFunction<JavaObject>?) -> Comparator<JavaObject>!

  @JavaMethod
  public func thenComparingDouble(_ arg0: JavaToDoubleFunction<JavaObject>?) -> Comparator<JavaObject>!
}
extension JavaClass {
  @JavaStaticMethod
  public func comparing<T: AnyJavaObject>(_ arg0: JavaFunction<JavaObject, JavaObject>?, _ arg1: Comparator<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>

  @JavaStaticMethod
  public func comparingInt<T: AnyJavaObject>(_ arg0: JavaToIntFunction<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>

  @JavaStaticMethod
  public func comparingLong<T: AnyJavaObject>(_ arg0: JavaToLongFunction<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>

  @JavaStaticMethod
  public func comparingDouble<T: AnyJavaObject>(_ arg0: JavaToDoubleFunction<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>

  @JavaStaticMethod
  public func nullsFirst<T: AnyJavaObject>(_ arg0: Comparator<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>

  @JavaStaticMethod
  public func nullsLast<T: AnyJavaObject>(_ arg0: Comparator<JavaObject>?) -> Comparator<JavaObject>! where ObjectType == Comparator<T>
}
