// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.concurrent.ThreadLocalRandom")
open class ThreadLocalRandom: Random {
  @JavaMethod
  open override func next(_ arg0: Int32) -> Int32

  @JavaMethod
  open func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  open func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  open override func nextDouble() -> Double

  @JavaMethod
  open override func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  open override func nextInt() -> Int32

  @JavaMethod
  open func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open override func longs() -> LongStream!

  @JavaMethod
  open override func longs(_ arg0: Int64) -> LongStream!

  @JavaMethod
  open override func longs(_ arg0: Int64, _ arg1: Int64) -> LongStream!

  @JavaMethod
  open override func longs(_ arg0: Int64, _ arg1: Int64, _ arg2: Int64) -> LongStream!

  @JavaMethod
  open override func setSeed(_ arg0: Int64)

  @JavaMethod
  open override func ints(_ arg0: Int64, _ arg1: Int32, _ arg2: Int32) -> IntStream!

  @JavaMethod
  open override func ints(_ arg0: Int64) -> IntStream!

  @JavaMethod
  open override func ints(_ arg0: Int32, _ arg1: Int32) -> IntStream!

  @JavaMethod
  open override func ints() -> IntStream!

  @JavaMethod
  open override func doubles(_ arg0: Int64) -> DoubleStream!

  @JavaMethod
  open override func doubles() -> DoubleStream!

  @JavaMethod
  open override func doubles(_ arg0: Double, _ arg1: Double) -> DoubleStream!

  @JavaMethod
  open override func doubles(_ arg0: Int64, _ arg1: Double, _ arg2: Double) -> DoubleStream!

  @JavaMethod
  open func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  open func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  open override func nextLong() -> Int64

  @JavaMethod
  open override func nextBoolean() -> Bool

  @JavaMethod
  open func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  open override func nextFloat() -> Float

  @JavaMethod
  open func nextFloat(_ arg0: Float) -> Float
}
extension JavaClass<ThreadLocalRandom> {
  @JavaStaticMethod
  public func current() -> ThreadLocalRandom!
}
