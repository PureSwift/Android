// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.ConcurrentSkipListMap", implements: ConcurrentNavigableMap<JavaObject, JavaObject>.self, Serializable.self)
open class ConcurrentSkipListMap<K: AnyJavaObject, V: AnyJavaObject>: AbstractMap {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Map<JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Comparator<JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: SortedMap<JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  open override func remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func size() -> Int32

  @JavaMethod
  open override func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  open override func clone() -> ConcurrentSkipListMap<JavaObject, JavaObject>!

  @JavaMethod
  open override func clear()

  @JavaMethod
  open override func isEmpty() -> Bool

  @JavaMethod
  open func replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  open func replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func entrySet() -> JavaSet<Map.Entry<JavaObject, JavaObject>>!

  @JavaMethod
  open func putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func keySet() -> NavigableSet<JavaObject>!

  @JavaMethod
  open func keySet() -> JavaSet!

  @JavaMethod
  open override func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func containsKey(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func comparator() -> Comparator<JavaObject>!

  @JavaMethod
  open func firstKey() -> JavaObject!

  @JavaMethod
  open func putFirst(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func putLast(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func firstEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func lastEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func pollFirstEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func pollLastEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func descendingMap() -> NavigableMap!

  @JavaMethod
  open func descendingMap() -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func lowerEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func lowerKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func floorEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func floorKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func ceilingEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func ceilingKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func higherEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  open func higherKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open func navigableKeySet() -> NavigableSet<JavaObject>!

  @JavaMethod
  open func descendingKeySet() -> NavigableSet<JavaObject>!

  @JavaMethod
  open func subMap(_ arg0: JavaObject?, _ arg1: Bool, _ arg2: JavaObject?, _ arg3: Bool) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func subMap(_ arg0: JavaObject?, _ arg1: Bool, _ arg2: JavaObject?, _ arg3: Bool) -> NavigableMap!

  @JavaMethod
  open func subMap(_ arg0: JavaObject?, _ arg1: JavaObject?) -> SortedMap!

  @JavaMethod
  open func subMap(_ arg0: JavaObject?, _ arg1: JavaObject?) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func headMap(_ arg0: JavaObject?) -> SortedMap!

  @JavaMethod
  open func headMap(_ arg0: JavaObject?, _ arg1: Bool) -> NavigableMap!

  @JavaMethod
  open func headMap(_ arg0: JavaObject?, _ arg1: Bool) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func headMap(_ arg0: JavaObject?) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func tailMap(_ arg0: JavaObject?) -> SortedMap!

  @JavaMethod
  open func tailMap(_ arg0: JavaObject?) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func tailMap(_ arg0: JavaObject?, _ arg1: Bool) -> ConcurrentNavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  open func tailMap(_ arg0: JavaObject?, _ arg1: Bool) -> NavigableMap!

  @JavaMethod
  open func lastKey() -> JavaObject!
}
