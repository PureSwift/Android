// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import AndroidJavaLang
import AndroidJavaTime
import JavaKit
import JavaRuntime

@JavaClass("java.util.TimeZone", implements: Serializable.self, Cloneable.self)
open class TimeZone: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func clone() -> JavaObject!

  @JavaMethod
  open func getOffset(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32) -> Int32

  @JavaMethod
  open func getOffset(_ arg0: Int64) -> Int32

  @JavaMethod
  open func getDisplayName() -> String

  @JavaMethod
  open func getDisplayName(_ arg0: Bool, _ arg1: Int32) -> String

  @JavaMethod
  open func getDisplayName(_ arg0: Bool, _ arg1: Int32, _ arg2: Locale?) -> String

  @JavaMethod
  open func getDisplayName(_ arg0: Locale?) -> String

  @JavaMethod
  open func getID() -> String

  @JavaMethod
  open func getDSTSavings() -> Int32

  @JavaMethod
  open func hasSameRules(_ arg0: TimeZone?) -> Bool

  @JavaMethod
  open func toZoneId() -> ZoneId!

  @JavaMethod
  open func getRawOffset() -> Int32

  @JavaMethod
  open func useDaylightTime() -> Bool

  @JavaMethod
  open func setID(_ arg0: String)

  @JavaMethod
  open func setRawOffset(_ arg0: Int32)

  @JavaMethod
  open func observesDaylightTime() -> Bool
}
extension JavaClass<TimeZone> {
  @JavaStaticField(isFinal: true)
  public var SHORT: Int32

  @JavaStaticField(isFinal: true)
  public var LONG: Int32

  @JavaStaticMethod
  public func getDefault() -> TimeZone!

  @JavaStaticMethod
  public func getTimeZone(_ arg0: ZoneId?) -> TimeZone!

  @JavaStaticMethod
  public func getTimeZone(_ arg0: String) -> TimeZone!

  @JavaStaticMethod
  public func setDefault(_ arg0: TimeZone?)

  @JavaStaticMethod
  public func getAvailableIDs() -> [String]

  @JavaStaticMethod
  public func getAvailableIDs(_ arg0: Int32) -> [String]
}
