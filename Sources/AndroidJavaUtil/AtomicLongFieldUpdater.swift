// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.concurrent.atomic.AtomicLongFieldUpdater")
open class AtomicLongFieldUpdater<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  open func get(_ arg0: JavaObject?) -> Int64

  @JavaMethod
  open func set(_ arg0: JavaObject?, _ arg1: Int64)

  @JavaMethod
  open func compareAndSet(_ arg0: JavaObject?, _ arg1: Int64, _ arg2: Int64) -> Bool

  @JavaMethod
  open func weakCompareAndSet(_ arg0: JavaObject?, _ arg1: Int64, _ arg2: Int64) -> Bool

  @JavaMethod
  open func getAndSet(_ arg0: JavaObject?, _ arg1: Int64) -> Int64

  @JavaMethod
  open func getAndAdd(_ arg0: JavaObject?, _ arg1: Int64) -> Int64

  @JavaMethod
  open func incrementAndGet(_ arg0: JavaObject?) -> Int64

  @JavaMethod
  open func lazySet(_ arg0: JavaObject?, _ arg1: Int64)

  @JavaMethod
  open func getAndIncrement(_ arg0: JavaObject?) -> Int64

  @JavaMethod
  open func getAndDecrement(_ arg0: JavaObject?) -> Int64

  @JavaMethod
  open func decrementAndGet(_ arg0: JavaObject?) -> Int64

  @JavaMethod
  open func addAndGet(_ arg0: JavaObject?, _ arg1: Int64) -> Int64
}
extension JavaClass {
  @JavaStaticMethod
  public func newUpdater<T: AnyJavaObject>(_ arg0: JavaClass<JavaObject>?, _ arg1: String) -> AtomicLongFieldUpdater<JavaObject>! where ObjectType == AtomicLongFieldUpdater<T>
}
