// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension RandomGenerator {
  @JavaInterface("java.util.random.RandomGenerator$SplittableGenerator", extends: RandomGenerator.StreamableGenerator.self)
  public struct SplittableGenerator {
  @JavaMethod
  public func splits(_ arg0: Int64, _ arg1: RandomGenerator.SplittableGenerator?) -> Stream<RandomGenerator.SplittableGenerator>!

  @JavaMethod
  public func splits(_ arg0: Int64) -> Stream<RandomGenerator.SplittableGenerator>!

  @JavaMethod
  public func splits() -> Stream<RandomGenerator.SplittableGenerator>!

  @JavaMethod
  public func splits(_ arg0: RandomGenerator.SplittableGenerator?) -> Stream<RandomGenerator.SplittableGenerator>!

  @JavaMethod
  public func rngs(_ arg0: Int64) -> Stream<RandomGenerator>!

  @JavaMethod
  public func rngs() -> Stream<RandomGenerator>!

  @JavaMethod
  public func split() -> RandomGenerator.SplittableGenerator!

  @JavaMethod
  public func split(_ arg0: RandomGenerator.SplittableGenerator?) -> RandomGenerator.SplittableGenerator!

  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func longs(_ arg0: Int64, _ arg1: Int64, _ arg2: Int64) -> LongStream!

  @JavaMethod
  public func longs(_ arg0: Int64) -> LongStream!

  @JavaMethod
  public func longs(_ arg0: Int64, _ arg1: Int64) -> LongStream!

  @JavaMethod
  public func longs() -> LongStream!

  @JavaMethod
  public func ints() -> IntStream!

  @JavaMethod
  public func ints(_ arg0: Int32, _ arg1: Int32) -> IntStream!

  @JavaMethod
  public func ints(_ arg0: Int64, _ arg1: Int32, _ arg2: Int32) -> IntStream!

  @JavaMethod
  public func ints(_ arg0: Int64) -> IntStream!

  @JavaMethod
  public func doubles() -> DoubleStream!

  @JavaMethod
  public func doubles(_ arg0: Int64) -> DoubleStream!

  @JavaMethod
  public func doubles(_ arg0: Double, _ arg1: Double) -> DoubleStream!

  @JavaMethod
  public func doubles(_ arg0: Int64, _ arg1: Double, _ arg2: Double) -> DoubleStream!

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func equiDoubles(_ arg0: Double, _ arg1: Double, _ arg2: Bool, _ arg3: Bool) -> DoubleStream!

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<RandomGenerator.SplittableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> RandomGenerator.SplittableGenerator!
}
