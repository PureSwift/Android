// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.ScheduledThreadPoolExecutor", implements: ScheduledExecutorService.self)
open class ScheduledThreadPoolExecutor: ThreadPoolExecutor {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: ThreadFactory?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: RejectedExecutionHandler?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: ThreadFactory?, _ arg2: RejectedExecutionHandler?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getExecuteExistingDelayedTasksAfterShutdownPolicy() -> Bool

  @JavaMethod
  open func getContinueExistingPeriodicTasksAfterShutdownPolicy() -> Bool

  @JavaMethod
  open func decorateTask(_ arg0: Callable<JavaObject>?, _ arg1: RunnableScheduledFuture<JavaObject>?) -> RunnableScheduledFuture<JavaObject>!

  @JavaMethod
  open func setContinueExistingPeriodicTasksAfterShutdownPolicy(_ arg0: Bool)

  @JavaMethod
  open func setExecuteExistingDelayedTasksAfterShutdownPolicy(_ arg0: Bool)

  @JavaMethod
  open func getRemoveOnCancelPolicy() -> Bool

  @JavaMethod
  open override func shutdown()

  @JavaMethod
  open func schedule(_ arg0: Callable<JavaObject>?, _ arg1: Int64, _ arg2: TimeUnit?) -> ScheduledFuture<JavaObject>!

  @JavaMethod
  open func setRemoveOnCancelPolicy(_ arg0: Bool)

  @JavaMethod
  open override func submit(_ arg0: Callable<JavaObject>?) -> Future<JavaObject>!
}
