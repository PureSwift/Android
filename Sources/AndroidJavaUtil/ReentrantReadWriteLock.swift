// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.locks.ReentrantReadWriteLock", implements: ReadWriteLock.self, Serializable.self)
open class ReentrantReadWriteLock: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getReadLockCount() -> Int32

  @JavaMethod
  open func writeLock() -> ReentrantReadWriteLock.WriteLock!

  @JavaMethod
  open func writeLock() -> Lock!

  @JavaMethod
  open func readLock() -> Lock!

  @JavaMethod
  open func readLock() -> ReentrantReadWriteLock.ReadLock!

  @JavaMethod
  open func isWriteLocked() -> Bool

  @JavaMethod
  open func getWriteHoldCount() -> Int32

  @JavaMethod
  open func getReadHoldCount() -> Int32

  @JavaMethod
  open func isWriteLockedByCurrentThread() -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func hasQueuedThreads() -> Bool

  @JavaMethod
  open func getQueueLength() -> Int32

  @JavaMethod
  open func hasWaiters(_ arg0: Condition?) -> Bool

  @JavaMethod
  open func getWaitQueueLength(_ arg0: Condition?) -> Int32

  @JavaMethod
  open func isFair() -> Bool
}
