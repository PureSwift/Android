// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaClass("java.util.LinkedHashMap")
open class LinkedHashMap<K: AnyJavaObject, V: AnyJavaObject>: HashMap {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Map<JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Float, _ arg2: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  open override func clear()

  @JavaMethod
  open override func replaceAll(_ arg0: JavaBiFunction<JavaObject, JavaObject, JavaObject>?)

  @JavaMethod
  open override func entrySet() -> JavaSet<Map.Entry<JavaObject, JavaObject>>!

  @JavaMethod
  open override func forEach(_ arg0: JavaBiConsumer<JavaObject, JavaObject>?)

  @JavaMethod
  open override func keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  open override func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func removeEldestEntry(_ arg0: Map.Entry<JavaObject, JavaObject>?) -> Bool

  @JavaMethod
  open func putFirst(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func putLast(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!
}
extension JavaClass {
  @JavaStaticMethod
  public func newLinkedHashMap<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: Int32) -> LinkedHashMap<JavaObject, JavaObject>! where ObjectType == LinkedHashMap<K, V>
}
