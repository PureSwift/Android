// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaInterface("java.util.Map")
public struct Map<K: AnyJavaObject, V: AnyJavaObject> {
  @JavaMethod
  public func remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  public func remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func size() -> Int32

  @JavaMethod
  public func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  public func hashCode() -> Int32

  @JavaMethod
  public func clear()

  @JavaMethod
  public func isEmpty() -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func replaceAll(_ arg0: JavaBiFunction<JavaObject, JavaObject, JavaObject>?)

  @JavaMethod
  public func merge(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func entrySet() -> JavaSet<Map<JavaObject, JavaObject>.Entry>!

  @JavaMethod
  public func putAll(_ arg0: Map<JavaObject, JavaObject>?)

  @JavaMethod
  public func putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func compute(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func computeIfAbsent(_ arg0: JavaObject?, _ arg1: JavaFunction<JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  public func forEach(_ arg0: JavaBiConsumer<JavaObject, JavaObject>?)

  @JavaMethod
  public func keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  public func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func containsKey(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func computeIfPresent(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!
}
extension JavaClass {
  @JavaStaticMethod
  public func copyOf<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: Map<JavaObject, JavaObject>?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>() -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?, _ arg10: JavaObject?, _ arg11: JavaObject?, _ arg12: JavaObject?, _ arg13: JavaObject?, _ arg14: JavaObject?, _ arg15: JavaObject?, _ arg16: JavaObject?, _ arg17: JavaObject?, _ arg18: JavaObject?, _ arg19: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?, _ arg10: JavaObject?, _ arg11: JavaObject?, _ arg12: JavaObject?, _ arg13: JavaObject?, _ arg14: JavaObject?, _ arg15: JavaObject?, _ arg16: JavaObject?, _ arg17: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?, _ arg10: JavaObject?, _ arg11: JavaObject?, _ arg12: JavaObject?, _ arg13: JavaObject?, _ arg14: JavaObject?, _ arg15: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?, _ arg10: JavaObject?, _ arg11: JavaObject?, _ arg12: JavaObject?, _ arg13: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?, _ arg10: JavaObject?, _ arg11: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

  @JavaStaticMethod
  public func of<K: AnyJavaObject, V: AnyJavaObject>(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?, _ arg3: JavaObject?, _ arg4: JavaObject?, _ arg5: JavaObject?, _ arg6: JavaObject?, _ arg7: JavaObject?, _ arg8: JavaObject?, _ arg9: JavaObject?) -> Map<JavaObject, JavaObject>! where ObjectType == Map<K, V>

}
