// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.util.SimpleTimeZone")
open class SimpleTimeZone: TimeZone {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: String, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: Int32, _ arg8: Int32, _ arg9: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: String, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: Int32, _ arg8: Int32, _ arg9: Int32, _ arg10: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: String, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: Int32, _ arg8: Int32, _ arg9: Int32, _ arg10: Int32, _ arg11: Int32, _ arg12: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setStartRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open func setStartRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open func setStartRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Bool)

  @JavaMethod
  open func setEndRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open func setEndRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Bool)

  @JavaMethod
  open func setEndRule(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open func setStartYear(_ arg0: Int32)

  @JavaMethod
  open func setDSTSavings(_ arg0: Int32)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open override func clone() -> JavaObject!

  @JavaMethod
  open override func getOffset(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32) -> Int32

  @JavaMethod
  open override func getOffset(_ arg0: Int64) -> Int32

  @JavaMethod
  open override func getDSTSavings() -> Int32

  @JavaMethod
  open override func hasSameRules(_ arg0: TimeZone?) -> Bool

  @JavaMethod
  open override func getRawOffset() -> Int32

  @JavaMethod
  open override func inDaylightTime(_ arg0: Date?) -> Bool

  @JavaMethod
  open override func useDaylightTime() -> Bool

  @JavaMethod
  open override func setRawOffset(_ arg0: Int32)

  @JavaMethod
  open override func observesDaylightTime() -> Bool
}
extension JavaClass<SimpleTimeZone> {
  @JavaStaticField(isFinal: true)
  public var WALL_TIME: Int32

  @JavaStaticField(isFinal: true)
  public var STANDARD_TIME: Int32

  @JavaStaticField(isFinal: true)
  public var UTC_TIME: Int32

  @JavaStaticField(isFinal: true)
  public var SHORT: Int32

  @JavaStaticField(isFinal: true)
  public var LONG: Int32
}
