// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension Random {
  @JavaInterface("java.util.random.RandomGenerator")
  public struct Generator {
  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension Random.Generator {
  @JavaInterface("java.util.random.RandomGenerator$ArbitrarilyJumpableGenerator", extends: Random.Generator.LeapableGenerator.self)
  public struct ArbitrarilyJumpableGenerator {
  @JavaMethod
  public func copyAndJump(_ arg0: Double) -> Random.Generator.ArbitrarilyJumpableGenerator!

  @JavaMethod
  public func jumpPowerOfTwo(_ arg0: Int32)

  @JavaMethod
  public func copy() -> Random.Generator.LeapableGenerator!

  @JavaMethod
  public func copy() -> Random.Generator.JumpableGenerator!

  @JavaMethod
  public func copy() -> Random.Generator.ArbitrarilyJumpableGenerator!

  @JavaMethod
  public func jump(_ arg0: Double)

  @JavaMethod
  public func jump()

  @JavaMethod
  public func leap()

  @JavaMethod
  public func leapDistance() -> Double

  @JavaMethod
  public func copyAndLeap() -> Random.Generator.JumpableGenerator!

  @JavaMethod
  public func jumpDistance() -> Double

  @JavaMethod
  public func copyAndJump() -> Random.Generator!

  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<Random.Generator.ArbitrarilyJumpableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator.ArbitrarilyJumpableGenerator!
}
extension Random.Generator {
  @JavaInterface("java.util.random.RandomGenerator$JumpableGenerator", extends: Random.Generator.StreamableGenerator.self)
  public struct JumpableGenerator {
  @JavaMethod
  public func jumpDistance() -> Double

  @JavaMethod
  public func copyAndJump() -> Random.Generator!

  @JavaMethod
  public func copy() -> Random.Generator.JumpableGenerator!

  @JavaMethod
  public func jump()

  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<Random.Generator.JumpableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator.JumpableGenerator!
}
extension Random.Generator {
  @JavaInterface("java.util.random.RandomGenerator$LeapableGenerator", extends: Random.Generator.JumpableGenerator.self)
  public struct LeapableGenerator {
  @JavaMethod
  public func leapDistance() -> Double

  @JavaMethod
  public func copyAndLeap() -> Random.Generator.JumpableGenerator!

  @JavaMethod
  public func copy() -> Random.Generator.JumpableGenerator!

  @JavaMethod
  public func copy() -> Random.Generator.LeapableGenerator!

  @JavaMethod
  public func leap()

  @JavaMethod
  public func jumpDistance() -> Double

  @JavaMethod
  public func copyAndJump() -> Random.Generator!

  @JavaMethod
  public func jump()

  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<Random.Generator.LeapableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator.LeapableGenerator!
}
extension Random.Generator {
  @JavaInterface("java.util.random.RandomGenerator$SplittableGenerator", extends: Random.Generator.StreamableGenerator.self)
  public struct SplittableGenerator {
  @JavaMethod
  public func split() -> Random.Generator.SplittableGenerator!

  @JavaMethod
  public func split(_ arg0: Random.Generator.SplittableGenerator?) -> Random.Generator.SplittableGenerator!

  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<Random.Generator.SplittableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator.SplittableGenerator!
}
extension Random.Generator {
  @JavaInterface("java.util.random.RandomGenerator$StreamableGenerator", extends: Random.Generator.self)
  public struct StreamableGenerator {
  @JavaMethod
  public func nextDouble(_ arg0: Double) -> Double

  @JavaMethod
  public func nextDouble() -> Double

  @JavaMethod
  public func nextDouble(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextInt() -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  public func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  public func nextBytes(_ arg0: [Int8])

  @JavaMethod
  public func nextLong(_ arg0: Int64, _ arg1: Int64) -> Int64

  @JavaMethod
  public func nextLong(_ arg0: Int64) -> Int64

  @JavaMethod
  public func nextLong() -> Int64

  @JavaMethod
  public func nextBoolean() -> Bool

  @JavaMethod
  public func nextFloat() -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float) -> Float

  @JavaMethod
  public func nextFloat(_ arg0: Float, _ arg1: Float) -> Float

  @JavaMethod
  public func nextGaussian(_ arg0: Double, _ arg1: Double) -> Double

  @JavaMethod
  public func nextGaussian() -> Double

  @JavaMethod
  public func isDeprecated() -> Bool

  @JavaMethod
  public func nextExponential() -> Double
  }
}
extension JavaClass<Random.Generator.StreamableGenerator> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator.StreamableGenerator!
}
extension JavaClass<Random.Generator> {
  @JavaStaticMethod
  public func getDefault() -> Random.Generator!

  @JavaStaticMethod
  public func of(_ arg0: String) -> Random.Generator!
}
