// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.AbstractExecutorService", implements: ExecutorService.self)
open class AbstractExecutorService: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func newTaskFor(_ arg0: Callable<JavaObject>?) -> RunnableFuture<JavaObject>!

  @JavaMethod
  open func submit(_ arg0: Callable<JavaObject>?) -> Future<JavaObject>!

  @JavaMethod
  open func invokeAny(_ arg0: JavaCollection<Callable<JavaObject>>?) throws -> JavaObject!

  @JavaMethod
  open func invokeAny(_ arg0: JavaCollection<Callable<JavaObject>>?, _ arg1: Int64, _ arg2: TimeUnit?) throws -> JavaObject!

  @JavaMethod
  open func invokeAll(_ arg0: JavaCollection<Callable<JavaObject>>?) throws -> List<Future<JavaObject>>!

  @JavaMethod
  open func invokeAll(_ arg0: JavaCollection<Callable<JavaObject>>?, _ arg1: Int64, _ arg2: TimeUnit?) throws -> List<Future<JavaObject>>!
}
