// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaClass("java.util.concurrent.SubmissionPublisher", implements: Flow.Publisher<JavaObject>.self)
open class SubmissionPublisher<T: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Executor?, _ arg1: Int32, _ arg2: JavaBiConsumer<JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Executor?, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func isClosed() -> Bool

  @JavaMethod
  open func subscribe(_ arg0: Flow.Subscriber<JavaObject>?)

  @JavaMethod
  open func closeExceptionally(_ arg0: Throwable?)

  @JavaMethod
  open func getClosedException() -> Throwable!

  @JavaMethod
  open func hasSubscribers() -> Bool

  @JavaMethod
  open func getNumberOfSubscribers() -> Int32

  @JavaMethod
  open func getMaxBufferCapacity() -> Int32

  @JavaMethod
  open func getSubscribers() -> List<Flow.Subscriber<JavaObject>>!

  @JavaMethod
  open func isSubscribed(_ arg0: Flow.Subscriber<JavaObject>?) -> Bool

  @JavaMethod
  open func estimateMinimumDemand() -> Int64

  @JavaMethod
  open func estimateMaximumLag() -> Int32

  @JavaMethod
  open func close()

  @JavaMethod
  open func offer(_ arg0: JavaObject?, _ arg1: Int64, _ arg2: TimeUnit?, _ arg3: JavaBiPredicate<Flow.Subscriber<JavaObject>, JavaObject>?) -> Int32

  @JavaMethod
  open func offer(_ arg0: JavaObject?, _ arg1: JavaBiPredicate<Flow.Subscriber<JavaObject>, JavaObject>?) -> Int32

  @JavaMethod
  open func submit(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func consume(_ arg0: JavaConsumer<JavaObject>?) -> CompletableFuture<JavaVoid>!

  @JavaMethod
  open func getExecutor() -> Executor!
}
