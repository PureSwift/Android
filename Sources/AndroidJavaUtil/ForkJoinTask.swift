// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.ForkJoinTask", implements: Future<JavaObject>.self, Serializable.self)
open class ForkJoinTask<V: AnyJavaObject>: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func invoke() -> JavaObject!

  @JavaMethod
  open func get() throws -> JavaObject!

  @JavaMethod
  open func get(_ arg0: Int64, _ arg1: TimeUnit?) throws -> JavaObject!

  @JavaMethod
  open func join() -> JavaObject!

  @JavaMethod
  open func getException() -> Throwable!

  @JavaMethod
  open func state() -> Future.State!

  @JavaMethod
  open func isDone() -> Bool

  @JavaMethod
  open func cancel(_ arg0: Bool) -> Bool

  @JavaMethod
  open func exec() -> Bool

  @JavaMethod
  open func reinitialize()

  @JavaMethod
  open func complete(_ arg0: JavaObject?)

  @JavaMethod
  open func quietlyComplete()

  @JavaMethod
  open func setRawResult(_ arg0: JavaObject?)

  @JavaMethod
  open func getRawResult() -> JavaObject!

  @JavaMethod
  open func fork() -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open func isCancelled() -> Bool

  @JavaMethod
  open func isCompletedAbnormally() -> Bool

  @JavaMethod
  open func isCompletedNormally() -> Bool

  @JavaMethod
  open func resultNow() -> JavaObject!

  @JavaMethod
  open func exceptionNow() -> Throwable!

  @JavaMethod
  open func completeExceptionally(_ arg0: Throwable?)

  @JavaMethod
  open func quietlyJoin()

  @JavaMethod
  open func quietlyJoin(_ arg0: Int64, _ arg1: TimeUnit?) throws -> Bool

  @JavaMethod
  open func quietlyInvoke()

  @JavaMethod
  open func quietlyJoinUninterruptibly(_ arg0: Int64, _ arg1: TimeUnit?) -> Bool

  @JavaMethod
  open func tryUnfork() -> Bool

  @JavaMethod
  open func getForkJoinTaskTag() -> Int16

  @JavaMethod
  open func setForkJoinTaskTag(_ arg0: Int16) -> Int16

  @JavaMethod
  open func compareAndSetForkJoinTaskTag(_ arg0: Int16, _ arg1: Int16) -> Bool
}
extension JavaClass {
  @JavaStaticMethod
  public func adapt<V: AnyJavaObject>(_ arg0: Callable<JavaObject>?) -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func getQueuedTaskCount<V: AnyJavaObject>() -> Int32 where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func getPool<V: AnyJavaObject>() -> ForkJoinPool! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func invokeAll<V: AnyJavaObject>(_ arg0: [ForkJoinTask<JavaObject>?]) where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func invokeAll<V: AnyJavaObject>(_ arg0: ForkJoinTask<JavaObject>?, _ arg1: ForkJoinTask<JavaObject>?) where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func invokeAll<V: AnyJavaObject>(_ arg0: JavaCollection<ForkJoinTask<JavaObject>>?) -> JavaCollection<ForkJoinTask<JavaObject>>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func getSurplusQueuedTaskCount<V: AnyJavaObject>() -> Int32 where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func pollSubmission<V: AnyJavaObject>() -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func helpQuiesce<V: AnyJavaObject>() where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func inForkJoinPool<V: AnyJavaObject>() -> Bool where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func peekNextLocalTask<V: AnyJavaObject>() -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func pollNextLocalTask<V: AnyJavaObject>() -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func pollTask<V: AnyJavaObject>() -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>

  @JavaStaticMethod
  public func adaptInterruptible<V: AnyJavaObject>(_ arg0: Callable<JavaObject>?) -> ForkJoinTask<JavaObject>! where ObjectType == ForkJoinTask<V>
}
