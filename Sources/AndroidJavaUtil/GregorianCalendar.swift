// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaTime
import JavaKit
import JavaRuntime

@JavaClass("java.util.GregorianCalendar")
open class GregorianCalendar: Calendar {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: TimeZone?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Locale?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: TimeZone?, _ arg1: Locale?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open override func clone() -> JavaObject!

  @JavaMethod
  open override func add(_ arg0: Int32, _ arg1: Int32)

  @JavaMethod
  open override func setTimeZone(_ arg0: TimeZone?)

  @JavaMethod
  open override func getTimeZone() -> TimeZone!

  @JavaMethod
  open override func isWeekDateSupported() -> Bool

  @JavaMethod
  open override func getWeekYear() -> Int32

  @JavaMethod
  open override func getMaximum(_ arg0: Int32) -> Int32

  @JavaMethod
  open override func getLeastMaximum(_ arg0: Int32) -> Int32

  @JavaMethod
  open func isLeapYear(_ arg0: Int32) -> Bool

  @JavaMethod
  open override func getCalendarType() -> String

  @JavaMethod
  open override func getMinimum(_ arg0: Int32) -> Int32

  @JavaMethod
  open override func computeFields()

  @JavaMethod
  open override func roll(_ arg0: Int32, _ arg1: Bool)

  @JavaMethod
  open override func roll(_ arg0: Int32, _ arg1: Int32)

  @JavaMethod
  open override func getGreatestMinimum(_ arg0: Int32) -> Int32

  @JavaMethod
  open override func computeTime()

  @JavaMethod
  open override func setWeekDate(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open override func getWeeksInWeekYear() -> Int32

  @JavaMethod
  open override func getActualMinimum(_ arg0: Int32) -> Int32

  @JavaMethod
  open override func getActualMaximum(_ arg0: Int32) -> Int32

  @JavaMethod
  open func toZonedDateTime() -> ZonedDateTime!
}
extension GregorianCalendar {
  @JavaClass("java.util.Calendar$Builder")
  open class Builder: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func set(_ arg0: Int32, _ arg1: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func build() -> Calendar!

  @JavaMethod
  open func setTimeZone(_ arg0: TimeZone?) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setLenient(_ arg0: Bool) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setWeekDate(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setInstant(_ arg0: Int64) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setFields(_ arg0: [Int32]) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setTimeOfDay(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setTimeOfDay(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setWeekDefinition(_ arg0: Int32, _ arg1: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setDate(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setCalendarType(_ arg0: String) -> GregorianCalendar.Builder!

  @JavaMethod
  open func setLocale(_ arg0: Locale?) -> GregorianCalendar.Builder!
  }
}
extension JavaClass<GregorianCalendar> {
  @JavaStaticField(isFinal: true)
  public var BC: Int32

  @JavaStaticField(isFinal: true)
  public var AD: Int32

  @JavaStaticField(isFinal: true)
  public var ERA: Int32

  @JavaStaticField(isFinal: true)
  public var YEAR: Int32

  @JavaStaticField(isFinal: true)
  public var MONTH: Int32

  @JavaStaticField(isFinal: true)
  public var WEEK_OF_YEAR: Int32

  @JavaStaticField(isFinal: true)
  public var WEEK_OF_MONTH: Int32

  @JavaStaticField(isFinal: true)
  public var DATE: Int32

  @JavaStaticField(isFinal: true)
  public var DAY_OF_MONTH: Int32

  @JavaStaticField(isFinal: true)
  public var DAY_OF_YEAR: Int32

  @JavaStaticField(isFinal: true)
  public var DAY_OF_WEEK: Int32

  @JavaStaticField(isFinal: true)
  public var DAY_OF_WEEK_IN_MONTH: Int32

  @JavaStaticField(isFinal: true)
  public var AM_PM: Int32

  @JavaStaticField(isFinal: true)
  public var HOUR: Int32

  @JavaStaticField(isFinal: true)
  public var HOUR_OF_DAY: Int32

  @JavaStaticField(isFinal: true)
  public var MINUTE: Int32

  @JavaStaticField(isFinal: true)
  public var SECOND: Int32

  @JavaStaticField(isFinal: true)
  public var MILLISECOND: Int32

  @JavaStaticField(isFinal: true)
  public var ZONE_OFFSET: Int32

  @JavaStaticField(isFinal: true)
  public var DST_OFFSET: Int32

  @JavaStaticField(isFinal: true)
  public var FIELD_COUNT: Int32

  @JavaStaticField(isFinal: true)
  public var SUNDAY: Int32

  @JavaStaticField(isFinal: true)
  public var MONDAY: Int32

  @JavaStaticField(isFinal: true)
  public var TUESDAY: Int32

  @JavaStaticField(isFinal: true)
  public var WEDNESDAY: Int32

  @JavaStaticField(isFinal: true)
  public var THURSDAY: Int32

  @JavaStaticField(isFinal: true)
  public var FRIDAY: Int32

  @JavaStaticField(isFinal: true)
  public var SATURDAY: Int32

  @JavaStaticField(isFinal: true)
  public var JANUARY: Int32

  @JavaStaticField(isFinal: true)
  public var FEBRUARY: Int32

  @JavaStaticField(isFinal: true)
  public var MARCH: Int32

  @JavaStaticField(isFinal: true)
  public var APRIL: Int32

  @JavaStaticField(isFinal: true)
  public var MAY: Int32

  @JavaStaticField(isFinal: true)
  public var JUNE: Int32

  @JavaStaticField(isFinal: true)
  public var JULY: Int32

  @JavaStaticField(isFinal: true)
  public var AUGUST: Int32

  @JavaStaticField(isFinal: true)
  public var SEPTEMBER: Int32

  @JavaStaticField(isFinal: true)
  public var OCTOBER: Int32

  @JavaStaticField(isFinal: true)
  public var NOVEMBER: Int32

  @JavaStaticField(isFinal: true)
  public var DECEMBER: Int32

  @JavaStaticField(isFinal: true)
  public var UNDECIMBER: Int32

  @JavaStaticField(isFinal: true)
  public var AM: Int32

  @JavaStaticField(isFinal: true)
  public var PM: Int32

  @JavaStaticField(isFinal: true)
  public var ALL_STYLES: Int32

  @JavaStaticField(isFinal: true)
  public var SHORT: Int32

  @JavaStaticField(isFinal: true)
  public var LONG: Int32

  @JavaStaticField(isFinal: true)
  public var NARROW_FORMAT: Int32

  @JavaStaticField(isFinal: true)
  public var NARROW_STANDALONE: Int32

  @JavaStaticField(isFinal: true)
  public var SHORT_FORMAT: Int32

  @JavaStaticField(isFinal: true)
  public var LONG_FORMAT: Int32

  @JavaStaticField(isFinal: true)
  public var SHORT_STANDALONE: Int32

  @JavaStaticField(isFinal: true)
  public var LONG_STANDALONE: Int32

  @JavaStaticMethod
  public func from(_ arg0: ZonedDateTime?) -> GregorianCalendar!
}
