// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaClass("java.util.logging.LogManager")
open class LogManager: JavaObject {
  @JavaMethod
  open func reset()

  @JavaMethod
  open func getProperty(_ arg0: String) -> String

  @JavaMethod
  open func getLogger(_ arg0: String) -> Logger!

  @JavaMethod
  open func checkAccess()

  @JavaMethod
  open func addLogger(_ arg0: Logger?) -> Bool

  @JavaMethod
  open func readConfiguration() throws

  @JavaMethod
  open func readConfiguration(_ arg0: InputStream?) throws

  @JavaMethod
  open func getLoggerNames() -> Enumeration<JavaString>!

  @JavaMethod
  open func updateConfiguration(_ arg0: InputStream?, _ arg1: JavaFunction<JavaString, JavaBiFunction<JavaString, JavaString, JavaString>>?) throws

  @JavaMethod
  open func updateConfiguration(_ arg0: JavaFunction<JavaString, JavaBiFunction<JavaString, JavaString, JavaString>>?) throws
}
extension JavaClass<LogManager> {
  @JavaStaticField(isFinal: true)
  public var LOGGING_MXBEAN_NAME: String

  @JavaStaticMethod
  public func getLogManager() -> LogManager!

  @JavaStaticMethod
  public func getLoggingMXBean() -> LoggingMXBean!
}
