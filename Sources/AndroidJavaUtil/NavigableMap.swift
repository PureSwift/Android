// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaInterface("java.util.NavigableMap", extends: SortedMap<JavaObject, JavaObject>.self)
public struct NavigableMap<K: AnyJavaObject, V: AnyJavaObject> {
  @JavaMethod
  public func reversed() -> NavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  public func reversed() -> SortedMap!

  @JavaMethod
  public func firstEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func lastEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func pollFirstEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func pollLastEntry() -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func descendingMap() -> NavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  public func lowerEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func lowerKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func floorEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func floorKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func ceilingEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func ceilingKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func higherEntry(_ arg0: JavaObject?) -> Map.Entry<JavaObject, JavaObject>!

  @JavaMethod
  public func higherKey(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func navigableKeySet() -> NavigableSet<JavaObject>!

  @JavaMethod
  public func descendingKeySet() -> NavigableSet<JavaObject>!

  @JavaMethod
  public func subMap(_ arg0: JavaObject?, _ arg1: JavaObject?) -> SortedMap<JavaObject, JavaObject>!

  @JavaMethod
  public func subMap(_ arg0: JavaObject?, _ arg1: Bool, _ arg2: JavaObject?, _ arg3: Bool) -> NavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  public func headMap(_ arg0: JavaObject?, _ arg1: Bool) -> NavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  public func headMap(_ arg0: JavaObject?) -> SortedMap<JavaObject, JavaObject>!

  @JavaMethod
  public func tailMap(_ arg0: JavaObject?, _ arg1: Bool) -> NavigableMap<JavaObject, JavaObject>!

  @JavaMethod
  public func tailMap(_ arg0: JavaObject?) -> SortedMap<JavaObject, JavaObject>!

  @JavaMethod
  public func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  public func entrySet() -> JavaSet<Map.Entry<JavaObject, JavaObject>>!

  @JavaMethod
  public func keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  public func comparator() -> Comparator<JavaObject>!

  @JavaMethod
  public func firstKey() -> JavaObject!

  @JavaMethod
  public func putFirst(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func putLast(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func lastKey() -> JavaObject!

  @JavaMethod
  public func remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  public func remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func size() -> Int32

  @JavaMethod
  public func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  public func put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func hashCode() -> Int32

  @JavaMethod
  public func clear()

  @JavaMethod
  public func isEmpty() -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  public func replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func putAll(_ arg0: Map<JavaObject, JavaObject>?)

  @JavaMethod
  public func putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  public func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func containsKey(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!
}
