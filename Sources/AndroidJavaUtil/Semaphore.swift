// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.Semaphore", implements: Serializable.self)
open class Semaphore: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func drainPermits() -> Int32

  @JavaMethod
  open func reducePermits(_ arg0: Int32)

  @JavaMethod
  open func acquireUninterruptibly(_ arg0: Int32)

  @JavaMethod
  open func acquireUninterruptibly()

  @JavaMethod
  open func availablePermits() -> Int32

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func release()

  @JavaMethod
  open func release(_ arg0: Int32)

  @JavaMethod
  open func hasQueuedThreads() -> Bool

  @JavaMethod
  open func getQueueLength() -> Int32

  @JavaMethod
  open func isFair() -> Bool

  @JavaMethod
  open func acquire() throws

  @JavaMethod
  open func acquire(_ arg0: Int32) throws

  @JavaMethod
  open func tryAcquire(_ arg0: Int32, _ arg1: Int64, _ arg2: TimeUnit?) throws -> Bool

  @JavaMethod
  open func tryAcquire(_ arg0: Int32) -> Bool

  @JavaMethod
  open func tryAcquire(_ arg0: Int64, _ arg1: TimeUnit?) throws -> Bool

  @JavaMethod
  open func tryAcquire() -> Bool
}
