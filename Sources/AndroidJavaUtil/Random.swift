// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaRuntime

@JavaClass("java.util.Random", implements: RandomGenerator.self, Serializable.self)
open class Random: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func next(_ arg0: Int32) -> Int32

  @JavaMethod
  open func nextDouble() -> Double

  @JavaMethod
  open func nextInt(_ arg0: Int32) -> Int32

  @JavaMethod
  open func nextInt() -> Int32

  @JavaMethod
  open func nextBytes(_ arg0: [Int8])

  @JavaMethod
  open func longs(_ arg0: Int64) -> LongStream!

  @JavaMethod
  open func longs(_ arg0: Int64, _ arg1: Int64, _ arg2: Int64) -> LongStream!

  @JavaMethod
  open func longs(_ arg0: Int64, _ arg1: Int64) -> LongStream!

  @JavaMethod
  open func longs() -> LongStream!

  @JavaMethod
  open func setSeed(_ arg0: Int64)

  @JavaMethod
  open func ints(_ arg0: Int64, _ arg1: Int32, _ arg2: Int32) -> IntStream!

  @JavaMethod
  open func ints(_ arg0: Int32, _ arg1: Int32) -> IntStream!

  @JavaMethod
  open func ints(_ arg0: Int64) -> IntStream!

  @JavaMethod
  open func ints() -> IntStream!

  @JavaMethod
  open func doubles(_ arg0: Int64) -> DoubleStream!

  @JavaMethod
  open func doubles() -> DoubleStream!

  @JavaMethod
  open func doubles(_ arg0: Int64, _ arg1: Double, _ arg2: Double) -> DoubleStream!

  @JavaMethod
  open func doubles(_ arg0: Double, _ arg1: Double) -> DoubleStream!

  @JavaMethod
  open func nextLong() -> Int64

  @JavaMethod
  open func nextBoolean() -> Bool

  @JavaMethod
  open func nextFloat() -> Float

  @JavaMethod
  open func nextGaussian() -> Double
}
extension JavaClass<Random> {
  @JavaStaticMethod
  public func from(_ arg0: RandomGenerator?) -> Random!
}
