// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.Spliterators")
open class Spliterators: JavaObject {

}
extension JavaClass<Spliterators> {
  @JavaStaticMethod
  public func iterator(_ arg0: Spliterator.OfDouble?) -> PrimitiveIterator.OfDouble!

  @JavaStaticMethod
  public func iterator(_ arg0: Spliterator<JavaObject>?) -> JavaIterator<JavaObject>!

  @JavaStaticMethod
  public func iterator(_ arg0: Spliterator.OfInt?) -> PrimitiveIterator.OfInt!

  @JavaStaticMethod
  public func iterator(_ arg0: Spliterator.OfLong?) -> PrimitiveIterator.OfLong!

  @JavaStaticMethod
  public func spliteratorUnknownSize(_ arg0: PrimitiveIterator.OfInt?, _ arg1: Int32) -> Spliterator.OfInt!

  @JavaStaticMethod
  public func spliteratorUnknownSize(_ arg0: PrimitiveIterator.OfLong?, _ arg1: Int32) -> Spliterator.OfLong!

  @JavaStaticMethod
  public func spliteratorUnknownSize(_ arg0: PrimitiveIterator.OfDouble?, _ arg1: Int32) -> Spliterator.OfDouble!

  @JavaStaticMethod
  public func spliteratorUnknownSize(_ arg0: JavaIterator<JavaObject>?, _ arg1: Int32) -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func spliterator(_ arg0: [JavaObject?], _ arg1: Int32) -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func spliterator(_ arg0: JavaIterator<JavaObject>?, _ arg1: Int64, _ arg2: Int32) -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func spliterator(_ arg0: JavaCollection<JavaObject>?, _ arg1: Int32) -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func spliterator(_ arg0: PrimitiveIterator.OfInt?, _ arg1: Int64, _ arg2: Int32) -> Spliterator.OfInt!

  @JavaStaticMethod
  public func spliterator(_ arg0: PrimitiveIterator.OfLong?, _ arg1: Int64, _ arg2: Int32) -> Spliterator.OfLong!

  @JavaStaticMethod
  public func spliterator(_ arg0: PrimitiveIterator.OfDouble?, _ arg1: Int64, _ arg2: Int32) -> Spliterator.OfDouble!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Int64], _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Spliterator.OfLong!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Int64], _ arg1: Int32) -> Spliterator.OfLong!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Int32], _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Spliterator.OfInt!

  @JavaStaticMethod
  public func spliterator(_ arg0: [JavaObject?], _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Int32], _ arg1: Int32) -> Spliterator.OfInt!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Double], _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Spliterator.OfDouble!

  @JavaStaticMethod
  public func spliterator(_ arg0: [Double], _ arg1: Int32) -> Spliterator.OfDouble!

  @JavaStaticMethod
  public func emptySpliterator() -> Spliterator<JavaObject>!

  @JavaStaticMethod
  public func emptyIntSpliterator() -> Spliterator.OfInt!

  @JavaStaticMethod
  public func emptyLongSpliterator() -> Spliterator.OfLong!

  @JavaStaticMethod
  public func emptyDoubleSpliterator() -> Spliterator.OfDouble!
}
