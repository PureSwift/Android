// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.concurrent.ForkJoinPool")
open class ForkJoinPool: AbstractExecutorService {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: ForkJoinPool.ForkJoinWorkerThreadFactory?, _ arg2: ForkJoinWorkerThread.UncaughtExceptionHandler?, _ arg3: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func invoke(_ arg0: ForkJoinTask<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func shutdown()

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func getFactory() -> ForkJoinPool.ForkJoinWorkerThreadFactory!

  @JavaMethod
  open func isTerminated() -> Bool

  @JavaMethod
  open func getUncaughtExceptionHandler() -> ForkJoinWorkerThread.UncaughtExceptionHandler!

  @JavaMethod
  open func execute(_ arg0: ForkJoinTask<JavaObject>?)

  @JavaMethod
  open func externalSubmit(_ arg0: ForkJoinTask<JavaObject>?) -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open func getQueuedTaskCount() -> Int64

  @JavaMethod
  open func lazySubmit(_ arg0: ForkJoinTask<JavaObject>?) -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open func close()

  @JavaMethod
  open func isShutdown() -> Bool

  @JavaMethod
  open override func newTaskFor(_ arg0: Callable<JavaObject>?) -> RunnableFuture<JavaObject>!

  @JavaMethod
  open func submit(_ arg0: Callable?) -> Future!

  @JavaMethod
  open func submit(_ arg0: ForkJoinTask<JavaObject>?) -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open func submit(_ arg0: Callable<JavaObject>?) -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open override func invokeAny(_ arg0: JavaCollection<Callable<JavaObject>>?, _ arg1: Int64, _ arg2: TimeUnit?) throws -> JavaObject!

  @JavaMethod
  open override func invokeAny(_ arg0: JavaCollection<Callable<JavaObject>>?) throws -> JavaObject!

  @JavaMethod
  open override func invokeAll(_ arg0: JavaCollection<Callable<JavaObject>>?) throws -> List<Future<JavaObject>>!

  @JavaMethod
  open override func invokeAll(_ arg0: JavaCollection<Callable<JavaObject>>?, _ arg1: Int64, _ arg2: TimeUnit?) throws -> List<Future<JavaObject>>!

  @JavaMethod
  open func awaitTermination(_ arg0: Int64, _ arg1: TimeUnit?) throws -> Bool

  @JavaMethod
  open func pollSubmission() -> ForkJoinTask<JavaObject>!

  @JavaMethod
  open func getParallelism() -> Int32

  @JavaMethod
  open func setParallelism(_ arg0: Int32) -> Int32

  @JavaMethod
  open func invokeAllUninterruptibly(_ arg0: JavaCollection<Callable<JavaObject>>?) -> List<Future<JavaObject>>!

  @JavaMethod
  open func getPoolSize() -> Int32

  @JavaMethod
  open func getAsyncMode() -> Bool

  @JavaMethod
  open func getRunningThreadCount() -> Int32

  @JavaMethod
  open func getActiveThreadCount() -> Int32

  @JavaMethod
  open func isQuiescent() -> Bool

  @JavaMethod
  open func getStealCount() -> Int64

  @JavaMethod
  open func getQueuedSubmissionCount() -> Int32

  @JavaMethod
  open func hasQueuedSubmissions() -> Bool

  @JavaMethod
  open func drainTasksTo(_ arg0: JavaCollection<JavaObject>?) -> Int32

  @JavaMethod
  open func isTerminating() -> Bool

  @JavaMethod
  open func awaitQuiescence(_ arg0: Int64, _ arg1: TimeUnit?) -> Bool
}
extension JavaClass<ForkJoinPool> {
  @JavaStaticField(isFinal: true)
  public var defaultForkJoinWorkerThreadFactory: ForkJoinPool.ForkJoinWorkerThreadFactory!

  @JavaStaticMethod
  public func getCommonPoolParallelism() -> Int32

  @JavaStaticMethod
  public func commonPool() -> ForkJoinPool!

  @JavaStaticMethod
  public func managedBlock(_ arg0: ForkJoinPool.ManagedBlocker?) throws
}
