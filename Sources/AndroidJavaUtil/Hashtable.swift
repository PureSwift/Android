// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaKitFunction
import JavaRuntime

@JavaClass("java.util.Hashtable", implements: Map<JavaObject, JavaObject>.self, Serializable.self)
open class Hashtable<K: AnyJavaObject, V: AnyJavaObject>: JavaDictionary {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Map<JavaObject, JavaObject>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func remove(_ arg0: JavaObject?, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  open override func remove(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func size() -> Int32

  @JavaMethod
  open override func get(_ arg0: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func put(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func values() -> JavaCollection<JavaObject>!

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open override func clone() -> JavaObject!

  @JavaMethod
  open func clear()

  @JavaMethod
  open override func isEmpty() -> Bool

  @JavaMethod
  open func replace(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaObject?) -> Bool

  @JavaMethod
  open func replace(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func replaceAll(_ arg0: JavaBiFunction<JavaObject, JavaObject, JavaObject>?)

  @JavaMethod
  open func contains(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func elements() -> Enumeration<JavaObject>!

  @JavaMethod
  open func merge(_ arg0: JavaObject?, _ arg1: JavaObject?, _ arg2: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  open func entrySet() -> JavaSet<Map.Entry<JavaObject, JavaObject>>!

  @JavaMethod
  open func putAll(_ arg0: Map<JavaObject, JavaObject>?)

  @JavaMethod
  open func putIfAbsent(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func compute(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  open func computeIfAbsent(_ arg0: JavaObject?, _ arg1: JavaFunction<JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  open func forEach(_ arg0: JavaBiConsumer<JavaObject, JavaObject>?)

  @JavaMethod
  open override func keys() -> Enumeration<JavaObject>!

  @JavaMethod
  open func keySet() -> JavaSet<JavaObject>!

  @JavaMethod
  open func containsValue(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func containsKey(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func getOrDefault(_ arg0: JavaObject?, _ arg1: JavaObject?) -> JavaObject!

  @JavaMethod
  open func computeIfPresent(_ arg0: JavaObject?, _ arg1: JavaBiFunction<JavaObject, JavaObject, JavaObject>?) -> JavaObject!

  @JavaMethod
  open func rehash()
}
