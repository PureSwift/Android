// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitFunction
import JavaRuntime

extension Spliterator {
  @JavaInterface("java.util.Spliterator$OfInt", extends: Spliterator.OfPrimitive<JavaInteger, JavaIntConsumer, Spliterator.OfInt>.self)
  public struct OfInt {
  @JavaMethod
  public func forEachRemaining(_ arg0: JavaObject?)

  @JavaMethod
  public func forEachRemaining(_ arg0: JavaIntConsumer?)

  @JavaMethod
  public func forEachRemaining(_ arg0: JavaConsumer<JavaObject>?)

  @JavaMethod
  public func trySplit() -> Spliterator.OfPrimitive!

  @JavaMethod
  public func trySplit() -> Spliterator!

  @JavaMethod
  public func trySplit() -> Spliterator.OfInt!

  @JavaMethod
  public func tryAdvance(_ arg0: JavaIntConsumer?) -> Bool

  @JavaMethod
  public func tryAdvance(_ arg0: JavaConsumer<JavaObject>?) -> Bool

  @JavaMethod
  public func tryAdvance(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func characteristics() -> Int32

  @JavaMethod
  public func hasCharacteristics(_ arg0: Int32) -> Bool

  @JavaMethod
  public func estimateSize() -> Int64

  @JavaMethod
  public func getComparator() -> Comparator<JavaObject>!

  @JavaMethod
  public func getExactSizeIfKnown() -> Int64
  }
}
extension JavaClass<Spliterator.OfInt> {
  @JavaStaticField(isFinal: true)
  public var ORDERED: Int32

  @JavaStaticField(isFinal: true)
  public var DISTINCT: Int32

  @JavaStaticField(isFinal: true)
  public var SORTED: Int32

  @JavaStaticField(isFinal: true)
  public var SIZED: Int32

  @JavaStaticField(isFinal: true)
  public var NONNULL: Int32

  @JavaStaticField(isFinal: true)
  public var IMMUTABLE: Int32

  @JavaStaticField(isFinal: true)
  public var CONCURRENT: Int32

  @JavaStaticField(isFinal: true)
  public var SUBSIZED: Int32
}
