// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.util.ResourceBundle")
open class ResourceBundle: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func keySet() -> JavaSet<JavaString>!

  @JavaMethod
  open func containsKey(_ arg0: String) -> Bool

  @JavaMethod
  open func getStringArray(_ arg0: String) -> [String]

  @JavaMethod
  open func getString(_ arg0: String) -> String

  @JavaMethod
  open func getLocale() -> Locale!

  @JavaMethod
  open func getObject(_ arg0: String) -> JavaObject!

  @JavaMethod
  open func getKeys() -> Enumeration<JavaString>!

  @JavaMethod
  open func handleGetObject(_ arg0: String) -> JavaObject!

  @JavaMethod
  open func handleKeySet() -> JavaSet<JavaString>!

  @JavaMethod
  open func setParent(_ arg0: ResourceBundle?)

  @JavaMethod
  open func getBaseBundleName() -> String
}
extension JavaClass<ResourceBundle> {
  @JavaStaticMethod
  public func getBundle(_ arg0: String, _ arg1: Locale?) -> ResourceBundle!

  @JavaStaticMethod
  public func getBundle(_ arg0: String, _ arg1: ResourceBundle.Control?) -> ResourceBundle!

  @JavaStaticMethod
  public func getBundle(_ arg0: String) -> ResourceBundle!

  @JavaStaticMethod
  public func getBundle(_ arg0: String, _ arg1: Locale?, _ arg2: JavaClassLoader?) -> ResourceBundle!

  @JavaStaticMethod
  public func getBundle(_ arg0: String, _ arg1: Locale?, _ arg2: JavaClassLoader?, _ arg3: ResourceBundle.Control?) -> ResourceBundle!

  @JavaStaticMethod
  public func getBundle(_ arg0: String, _ arg1: Locale?, _ arg2: ResourceBundle.Control?) -> ResourceBundle!

  @JavaStaticMethod
  public func clearCache(_ arg0: JavaClassLoader?)

  @JavaStaticMethod
  public func clearCache()
}
