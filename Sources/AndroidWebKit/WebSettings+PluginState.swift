// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension WebSettings {
  @JavaClass("android.webkit.WebSettings$PluginState")
  open class PluginState: Enum {
    public enum PluginStateCases: Equatable {
      case ON
  case ON_DEMAND
  case OFF
    }

    public var enumValue: PluginStateCases! {
      let classObj = self.javaClass
      if self.equals(classObj.ON?.as(JavaObject.self)) {
        return PluginStateCases.ON
  } else if self.equals(classObj.ON_DEMAND?.as(JavaObject.self)) {
        return PluginStateCases.ON_DEMAND
  } else if self.equals(classObj.OFF?.as(JavaObject.self)) {
        return PluginStateCases.OFF
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: PluginStateCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<PluginState>(environment: _environment)
    switch enumValue {
      case .ON:
        if let ON = classObj.ON {
          self.init(javaHolder: ON.javaHolder)
        } else {
          fatalError("Enum value ON was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_DEMAND:
        if let ON_DEMAND = classObj.ON_DEMAND {
          self.init(javaHolder: ON_DEMAND.javaHolder)
        } else {
          fatalError("Enum value ON_DEMAND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OFF:
        if let OFF = classObj.OFF {
          self.init(javaHolder: OFF.javaHolder)
        } else {
          fatalError("Enum value OFF was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<WebSettings.PluginState> {
  @JavaStaticField(isFinal: true)
  public var ON: WebSettings.PluginState!

  @JavaStaticField(isFinal: true)
  public var ON_DEMAND: WebSettings.PluginState!

  @JavaStaticField(isFinal: true)
  public var OFF: WebSettings.PluginState!

  @JavaStaticMethod
  public func values() -> [WebSettings.PluginState?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> WebSettings.PluginState!
}
