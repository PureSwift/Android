// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension WebSettings {
  @JavaClass("android.webkit.WebSettings$TextSize")
  open class TextSize: Enum {
    public enum TextSizeCases: Equatable {
      case SMALLEST
  case SMALLER
  case NORMAL
  case LARGER
  case LARGEST
    }

    public var enumValue: TextSizeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.SMALLEST?.as(JavaObject.self)) {
        return TextSizeCases.SMALLEST
  } else if self.equals(classObj.SMALLER?.as(JavaObject.self)) {
        return TextSizeCases.SMALLER
  } else if self.equals(classObj.NORMAL?.as(JavaObject.self)) {
        return TextSizeCases.NORMAL
  } else if self.equals(classObj.LARGER?.as(JavaObject.self)) {
        return TextSizeCases.LARGER
  } else if self.equals(classObj.LARGEST?.as(JavaObject.self)) {
        return TextSizeCases.LARGEST
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: TextSizeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<TextSize>(environment: _environment)
    switch enumValue {
      case .SMALLEST:
        if let SMALLEST = classObj.SMALLEST {
          self.init(javaHolder: SMALLEST.javaHolder)
        } else {
          fatalError("Enum value SMALLEST was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SMALLER:
        if let SMALLER = classObj.SMALLER {
          self.init(javaHolder: SMALLER.javaHolder)
        } else {
          fatalError("Enum value SMALLER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NORMAL:
        if let NORMAL = classObj.NORMAL {
          self.init(javaHolder: NORMAL.javaHolder)
        } else {
          fatalError("Enum value NORMAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LARGER:
        if let LARGER = classObj.LARGER {
          self.init(javaHolder: LARGER.javaHolder)
        } else {
          fatalError("Enum value LARGER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LARGEST:
        if let LARGEST = classObj.LARGEST {
          self.init(javaHolder: LARGEST.javaHolder)
        } else {
          fatalError("Enum value LARGEST was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<WebSettings.TextSize> {
  @JavaStaticField(isFinal: true)
  public var SMALLEST: WebSettings.TextSize!

  @JavaStaticField(isFinal: true)
  public var SMALLER: WebSettings.TextSize!

  @JavaStaticField(isFinal: true)
  public var NORMAL: WebSettings.TextSize!

  @JavaStaticField(isFinal: true)
  public var LARGER: WebSettings.TextSize!

  @JavaStaticField(isFinal: true)
  public var LARGEST: WebSettings.TextSize!

  @JavaStaticMethod
  public func values() -> [WebSettings.TextSize?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> WebSettings.TextSize!
}
