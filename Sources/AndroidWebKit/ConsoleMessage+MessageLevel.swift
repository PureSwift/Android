// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension ConsoleMessage {
  @JavaClass("android.webkit.ConsoleMessage$MessageLevel")
  open class MessageLevel: Enum {
    public enum MessageLevelCases: Equatable {
      case TIP
  case LOG
  case WARNING
  case ERROR
  case DEBUG
    }

    public var enumValue: MessageLevelCases! {
      let classObj = self.javaClass
      if self.equals(classObj.TIP?.as(JavaObject.self)) {
        return MessageLevelCases.TIP
  } else if self.equals(classObj.LOG?.as(JavaObject.self)) {
        return MessageLevelCases.LOG
  } else if self.equals(classObj.WARNING?.as(JavaObject.self)) {
        return MessageLevelCases.WARNING
  } else if self.equals(classObj.ERROR?.as(JavaObject.self)) {
        return MessageLevelCases.ERROR
  } else if self.equals(classObj.DEBUG?.as(JavaObject.self)) {
        return MessageLevelCases.DEBUG
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: MessageLevelCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<MessageLevel>(environment: _environment)
    switch enumValue {
      case .TIP:
        if let TIP = classObj.TIP {
          self.init(javaHolder: TIP.javaHolder)
        } else {
          fatalError("Enum value TIP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LOG:
        if let LOG = classObj.LOG {
          self.init(javaHolder: LOG.javaHolder)
        } else {
          fatalError("Enum value LOG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WARNING:
        if let WARNING = classObj.WARNING {
          self.init(javaHolder: WARNING.javaHolder)
        } else {
          fatalError("Enum value WARNING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ERROR:
        if let ERROR = classObj.ERROR {
          self.init(javaHolder: ERROR.javaHolder)
        } else {
          fatalError("Enum value ERROR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DEBUG:
        if let DEBUG = classObj.DEBUG {
          self.init(javaHolder: DEBUG.javaHolder)
        } else {
          fatalError("Enum value DEBUG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<ConsoleMessage.MessageLevel> {
  @JavaStaticField(isFinal: true)
  public var TIP: ConsoleMessage.MessageLevel!

  @JavaStaticField(isFinal: true)
  public var LOG: ConsoleMessage.MessageLevel!

  @JavaStaticField(isFinal: true)
  public var WARNING: ConsoleMessage.MessageLevel!

  @JavaStaticField(isFinal: true)
  public var ERROR: ConsoleMessage.MessageLevel!

  @JavaStaticField(isFinal: true)
  public var DEBUG: ConsoleMessage.MessageLevel!

  @JavaStaticMethod
  public func values() -> [ConsoleMessage.MessageLevel?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ConsoleMessage.MessageLevel!
}
