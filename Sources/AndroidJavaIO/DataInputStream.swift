// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.io.DataInputStream", implements: DataInput.self)
open class DataInputStream: FilterInputStream {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: InputStream?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func readLine() throws -> String

  @JavaMethod
  open func readInt() throws -> Int32

  @JavaMethod
  open override func read(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws -> Int32

  @JavaMethod
  open override func read(_ arg0: [Int8]) throws -> Int32

  @JavaMethod
  open func readUTF() throws -> String

  @JavaMethod
  open func readLong() throws -> Int64

  @JavaMethod
  open func readByte() throws -> Int8

  @JavaMethod
  open func readShort() throws -> Int16

  @JavaMethod
  open func readUnsignedShort() throws -> Int32

  @JavaMethod
  open func readChar() throws -> UInt16

  @JavaMethod
  open func readFloat() throws -> Float

  @JavaMethod
  open func readDouble() throws -> Double

  @JavaMethod
  open func readFully(_ arg0: [Int8]) throws

  @JavaMethod
  open func readFully(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) throws

  @JavaMethod
  open func skipBytes(_ arg0: Int32) throws -> Int32

  @JavaMethod
  open func readBoolean() throws -> Bool

  @JavaMethod
  open func readUnsignedByte() throws -> Int32
}
extension JavaClass<DataInputStream> {
  @JavaStaticMethod
  public func readUTF(_ arg0: DataInput?) throws -> String
}
