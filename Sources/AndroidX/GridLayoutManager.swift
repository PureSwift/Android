// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidGraphics
import AndroidUtil
import AndroidView
import JavaKit
import JavaRuntime

@JavaClass("androidx.recyclerview.widget.GridLayoutManager")
open class GridLayoutManager: LinearLayoutManager {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: AttributeSet?, _ arg2: Int32, _ arg3: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setSpanSizeLookup(_ arg0: GridLayoutManager.SpanSizeLookup?)

  @JavaMethod
  open func getSpanSizeLookup() -> GridLayoutManager.SpanSizeLookup!

  @JavaMethod
  open func setUsingSpansToEstimateScrollbarDimensions(_ arg0: Bool)

  @JavaMethod
  open func isUsingSpansToEstimateScrollbarDimensions() -> Bool

  @JavaMethod
  open func setSpanCount(_ arg0: Int32)

  @JavaMethod
  open override func setMeasuredDimension(_ arg0: Rect?, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open override func onLayoutChildren(_ arg0: RecyclerView.Recycler?, _ arg1: RecyclerView.State?)

  @JavaMethod
  open override func onLayoutCompleted(_ arg0: RecyclerView.State?)

  @JavaMethod
  open func getSpanCount() -> Int32

  @JavaMethod
  open override func supportsPredictiveItemAnimations() -> Bool

  @JavaMethod
  open override func computeHorizontalScrollOffset(_ arg0: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func computeVerticalScrollOffset(_ arg0: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func computeHorizontalScrollRange(_ arg0: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func computeVerticalScrollRange(_ arg0: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func getRowCountForAccessibility(_ arg0: RecyclerView.Recycler?, _ arg1: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func getColumnCountForAccessibility(_ arg0: RecyclerView.Recycler?, _ arg1: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func onItemsRemoved(_ arg0: RecyclerView?, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open override func onItemsAdded(_ arg0: RecyclerView?, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open override func onItemsChanged(_ arg0: RecyclerView?)

  @JavaMethod
  open override func onItemsMoved(_ arg0: RecyclerView?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open override func onItemsUpdated(_ arg0: RecyclerView?, _ arg1: Int32, _ arg2: Int32, _ arg3: JavaObject?)

  @JavaMethod
  open override func scrollHorizontallyBy(_ arg0: Int32, _ arg1: RecyclerView.Recycler?, _ arg2: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func scrollVerticallyBy(_ arg0: Int32, _ arg1: RecyclerView.Recycler?, _ arg2: RecyclerView.State?) -> Int32

  @JavaMethod
  open override func generateDefaultLayoutParams() -> RecyclerView.LayoutParams!

  @JavaMethod
  open override func generateLayoutParams(_ arg0: ViewGroup.LayoutParams?) -> RecyclerView.LayoutParams!

  @JavaMethod
  open override func generateLayoutParams(_ arg0: Context?, _ arg1: AttributeSet?) -> RecyclerView.LayoutParams!

  @JavaMethod
  open override func checkLayoutParams(_ arg0: RecyclerView.LayoutParams?) -> Bool

  @JavaMethod
  open override func onFocusSearchFailed(_ arg0: View?, _ arg1: Int32, _ arg2: RecyclerView.Recycler?, _ arg3: RecyclerView.State?) -> View!

  @JavaMethod
  open override func setStackFromEnd(_ arg0: Bool)
}
extension JavaClass<GridLayoutManager> {
  @JavaStaticField(isFinal: true)
  public var DEFAULT_SPAN_COUNT: Int32

  @JavaStaticField(isFinal: true)
  public var HORIZONTAL: Int32

  @JavaStaticField(isFinal: true)
  public var VERTICAL: Int32

  @JavaStaticField(isFinal: true)
  public var INVALID_OFFSET: Int32
}
