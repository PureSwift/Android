// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

extension Lifecycle {
  @JavaClass("androidx.lifecycle.Lifecycle$Event")
  open class Event: Enum {
    public enum EventCases: Equatable {
      case ON_CREATE
  case ON_START
  case ON_RESUME
  case ON_PAUSE
  case ON_STOP
  case ON_DESTROY
  case ON_ANY
    }

    public var enumValue: EventCases! {
      let classObj = self.javaClass
      if self.equals(classObj.ON_CREATE?.as(JavaObject.self)) {
        return EventCases.ON_CREATE
  } else if self.equals(classObj.ON_START?.as(JavaObject.self)) {
        return EventCases.ON_START
  } else if self.equals(classObj.ON_RESUME?.as(JavaObject.self)) {
        return EventCases.ON_RESUME
  } else if self.equals(classObj.ON_PAUSE?.as(JavaObject.self)) {
        return EventCases.ON_PAUSE
  } else if self.equals(classObj.ON_STOP?.as(JavaObject.self)) {
        return EventCases.ON_STOP
  } else if self.equals(classObj.ON_DESTROY?.as(JavaObject.self)) {
        return EventCases.ON_DESTROY
  } else if self.equals(classObj.ON_ANY?.as(JavaObject.self)) {
        return EventCases.ON_ANY
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: EventCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Event>(environment: _environment)
    switch enumValue {
      case .ON_CREATE:
        if let ON_CREATE = classObj.ON_CREATE {
          self.init(javaHolder: ON_CREATE.javaHolder)
        } else {
          fatalError("Enum value ON_CREATE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_START:
        if let ON_START = classObj.ON_START {
          self.init(javaHolder: ON_START.javaHolder)
        } else {
          fatalError("Enum value ON_START was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_RESUME:
        if let ON_RESUME = classObj.ON_RESUME {
          self.init(javaHolder: ON_RESUME.javaHolder)
        } else {
          fatalError("Enum value ON_RESUME was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_PAUSE:
        if let ON_PAUSE = classObj.ON_PAUSE {
          self.init(javaHolder: ON_PAUSE.javaHolder)
        } else {
          fatalError("Enum value ON_PAUSE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_STOP:
        if let ON_STOP = classObj.ON_STOP {
          self.init(javaHolder: ON_STOP.javaHolder)
        } else {
          fatalError("Enum value ON_STOP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_DESTROY:
        if let ON_DESTROY = classObj.ON_DESTROY {
          self.init(javaHolder: ON_DESTROY.javaHolder)
        } else {
          fatalError("Enum value ON_DESTROY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ON_ANY:
        if let ON_ANY = classObj.ON_ANY {
          self.init(javaHolder: ON_ANY.javaHolder)
        } else {
          fatalError("Enum value ON_ANY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getTargetState() -> Lifecycle.State!
  }
}
extension Lifecycle.Event {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<Lifecycle.Event> {
  @JavaStaticField(isFinal: true)
  public var ON_CREATE: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_START: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_RESUME: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_PAUSE: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_STOP: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_DESTROY: Lifecycle.Event!

  @JavaStaticField(isFinal: true)
  public var ON_ANY: Lifecycle.Event!

  @JavaStaticMethod
  public func downFrom(_ arg0: Lifecycle.State?) -> Lifecycle.Event!

  @JavaStaticMethod
  public func downTo(_ arg0: Lifecycle.State?) -> Lifecycle.Event!

  @JavaStaticMethod
  public func upFrom(_ arg0: Lifecycle.State?) -> Lifecycle.Event!

  @JavaStaticMethod
  public func upTo(_ arg0: Lifecycle.State?) -> Lifecycle.Event!

  @JavaStaticMethod
  public func values() -> [Lifecycle.Event?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Lifecycle.Event!
}
