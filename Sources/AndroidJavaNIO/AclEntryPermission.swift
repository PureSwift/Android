// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.attribute.AclEntryPermission")
open class AclEntryPermission: Enum {
  public enum AclEntryPermissionCases: Equatable {
    case READ_DATA
    case WRITE_DATA
    case APPEND_DATA
    case READ_NAMED_ATTRS
    case WRITE_NAMED_ATTRS
    case EXECUTE
    case DELETE_CHILD
    case READ_ATTRIBUTES
    case WRITE_ATTRIBUTES
    case DELETE
    case READ_ACL
    case WRITE_ACL
    case WRITE_OWNER
    case SYNCHRONIZE
  }

  public var enumValue: AclEntryPermissionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.READ_DATA?.as(JavaObject.self)) {
      return AclEntryPermissionCases.READ_DATA
    } else if self.equals(classObj.WRITE_DATA?.as(JavaObject.self)) {
      return AclEntryPermissionCases.WRITE_DATA
    } else if self.equals(classObj.APPEND_DATA?.as(JavaObject.self)) {
      return AclEntryPermissionCases.APPEND_DATA
    } else if self.equals(classObj.READ_NAMED_ATTRS?.as(JavaObject.self)) {
      return AclEntryPermissionCases.READ_NAMED_ATTRS
    } else if self.equals(classObj.WRITE_NAMED_ATTRS?.as(JavaObject.self)) {
      return AclEntryPermissionCases.WRITE_NAMED_ATTRS
    } else if self.equals(classObj.EXECUTE?.as(JavaObject.self)) {
      return AclEntryPermissionCases.EXECUTE
    } else if self.equals(classObj.DELETE_CHILD?.as(JavaObject.self)) {
      return AclEntryPermissionCases.DELETE_CHILD
    } else if self.equals(classObj.READ_ATTRIBUTES?.as(JavaObject.self)) {
      return AclEntryPermissionCases.READ_ATTRIBUTES
    } else if self.equals(classObj.WRITE_ATTRIBUTES?.as(JavaObject.self)) {
      return AclEntryPermissionCases.WRITE_ATTRIBUTES
    } else if self.equals(classObj.DELETE?.as(JavaObject.self)) {
      return AclEntryPermissionCases.DELETE
    } else if self.equals(classObj.READ_ACL?.as(JavaObject.self)) {
      return AclEntryPermissionCases.READ_ACL
    } else if self.equals(classObj.WRITE_ACL?.as(JavaObject.self)) {
      return AclEntryPermissionCases.WRITE_ACL
    } else if self.equals(classObj.WRITE_OWNER?.as(JavaObject.self)) {
      return AclEntryPermissionCases.WRITE_OWNER
    } else if self.equals(classObj.SYNCHRONIZE?.as(JavaObject.self)) {
      return AclEntryPermissionCases.SYNCHRONIZE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: AclEntryPermissionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<AclEntryPermission>(environment: _environment)
    switch enumValue {
      case .READ_DATA:
        if let READ_DATA = classObj.READ_DATA {
          self.init(javaHolder: READ_DATA.javaHolder)
        } else {
          fatalError("Enum value READ_DATA was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE_DATA:
        if let WRITE_DATA = classObj.WRITE_DATA {
          self.init(javaHolder: WRITE_DATA.javaHolder)
        } else {
          fatalError("Enum value WRITE_DATA was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .APPEND_DATA:
        if let APPEND_DATA = classObj.APPEND_DATA {
          self.init(javaHolder: APPEND_DATA.javaHolder)
        } else {
          fatalError("Enum value APPEND_DATA was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .READ_NAMED_ATTRS:
        if let READ_NAMED_ATTRS = classObj.READ_NAMED_ATTRS {
          self.init(javaHolder: READ_NAMED_ATTRS.javaHolder)
        } else {
          fatalError("Enum value READ_NAMED_ATTRS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE_NAMED_ATTRS:
        if let WRITE_NAMED_ATTRS = classObj.WRITE_NAMED_ATTRS {
          self.init(javaHolder: WRITE_NAMED_ATTRS.javaHolder)
        } else {
          fatalError("Enum value WRITE_NAMED_ATTRS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXECUTE:
        if let EXECUTE = classObj.EXECUTE {
          self.init(javaHolder: EXECUTE.javaHolder)
        } else {
          fatalError("Enum value EXECUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DELETE_CHILD:
        if let DELETE_CHILD = classObj.DELETE_CHILD {
          self.init(javaHolder: DELETE_CHILD.javaHolder)
        } else {
          fatalError("Enum value DELETE_CHILD was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .READ_ATTRIBUTES:
        if let READ_ATTRIBUTES = classObj.READ_ATTRIBUTES {
          self.init(javaHolder: READ_ATTRIBUTES.javaHolder)
        } else {
          fatalError("Enum value READ_ATTRIBUTES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE_ATTRIBUTES:
        if let WRITE_ATTRIBUTES = classObj.WRITE_ATTRIBUTES {
          self.init(javaHolder: WRITE_ATTRIBUTES.javaHolder)
        } else {
          fatalError("Enum value WRITE_ATTRIBUTES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DELETE:
        if let DELETE = classObj.DELETE {
          self.init(javaHolder: DELETE.javaHolder)
        } else {
          fatalError("Enum value DELETE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .READ_ACL:
        if let READ_ACL = classObj.READ_ACL {
          self.init(javaHolder: READ_ACL.javaHolder)
        } else {
          fatalError("Enum value READ_ACL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE_ACL:
        if let WRITE_ACL = classObj.WRITE_ACL {
          self.init(javaHolder: WRITE_ACL.javaHolder)
        } else {
          fatalError("Enum value WRITE_ACL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE_OWNER:
        if let WRITE_OWNER = classObj.WRITE_OWNER {
          self.init(javaHolder: WRITE_OWNER.javaHolder)
        } else {
          fatalError("Enum value WRITE_OWNER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SYNCHRONIZE:
        if let SYNCHRONIZE = classObj.SYNCHRONIZE {
          self.init(javaHolder: SYNCHRONIZE.javaHolder)
        } else {
          fatalError("Enum value SYNCHRONIZE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AclEntryPermission> {
  @JavaStaticField(isFinal: true)
  public var READ_DATA: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var WRITE_DATA: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var APPEND_DATA: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var READ_NAMED_ATTRS: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var WRITE_NAMED_ATTRS: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var EXECUTE: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var DELETE_CHILD: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var READ_ATTRIBUTES: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var WRITE_ATTRIBUTES: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var DELETE: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var READ_ACL: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var WRITE_ACL: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var WRITE_OWNER: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var SYNCHRONIZE: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var LIST_DIRECTORY: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var ADD_FILE: AclEntryPermission!

  @JavaStaticField(isFinal: true)
  public var ADD_SUBDIRECTORY: AclEntryPermission!

  @JavaStaticMethod
  public func values() -> [AclEntryPermission?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> AclEntryPermission!
}
