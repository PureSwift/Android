// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.FileVisitOption")
open class FileVisitOption: Enum {
  public enum FileVisitOptionCases: Equatable {
    case FOLLOW_LINKS
  }

  public var enumValue: FileVisitOptionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.FOLLOW_LINKS?.as(JavaObject.self)) {
      return FileVisitOptionCases.FOLLOW_LINKS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: FileVisitOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<FileVisitOption>(environment: _environment)
    switch enumValue {
      case .FOLLOW_LINKS:
        if let FOLLOW_LINKS = classObj.FOLLOW_LINKS {
          self.init(javaHolder: FOLLOW_LINKS.javaHolder)
        } else {
          fatalError("Enum value FOLLOW_LINKS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<FileVisitOption> {
  @JavaStaticField(isFinal: true)
  public var FOLLOW_LINKS: FileVisitOption!

  @JavaStaticMethod
  public func values() -> [FileVisitOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> FileVisitOption!
}
