// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.StandardOpenOption", implements: OpenOption.self)
open class StandardOpenOption: Enum {
  public enum StandardOpenOptionCases: Equatable {
    case READ
    case WRITE
    case APPEND
    case TRUNCATE_EXISTING
    case CREATE
    case CREATE_NEW
    case DELETE_ON_CLOSE
    case SPARSE
    case SYNC
    case DSYNC
  }

  public var enumValue: StandardOpenOptionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.READ?.as(JavaObject.self)) {
      return StandardOpenOptionCases.READ
    } else if self.equals(classObj.WRITE?.as(JavaObject.self)) {
      return StandardOpenOptionCases.WRITE
    } else if self.equals(classObj.APPEND?.as(JavaObject.self)) {
      return StandardOpenOptionCases.APPEND
    } else if self.equals(classObj.TRUNCATE_EXISTING?.as(JavaObject.self)) {
      return StandardOpenOptionCases.TRUNCATE_EXISTING
    } else if self.equals(classObj.CREATE?.as(JavaObject.self)) {
      return StandardOpenOptionCases.CREATE
    } else if self.equals(classObj.CREATE_NEW?.as(JavaObject.self)) {
      return StandardOpenOptionCases.CREATE_NEW
    } else if self.equals(classObj.DELETE_ON_CLOSE?.as(JavaObject.self)) {
      return StandardOpenOptionCases.DELETE_ON_CLOSE
    } else if self.equals(classObj.SPARSE?.as(JavaObject.self)) {
      return StandardOpenOptionCases.SPARSE
    } else if self.equals(classObj.SYNC?.as(JavaObject.self)) {
      return StandardOpenOptionCases.SYNC
    } else if self.equals(classObj.DSYNC?.as(JavaObject.self)) {
      return StandardOpenOptionCases.DSYNC
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: StandardOpenOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<StandardOpenOption>(environment: _environment)
    switch enumValue {
      case .READ:
        if let READ = classObj.READ {
          self.init(javaHolder: READ.javaHolder)
        } else {
          fatalError("Enum value READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE:
        if let WRITE = classObj.WRITE {
          self.init(javaHolder: WRITE.javaHolder)
        } else {
          fatalError("Enum value WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .APPEND:
        if let APPEND = classObj.APPEND {
          self.init(javaHolder: APPEND.javaHolder)
        } else {
          fatalError("Enum value APPEND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TRUNCATE_EXISTING:
        if let TRUNCATE_EXISTING = classObj.TRUNCATE_EXISTING {
          self.init(javaHolder: TRUNCATE_EXISTING.javaHolder)
        } else {
          fatalError("Enum value TRUNCATE_EXISTING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CREATE:
        if let CREATE = classObj.CREATE {
          self.init(javaHolder: CREATE.javaHolder)
        } else {
          fatalError("Enum value CREATE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CREATE_NEW:
        if let CREATE_NEW = classObj.CREATE_NEW {
          self.init(javaHolder: CREATE_NEW.javaHolder)
        } else {
          fatalError("Enum value CREATE_NEW was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DELETE_ON_CLOSE:
        if let DELETE_ON_CLOSE = classObj.DELETE_ON_CLOSE {
          self.init(javaHolder: DELETE_ON_CLOSE.javaHolder)
        } else {
          fatalError("Enum value DELETE_ON_CLOSE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SPARSE:
        if let SPARSE = classObj.SPARSE {
          self.init(javaHolder: SPARSE.javaHolder)
        } else {
          fatalError("Enum value SPARSE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SYNC:
        if let SYNC = classObj.SYNC {
          self.init(javaHolder: SYNC.javaHolder)
        } else {
          fatalError("Enum value SYNC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DSYNC:
        if let DSYNC = classObj.DSYNC {
          self.init(javaHolder: DSYNC.javaHolder)
        } else {
          fatalError("Enum value DSYNC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<StandardOpenOption> {
  @JavaStaticField(isFinal: true)
  public var READ: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var WRITE: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var APPEND: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var TRUNCATE_EXISTING: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var CREATE: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var CREATE_NEW: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var DELETE_ON_CLOSE: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var SPARSE: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var SYNC: StandardOpenOption!

  @JavaStaticField(isFinal: true)
  public var DSYNC: StandardOpenOption!

  @JavaStaticMethod
  public func values() -> [StandardOpenOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> StandardOpenOption!
}
