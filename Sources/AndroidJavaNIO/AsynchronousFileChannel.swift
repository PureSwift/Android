// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.nio.channels.AsynchronousFileChannel", implements: AsynchronousChannel.self)
open class AsynchronousFileChannel: JavaObject {
  @JavaMethod
  open func size() throws -> Int64

  @JavaMethod
  open func lock(_ arg0: Int64, _ arg1: Int64, _ arg2: Bool, _ arg3: JavaObject?, _ arg4: CompletionHandler<FileLock, JavaObject>?)

  @JavaMethod
  open func lock(_ arg0: JavaObject?, _ arg1: CompletionHandler<FileLock, JavaObject>?)

  @JavaMethod
  open func write(_ arg0: ByteBuffer?, _ arg1: Int64, _ arg2: JavaObject?, _ arg3: CompletionHandler<JavaInteger, JavaObject>?)

  @JavaMethod
  open func read(_ arg0: ByteBuffer?, _ arg1: Int64, _ arg2: JavaObject?, _ arg3: CompletionHandler<JavaInteger, JavaObject>?)

  @JavaMethod
  open func tryLock() throws -> FileLock!

  @JavaMethod
  open func tryLock(_ arg0: Int64, _ arg1: Int64, _ arg2: Bool) throws -> FileLock!

  @JavaMethod
  open func force(_ arg0: Bool) throws

  @JavaMethod
  open func truncate(_ arg0: Int64) throws -> AsynchronousFileChannel!
}
extension JavaClass<AsynchronousFileChannel> {
  @JavaStaticMethod
  public func open(_ arg0: Path?, _ arg1: [OpenOption?]) throws -> AsynchronousFileChannel!
}
