// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.nio.charset.CharsetEncoder")
open class CharsetEncoder: JavaObject {
  @JavaMethod
  open func reset() -> CharsetEncoder!

  @JavaMethod
  open func onMalformedInput(_ arg0: CodingErrorAction?) -> CharsetEncoder!

  @JavaMethod
  open func onUnmappableCharacter(_ arg0: CodingErrorAction?) -> CharsetEncoder!

  @JavaMethod
  open func maxBytesPerChar() -> Float

  @JavaMethod
  open func encode(_ arg0: CharBuffer?, _ arg1: ByteBuffer?, _ arg2: Bool) -> CoderResult!

  @JavaMethod
  open func encode(_ arg0: CharBuffer?) throws -> ByteBuffer!

  @JavaMethod
  open func flush(_ arg0: ByteBuffer?) -> CoderResult!

  @JavaMethod
  open func canEncode(_ arg0: CharSequence?) -> Bool

  @JavaMethod
  open func canEncode(_ arg0: UInt16) -> Bool

  @JavaMethod
  open func charset() -> Charset!

  @JavaMethod
  open func replacement() -> [Int8]

  @JavaMethod
  open func implFlush(_ arg0: ByteBuffer?) -> CoderResult!

  @JavaMethod
  open func isLegalReplacement(_ arg0: [Int8]) -> Bool

  @JavaMethod
  open func encodeLoop(_ arg0: CharBuffer?, _ arg1: ByteBuffer?) -> CoderResult!

  @JavaMethod
  open func malformedInputAction() -> CodingErrorAction!

  @JavaMethod
  open func unmappableCharacterAction() -> CodingErrorAction!

  @JavaMethod
  open func averageBytesPerChar() -> Float

  @JavaMethod
  open func replaceWith(_ arg0: [Int8]) -> CharsetEncoder!

  @JavaMethod
  open func implReplaceWith(_ arg0: [Int8])

  @JavaMethod
  open func implOnMalformedInput(_ arg0: CodingErrorAction?)

  @JavaMethod
  open func implOnUnmappableCharacter(_ arg0: CodingErrorAction?)

  @JavaMethod
  open func implReset()
}
