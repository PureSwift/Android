// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.AccessMode")
open class AccessMode: Enum {
  public enum AccessModeCases: Equatable {
    case READ
    case WRITE
    case EXECUTE
  }

  public var enumValue: AccessModeCases! {
    let classObj = self.javaClass
    if self.equals(classObj.READ?.as(JavaObject.self)) {
      return AccessModeCases.READ
    } else if self.equals(classObj.WRITE?.as(JavaObject.self)) {
      return AccessModeCases.WRITE
    } else if self.equals(classObj.EXECUTE?.as(JavaObject.self)) {
      return AccessModeCases.EXECUTE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: AccessModeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<AccessMode>(environment: _environment)
    switch enumValue {
      case .READ:
        if let READ = classObj.READ {
          self.init(javaHolder: READ.javaHolder)
        } else {
          fatalError("Enum value READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE:
        if let WRITE = classObj.WRITE {
          self.init(javaHolder: WRITE.javaHolder)
        } else {
          fatalError("Enum value WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXECUTE:
        if let EXECUTE = classObj.EXECUTE {
          self.init(javaHolder: EXECUTE.javaHolder)
        } else {
          fatalError("Enum value EXECUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<AccessMode> {
  @JavaStaticField(isFinal: true)
  public var READ: AccessMode!

  @JavaStaticField(isFinal: true)
  public var WRITE: AccessMode!

  @JavaStaticField(isFinal: true)
  public var EXECUTE: AccessMode!

  @JavaStaticMethod
  public func values() -> [AccessMode?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> AccessMode!
}
