// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.attribute.PosixFilePermission")
open class PosixFilePermission: Enum {
  public enum PosixFilePermissionCases: Equatable {
    case OWNER_READ
    case OWNER_WRITE
    case OWNER_EXECUTE
    case GROUP_READ
    case GROUP_WRITE
    case GROUP_EXECUTE
    case OTHERS_READ
    case OTHERS_WRITE
    case OTHERS_EXECUTE
  }

  public var enumValue: PosixFilePermissionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.OWNER_READ?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OWNER_READ
    } else if self.equals(classObj.OWNER_WRITE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OWNER_WRITE
    } else if self.equals(classObj.OWNER_EXECUTE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OWNER_EXECUTE
    } else if self.equals(classObj.GROUP_READ?.as(JavaObject.self)) {
      return PosixFilePermissionCases.GROUP_READ
    } else if self.equals(classObj.GROUP_WRITE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.GROUP_WRITE
    } else if self.equals(classObj.GROUP_EXECUTE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.GROUP_EXECUTE
    } else if self.equals(classObj.OTHERS_READ?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OTHERS_READ
    } else if self.equals(classObj.OTHERS_WRITE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OTHERS_WRITE
    } else if self.equals(classObj.OTHERS_EXECUTE?.as(JavaObject.self)) {
      return PosixFilePermissionCases.OTHERS_EXECUTE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: PosixFilePermissionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<PosixFilePermission>(environment: _environment)
    switch enumValue {
      case .OWNER_READ:
        if let OWNER_READ = classObj.OWNER_READ {
          self.init(javaHolder: OWNER_READ.javaHolder)
        } else {
          fatalError("Enum value OWNER_READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OWNER_WRITE:
        if let OWNER_WRITE = classObj.OWNER_WRITE {
          self.init(javaHolder: OWNER_WRITE.javaHolder)
        } else {
          fatalError("Enum value OWNER_WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OWNER_EXECUTE:
        if let OWNER_EXECUTE = classObj.OWNER_EXECUTE {
          self.init(javaHolder: OWNER_EXECUTE.javaHolder)
        } else {
          fatalError("Enum value OWNER_EXECUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .GROUP_READ:
        if let GROUP_READ = classObj.GROUP_READ {
          self.init(javaHolder: GROUP_READ.javaHolder)
        } else {
          fatalError("Enum value GROUP_READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .GROUP_WRITE:
        if let GROUP_WRITE = classObj.GROUP_WRITE {
          self.init(javaHolder: GROUP_WRITE.javaHolder)
        } else {
          fatalError("Enum value GROUP_WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .GROUP_EXECUTE:
        if let GROUP_EXECUTE = classObj.GROUP_EXECUTE {
          self.init(javaHolder: GROUP_EXECUTE.javaHolder)
        } else {
          fatalError("Enum value GROUP_EXECUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHERS_READ:
        if let OTHERS_READ = classObj.OTHERS_READ {
          self.init(javaHolder: OTHERS_READ.javaHolder)
        } else {
          fatalError("Enum value OTHERS_READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHERS_WRITE:
        if let OTHERS_WRITE = classObj.OTHERS_WRITE {
          self.init(javaHolder: OTHERS_WRITE.javaHolder)
        } else {
          fatalError("Enum value OTHERS_WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OTHERS_EXECUTE:
        if let OTHERS_EXECUTE = classObj.OTHERS_EXECUTE {
          self.init(javaHolder: OTHERS_EXECUTE.javaHolder)
        } else {
          fatalError("Enum value OTHERS_EXECUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<PosixFilePermission> {
  @JavaStaticField(isFinal: true)
  public var OWNER_READ: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var OWNER_WRITE: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var OWNER_EXECUTE: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var GROUP_READ: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var GROUP_WRITE: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var GROUP_EXECUTE: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var OTHERS_READ: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var OTHERS_WRITE: PosixFilePermission!

  @JavaStaticField(isFinal: true)
  public var OTHERS_EXECUTE: PosixFilePermission!

  @JavaStaticMethod
  public func values() -> [PosixFilePermission?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> PosixFilePermission!
}
