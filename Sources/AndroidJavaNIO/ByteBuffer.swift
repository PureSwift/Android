// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.ByteBuffer", implements: Comparable.self)
open class ByteBuffer: Buffer {
  @JavaMethod
  open override func reset() -> ByteBuffer!

  @JavaMethod
  open func get(_ arg0: [Int8]) -> ByteBuffer!

  @JavaMethod
  open func get(_ arg0: Int32) -> Int8

  @JavaMethod
  open func get() -> Int8

  @JavaMethod
  open func get(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> ByteBuffer!

  @JavaMethod
  open func get(_ arg0: Int32, _ arg1: [Int8]) -> ByteBuffer!

  @JavaMethod
  open func get(_ arg0: Int32, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: Int8) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: ByteBuffer?) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: ByteBuffer?, _ arg2: Int32, _ arg3: Int32) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: [Int8]) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: [Int8]) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> ByteBuffer!

  @JavaMethod
  open func put(_ arg0: Int8) -> ByteBuffer!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: ByteBuffer?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func getShort() -> Int16

  @JavaMethod
  open func getShort(_ arg0: Int32) -> Int16

  @JavaMethod
  open func putShort(_ arg0: Int32, _ arg1: Int16) -> ByteBuffer!

  @JavaMethod
  open func putShort(_ arg0: Int16) -> ByteBuffer!

  @JavaMethod
  open func getChar(_ arg0: Int32) -> UInt16

  @JavaMethod
  open func getChar() -> UInt16

  @JavaMethod
  open func putChar(_ arg0: Int32, _ arg1: UInt16) -> ByteBuffer!

  @JavaMethod
  open func putChar(_ arg0: UInt16) -> ByteBuffer!

  @JavaMethod
  open func getInt(_ arg0: Int32) -> Int32

  @JavaMethod
  open func getInt() -> Int32

  @JavaMethod
  open func putInt(_ arg0: Int32, _ arg1: Int32) -> ByteBuffer!

  @JavaMethod
  open func putInt(_ arg0: Int32) -> ByteBuffer!

  @JavaMethod
  open func getLong(_ arg0: Int32) -> Int64

  @JavaMethod
  open func getLong() -> Int64

  @JavaMethod
  open func putLong(_ arg0: Int64) -> ByteBuffer!

  @JavaMethod
  open func putLong(_ arg0: Int32, _ arg1: Int64) -> ByteBuffer!

  @JavaMethod
  open func getFloat() -> Float

  @JavaMethod
  open func getFloat(_ arg0: Int32) -> Float

  @JavaMethod
  open func putFloat(_ arg0: Float) -> ByteBuffer!

  @JavaMethod
  open func putFloat(_ arg0: Int32, _ arg1: Float) -> ByteBuffer!

  @JavaMethod
  open func getDouble(_ arg0: Int32) -> Double

  @JavaMethod
  open func getDouble() -> Double

  @JavaMethod
  open func putDouble(_ arg0: Int32, _ arg1: Double) -> ByteBuffer!

  @JavaMethod
  open func putDouble(_ arg0: Double) -> ByteBuffer!

  @JavaMethod
  open override func clear() -> ByteBuffer!

  @JavaMethod
  open override func position(_ arg0: Int32) -> ByteBuffer!

  @JavaMethod
  open func mismatch(_ arg0: ByteBuffer?) -> Int32

  @JavaMethod
  open override func limit(_ arg0: Int32) -> ByteBuffer!

  @JavaMethod
  open override func isDirect() -> Bool

  @JavaMethod
  open override func hasArray() -> Bool

  @JavaMethod
  open func array() -> [Int8]

  @JavaMethod
  open override func arrayOffset() -> Int32

  @JavaMethod
  open override func mark() -> ByteBuffer!

  @JavaMethod
  open override func flip() -> ByteBuffer!

  @JavaMethod
  open override func rewind() -> ByteBuffer!

  @JavaMethod
  open override func slice() -> ByteBuffer!

  @JavaMethod
  open override func slice(_ arg0: Int32, _ arg1: Int32) -> ByteBuffer!

  @JavaMethod
  open override func duplicate() -> ByteBuffer!

  @JavaMethod
  open func alignmentOffset(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open func asReadOnlyBuffer() -> ByteBuffer!

  @JavaMethod
  open func compact() -> ByteBuffer!

  @JavaMethod
  open func order(_ arg0: ByteOrder?) -> ByteBuffer!

  @JavaMethod
  open func order() -> ByteOrder!

  @JavaMethod
  open func alignedSlice(_ arg0: Int32) -> ByteBuffer!

  @JavaMethod
  open func asCharBuffer() -> CharBuffer!

  @JavaMethod
  open func asShortBuffer() -> ShortBuffer!

  @JavaMethod
  open func asIntBuffer() -> IntBuffer!

  @JavaMethod
  open func asLongBuffer() -> LongBuffer!

  @JavaMethod
  open func asFloatBuffer() -> FloatBuffer!

  @JavaMethod
  open func asDoubleBuffer() -> DoubleBuffer!
}
extension JavaClass<ByteBuffer> {
  @JavaStaticMethod
  public func wrap(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> ByteBuffer!

  @JavaStaticMethod
  public func wrap(_ arg0: [Int8]) -> ByteBuffer!

  @JavaStaticMethod
  public func allocate(_ arg0: Int32) -> ByteBuffer!

  @JavaStaticMethod
  public func allocateDirect(_ arg0: Int32) -> ByteBuffer!
}
