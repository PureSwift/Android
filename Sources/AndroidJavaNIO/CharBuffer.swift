// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.CharBuffer", implements: Comparable.self, Appendable.self, CharSequence.self, Readable.self)
open class CharBuffer: Buffer {
  @JavaMethod
  open override func reset() -> CharBuffer!

  @JavaMethod
  open func get(_ arg0: Int32) -> UInt16

  @JavaMethod
  open func get(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaMethod
  open func get() -> UInt16

  @JavaMethod
  open func get(_ arg0: [UInt16]) -> CharBuffer!

  @JavaMethod
  open func get(_ arg0: Int32, _ arg1: [UInt16], _ arg2: Int32, _ arg3: Int32) -> CharBuffer!

  @JavaMethod
  open func get(_ arg0: Int32, _ arg1: [UInt16]) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: UInt16) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: [UInt16]) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: CharBuffer?) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: [UInt16], _ arg2: Int32, _ arg3: Int32) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: [UInt16]) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: Int32, _ arg1: CharBuffer?, _ arg2: Int32, _ arg3: Int32) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: UInt16) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: String) -> CharBuffer!

  @JavaMethod
  open func put(_ arg0: String, _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func length() -> Int32

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func append(_ arg0: UInt16) throws -> Appendable!

  @JavaMethod
  open func append(_ arg0: CharSequence?) -> CharBuffer!

  @JavaMethod
  open func append(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaMethod
  open func append(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) throws -> Appendable!

  @JavaMethod
  open func append(_ arg0: UInt16) -> CharBuffer!

  @JavaMethod
  open func append(_ arg0: CharSequence?) throws -> Appendable!

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: CharBuffer?) -> Int32

  @JavaMethod
  open override func clear() -> CharBuffer!

  @JavaMethod
  open override func position(_ arg0: Int32) -> CharBuffer!

  @JavaMethod
  open func charAt(_ arg0: Int32) -> UInt16

  @JavaMethod
  open func mismatch(_ arg0: CharBuffer?) -> Int32

  @JavaMethod
  open func isEmpty() -> Bool

  @JavaMethod
  open func subSequence(_ arg0: Int32, _ arg1: Int32) -> CharBuffer!

  @JavaMethod
  open func subSequence(_ arg0: Int32, _ arg1: Int32) -> CharSequence!

  @JavaMethod
  open override func limit(_ arg0: Int32) -> CharBuffer!

  @JavaMethod
  open override func isDirect() -> Bool

  @JavaMethod
  open override func hasArray() -> Bool

  @JavaMethod
  open func array() -> [UInt16]

  @JavaMethod
  open override func arrayOffset() -> Int32

  @JavaMethod
  open override func mark() -> CharBuffer!

  @JavaMethod
  open func read(_ arg0: CharBuffer?) throws -> Int32

  @JavaMethod
  open override func flip() -> CharBuffer!

  @JavaMethod
  open override func rewind() -> CharBuffer!

  @JavaMethod
  open override func slice() -> CharBuffer!

  @JavaMethod
  open override func slice(_ arg0: Int32, _ arg1: Int32) -> CharBuffer!

  @JavaMethod
  open override func duplicate() -> CharBuffer!

  @JavaMethod
  open func asReadOnlyBuffer() -> CharBuffer!

  @JavaMethod
  open func compact() -> CharBuffer!

  @JavaMethod
  open func order() -> ByteOrder!
}
extension JavaClass<CharBuffer> {
  @JavaStaticMethod
  public func wrap(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaStaticMethod
  public func wrap(_ arg0: CharSequence?) -> CharBuffer!

  @JavaStaticMethod
  public func wrap(_ arg0: [UInt16]) -> CharBuffer!

  @JavaStaticMethod
  public func wrap(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> CharBuffer!

  @JavaStaticMethod
  public func allocate(_ arg0: Int32) -> CharBuffer!
}
