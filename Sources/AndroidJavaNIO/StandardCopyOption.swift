// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.StandardCopyOption", implements: CopyOption.self)
open class StandardCopyOption: Enum {
  public enum StandardCopyOptionCases: Equatable {
    case REPLACE_EXISTING
    case COPY_ATTRIBUTES
    case ATOMIC_MOVE
  }

  public var enumValue: StandardCopyOptionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.REPLACE_EXISTING?.as(JavaObject.self)) {
      return StandardCopyOptionCases.REPLACE_EXISTING
    } else if self.equals(classObj.COPY_ATTRIBUTES?.as(JavaObject.self)) {
      return StandardCopyOptionCases.COPY_ATTRIBUTES
    } else if self.equals(classObj.ATOMIC_MOVE?.as(JavaObject.self)) {
      return StandardCopyOptionCases.ATOMIC_MOVE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: StandardCopyOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<StandardCopyOption>(environment: _environment)
    switch enumValue {
      case .REPLACE_EXISTING:
        if let REPLACE_EXISTING = classObj.REPLACE_EXISTING {
          self.init(javaHolder: REPLACE_EXISTING.javaHolder)
        } else {
          fatalError("Enum value REPLACE_EXISTING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COPY_ATTRIBUTES:
        if let COPY_ATTRIBUTES = classObj.COPY_ATTRIBUTES {
          self.init(javaHolder: COPY_ATTRIBUTES.javaHolder)
        } else {
          fatalError("Enum value COPY_ATTRIBUTES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ATOMIC_MOVE:
        if let ATOMIC_MOVE = classObj.ATOMIC_MOVE {
          self.init(javaHolder: ATOMIC_MOVE.javaHolder)
        } else {
          fatalError("Enum value ATOMIC_MOVE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<StandardCopyOption> {
  @JavaStaticField(isFinal: true)
  public var REPLACE_EXISTING: StandardCopyOption!

  @JavaStaticField(isFinal: true)
  public var COPY_ATTRIBUTES: StandardCopyOption!

  @JavaStaticField(isFinal: true)
  public var ATOMIC_MOVE: StandardCopyOption!

  @JavaStaticMethod
  public func values() -> [StandardCopyOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> StandardCopyOption!
}
