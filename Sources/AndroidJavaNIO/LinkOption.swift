// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.nio.file.LinkOption", implements: OpenOption.self, CopyOption.self)
open class LinkOption: Enum {
  public enum LinkOptionCases: Equatable {
    case NOFOLLOW_LINKS
  }

  public var enumValue: LinkOptionCases! {
    let classObj = self.javaClass
    if self.equals(classObj.NOFOLLOW_LINKS?.as(JavaObject.self)) {
      return LinkOptionCases.NOFOLLOW_LINKS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: LinkOptionCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<LinkOption>(environment: _environment)
    switch enumValue {
      case .NOFOLLOW_LINKS:
        if let NOFOLLOW_LINKS = classObj.NOFOLLOW_LINKS {
          self.init(javaHolder: NOFOLLOW_LINKS.javaHolder)
        } else {
          fatalError("Enum value NOFOLLOW_LINKS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension LinkOption {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<LinkOption> {
  @JavaStaticField(isFinal: true)
  public var NOFOLLOW_LINKS: LinkOption!

  @JavaStaticMethod
  public func values() -> [LinkOption?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> LinkOption!
}
