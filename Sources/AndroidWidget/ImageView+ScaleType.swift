// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension ImageView {
  @JavaClass("android.widget.ImageView$ScaleType")
  open class ScaleType: Enum {
    public enum ScaleTypeCases: Equatable {
      case MATRIX
  case FIT_XY
  case FIT_START
  case FIT_CENTER
  case FIT_END
  case CENTER
  case CENTER_CROP
  case CENTER_INSIDE
    }

    public var enumValue: ScaleTypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.MATRIX?.as(JavaObject.self)) {
        return ScaleTypeCases.MATRIX
  } else if self.equals(classObj.FIT_XY?.as(JavaObject.self)) {
        return ScaleTypeCases.FIT_XY
  } else if self.equals(classObj.FIT_START?.as(JavaObject.self)) {
        return ScaleTypeCases.FIT_START
  } else if self.equals(classObj.FIT_CENTER?.as(JavaObject.self)) {
        return ScaleTypeCases.FIT_CENTER
  } else if self.equals(classObj.FIT_END?.as(JavaObject.self)) {
        return ScaleTypeCases.FIT_END
  } else if self.equals(classObj.CENTER?.as(JavaObject.self)) {
        return ScaleTypeCases.CENTER
  } else if self.equals(classObj.CENTER_CROP?.as(JavaObject.self)) {
        return ScaleTypeCases.CENTER_CROP
  } else if self.equals(classObj.CENTER_INSIDE?.as(JavaObject.self)) {
        return ScaleTypeCases.CENTER_INSIDE
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: ScaleTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<ScaleType>(environment: _environment)
    switch enumValue {
      case .MATRIX:
        if let MATRIX = classObj.MATRIX {
          self.init(javaHolder: MATRIX.javaHolder)
        } else {
          fatalError("Enum value MATRIX was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIT_XY:
        if let FIT_XY = classObj.FIT_XY {
          self.init(javaHolder: FIT_XY.javaHolder)
        } else {
          fatalError("Enum value FIT_XY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIT_START:
        if let FIT_START = classObj.FIT_START {
          self.init(javaHolder: FIT_START.javaHolder)
        } else {
          fatalError("Enum value FIT_START was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIT_CENTER:
        if let FIT_CENTER = classObj.FIT_CENTER {
          self.init(javaHolder: FIT_CENTER.javaHolder)
        } else {
          fatalError("Enum value FIT_CENTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIT_END:
        if let FIT_END = classObj.FIT_END {
          self.init(javaHolder: FIT_END.javaHolder)
        } else {
          fatalError("Enum value FIT_END was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CENTER:
        if let CENTER = classObj.CENTER {
          self.init(javaHolder: CENTER.javaHolder)
        } else {
          fatalError("Enum value CENTER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CENTER_CROP:
        if let CENTER_CROP = classObj.CENTER_CROP {
          self.init(javaHolder: CENTER_CROP.javaHolder)
        } else {
          fatalError("Enum value CENTER_CROP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CENTER_INSIDE:
        if let CENTER_INSIDE = classObj.CENTER_INSIDE {
          self.init(javaHolder: CENTER_INSIDE.javaHolder)
        } else {
          fatalError("Enum value CENTER_INSIDE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<ImageView.ScaleType> {
  @JavaStaticField(isFinal: true)
  public var MATRIX: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var FIT_XY: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var FIT_START: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var FIT_CENTER: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var FIT_END: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var CENTER: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var CENTER_CROP: ImageView.ScaleType!

  @JavaStaticField(isFinal: true)
  public var CENTER_INSIDE: ImageView.ScaleType!

  @JavaStaticMethod
  public func values() -> [ImageView.ScaleType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ImageView.ScaleType!
}
