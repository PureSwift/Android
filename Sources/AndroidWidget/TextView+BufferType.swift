// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension TextView {
  @JavaClass("android.widget.TextView$BufferType")
  open class BufferType: Enum {
    public enum BufferTypeCases: Equatable {
      case NORMAL
  case SPANNABLE
  case EDITABLE
    }

    public var enumValue: BufferTypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.NORMAL?.as(JavaObject.self)) {
        return BufferTypeCases.NORMAL
  } else if self.equals(classObj.SPANNABLE?.as(JavaObject.self)) {
        return BufferTypeCases.SPANNABLE
  } else if self.equals(classObj.EDITABLE?.as(JavaObject.self)) {
        return BufferTypeCases.EDITABLE
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: BufferTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<BufferType>(environment: _environment)
    switch enumValue {
      case .NORMAL:
        if let NORMAL = classObj.NORMAL {
          self.init(javaHolder: NORMAL.javaHolder)
        } else {
          fatalError("Enum value NORMAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SPANNABLE:
        if let SPANNABLE = classObj.SPANNABLE {
          self.init(javaHolder: SPANNABLE.javaHolder)
        } else {
          fatalError("Enum value SPANNABLE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EDITABLE:
        if let EDITABLE = classObj.EDITABLE {
          self.init(javaHolder: EDITABLE.javaHolder)
        } else {
          fatalError("Enum value EDITABLE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension TextView.BufferType {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<TextView.BufferType> {
  @JavaStaticField(isFinal: true)
  public var NORMAL: TextView.BufferType!

  @JavaStaticField(isFinal: true)
  public var SPANNABLE: TextView.BufferType!

  @JavaStaticField(isFinal: true)
  public var EDITABLE: TextView.BufferType!

  @JavaStaticMethod
  public func values() -> [TextView.BufferType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> TextView.BufferType!
}
