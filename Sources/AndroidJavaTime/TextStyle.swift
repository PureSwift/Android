// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.format.TextStyle")
open class TextStyle: Enum {
  public enum TextStyleCases: Equatable, CaseIterable {
    case FULL
    case FULL_STANDALONE
    case SHORT
    case SHORT_STANDALONE
    case NARROW
    case NARROW_STANDALONE
  }

  public var enumValue: TextStyleCases! {
    let classObj = self.javaClass
    if self.equals(classObj.FULL?.as(JavaObject.self)) {
      return TextStyleCases.FULL
    } else if self.equals(classObj.FULL_STANDALONE?.as(JavaObject.self)) {
      return TextStyleCases.FULL_STANDALONE
    } else if self.equals(classObj.SHORT?.as(JavaObject.self)) {
      return TextStyleCases.SHORT
    } else if self.equals(classObj.SHORT_STANDALONE?.as(JavaObject.self)) {
      return TextStyleCases.SHORT_STANDALONE
    } else if self.equals(classObj.NARROW?.as(JavaObject.self)) {
      return TextStyleCases.NARROW
    } else if self.equals(classObj.NARROW_STANDALONE?.as(JavaObject.self)) {
      return TextStyleCases.NARROW_STANDALONE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: TextStyleCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<TextStyle>(environment: _environment)
    switch enumValue {
      case .FULL:
        if let FULL = classObj.FULL {
          self.init(javaHolder: FULL.javaHolder)
        } else {
          fatalError("Enum value FULL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FULL_STANDALONE:
        if let FULL_STANDALONE = classObj.FULL_STANDALONE {
          self.init(javaHolder: FULL_STANDALONE.javaHolder)
        } else {
          fatalError("Enum value FULL_STANDALONE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SHORT:
        if let SHORT = classObj.SHORT {
          self.init(javaHolder: SHORT.javaHolder)
        } else {
          fatalError("Enum value SHORT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SHORT_STANDALONE:
        if let SHORT_STANDALONE = classObj.SHORT_STANDALONE {
          self.init(javaHolder: SHORT_STANDALONE.javaHolder)
        } else {
          fatalError("Enum value SHORT_STANDALONE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NARROW:
        if let NARROW = classObj.NARROW {
          self.init(javaHolder: NARROW.javaHolder)
        } else {
          fatalError("Enum value NARROW was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NARROW_STANDALONE:
        if let NARROW_STANDALONE = classObj.NARROW_STANDALONE {
          self.init(javaHolder: NARROW_STANDALONE.javaHolder)
        } else {
          fatalError("Enum value NARROW_STANDALONE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func isStandalone() -> Bool

  @JavaMethod
  open func asStandalone() -> TextStyle!

  @JavaMethod
  open func asNormal() -> TextStyle!
}
extension JavaClass<TextStyle> {
  @JavaStaticField(isFinal: true)
  public var FULL: TextStyle!

  @JavaStaticField(isFinal: true)
  public var FULL_STANDALONE: TextStyle!

  @JavaStaticField(isFinal: true)
  public var SHORT: TextStyle!

  @JavaStaticField(isFinal: true)
  public var SHORT_STANDALONE: TextStyle!

  @JavaStaticField(isFinal: true)
  public var NARROW: TextStyle!

  @JavaStaticField(isFinal: true)
  public var NARROW_STANDALONE: TextStyle!

  @JavaStaticMethod
  public func values() -> [TextStyle?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> TextStyle!
}
