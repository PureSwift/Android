// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.time.format.DateTimeFormatterBuilder")
open class DateTimeFormatterBuilder: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func append(_ arg0: DateTimeFormatter?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func parseStrict() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendZoneText(_ arg0: TextStyle?, _ arg1: JavaSet<ZoneId>?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendZoneText(_ arg0: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func toFormatter() -> DateTimeFormatter!

  @JavaMethod
  open func appendChronologyText(_ arg0: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendPattern(_ arg0: String) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendLocalized(_ arg0: String) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendLocalized(_ arg0: FormatStyle?, _ arg1: FormatStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendValue(_ arg0: TemporalField?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendValue(_ arg0: TemporalField?, _ arg1: Int32, _ arg2: Int32, _ arg3: SignStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendValue(_ arg0: TemporalField?, _ arg1: Int32) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendLiteral(_ arg0: String) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendLiteral(_ arg0: UInt16) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func parseCaseInsensitive() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendOffsetId() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func optionalStart() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendFraction(_ arg0: TemporalField?, _ arg1: Int32, _ arg2: Int32, _ arg3: Bool) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func parseLenient() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func parseCaseSensitive() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendZoneRegionId() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendInstant() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendInstant(_ arg0: Int32) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendOffset(_ arg0: String, _ arg1: String) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendText(_ arg0: TemporalField?, _ arg1: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendText(_ arg0: TemporalField?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func optionalEnd() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func padNext(_ arg0: Int32) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func padNext(_ arg0: Int32, _ arg1: UInt16) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendZoneId() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendGenericZoneText(_ arg0: TextStyle?, _ arg1: JavaSet<ZoneId>?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendGenericZoneText(_ arg0: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendLocalizedOffset(_ arg0: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendDayPeriodText(_ arg0: TextStyle?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendValueReduced(_ arg0: TemporalField?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendValueReduced(_ arg0: TemporalField?, _ arg1: Int32, _ arg2: Int32, _ arg3: ChronoLocalDate?) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func parseDefaulting(_ arg0: TemporalField?, _ arg1: Int64) -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendZoneOrOffsetId() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendChronologyId() -> DateTimeFormatterBuilder!

  @JavaMethod
  open func appendOptional(_ arg0: DateTimeFormatter?) -> DateTimeFormatterBuilder!
}
