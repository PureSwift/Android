// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.chrono.IsoEra", implements: Era.self)
open class IsoEra: Enum {
  public enum IsoEraCases: Equatable {
    case BCE
    case CE
  }

  public var enumValue: IsoEraCases! {
    let classObj = self.javaClass
    if self.equals(classObj.BCE?.as(JavaObject.self)) {
      return IsoEraCases.BCE
    } else if self.equals(classObj.CE?.as(JavaObject.self)) {
      return IsoEraCases.CE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: IsoEraCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<IsoEra>(environment: _environment)
    switch enumValue {
      case .BCE:
        if let BCE = classObj.BCE {
          self.init(javaHolder: BCE.javaHolder)
        } else {
          fatalError("Enum value BCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CE:
        if let CE = classObj.CE {
          self.init(javaHolder: CE.javaHolder)
        } else {
          fatalError("Enum value CE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getValue() -> Int32
}
extension JavaClass<IsoEra> {
  @JavaStaticField(isFinal: true)
  public var BCE: IsoEra!

  @JavaStaticField(isFinal: true)
  public var CE: IsoEra!

  @JavaStaticMethod
  public func values() -> [IsoEra?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> IsoEra!

  @JavaStaticMethod
  public func of(_ arg0: Int32) -> IsoEra!
}
