// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.format.ResolverStyle")
open class ResolverStyle: Enum {
  public enum ResolverStyleCases: Equatable {
    case STRICT
    case SMART
    case LENIENT
  }

  public var enumValue: ResolverStyleCases! {
    let classObj = self.javaClass
    if self.equals(classObj.STRICT?.as(JavaObject.self)) {
      return ResolverStyleCases.STRICT
    } else if self.equals(classObj.SMART?.as(JavaObject.self)) {
      return ResolverStyleCases.SMART
    } else if self.equals(classObj.LENIENT?.as(JavaObject.self)) {
      return ResolverStyleCases.LENIENT
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: ResolverStyleCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<ResolverStyle>(environment: _environment)
    switch enumValue {
      case .STRICT:
        if let STRICT = classObj.STRICT {
          self.init(javaHolder: STRICT.javaHolder)
        } else {
          fatalError("Enum value STRICT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SMART:
        if let SMART = classObj.SMART {
          self.init(javaHolder: SMART.javaHolder)
        } else {
          fatalError("Enum value SMART was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LENIENT:
        if let LENIENT = classObj.LENIENT {
          self.init(javaHolder: LENIENT.javaHolder)
        } else {
          fatalError("Enum value LENIENT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<ResolverStyle> {
  @JavaStaticField(isFinal: true)
  public var STRICT: ResolverStyle!

  @JavaStaticField(isFinal: true)
  public var SMART: ResolverStyle!

  @JavaStaticField(isFinal: true)
  public var LENIENT: ResolverStyle!

  @JavaStaticMethod
  public func values() -> [ResolverStyle?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ResolverStyle!
}
