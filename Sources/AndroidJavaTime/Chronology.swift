// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaInterface("java.time.chrono.Chronology", extends: Comparable.self)
public struct Chronology {
  @JavaMethod
  public func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  public func toString() -> String

  @JavaMethod
  public func hashCode() -> Int32

  @JavaMethod
  public func compareTo(_ arg0: Chronology?) -> Int32

  @JavaMethod
  public func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  public func getId() -> String

  @JavaMethod
  public func range(_ arg0: ChronoField?) -> ValueRange!

  @JavaMethod
  public func date(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> ChronoLocalDate!

  @JavaMethod
  public func date(_ arg0: TemporalAccessor?) -> ChronoLocalDate!

  @JavaMethod
  public func date(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> ChronoLocalDate!

  @JavaMethod
  public func eras() -> List<Era>!

  @JavaMethod
  public func epochSecond(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: Int32, _ arg7: ZoneOffset?) -> Int64

  @JavaMethod
  public func epochSecond(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32, _ arg5: Int32, _ arg6: ZoneOffset?) -> Int64

  @JavaMethod
  public func isLeapYear(_ arg0: Int64) -> Bool

  @JavaMethod
  public func eraOf(_ arg0: Int32) -> Era!

  @JavaMethod
  public func localDateTime(_ arg0: TemporalAccessor?) -> ChronoLocalDateTime<ChronoLocalDate>!

  @JavaMethod
  public func getCalendarType() -> String

  @JavaMethod
  public func dateEpochDay(_ arg0: Int64) -> ChronoLocalDate!

  @JavaMethod
  public func dateNow() -> ChronoLocalDate!

  @JavaMethod
  public func dateNow(_ arg0: ZoneId?) -> ChronoLocalDate!

  @JavaMethod
  public func dateNow(_ arg0: Clock?) -> ChronoLocalDate!

  @JavaMethod
  public func prolepticYear(_ arg0: Era?, _ arg1: Int32) -> Int32

  @JavaMethod
  public func dateYearDay(_ arg0: Int32, _ arg1: Int32) -> ChronoLocalDate!

  @JavaMethod
  public func dateYearDay(_ arg0: Era?, _ arg1: Int32, _ arg2: Int32) -> ChronoLocalDate!

  @JavaMethod
  public func zonedDateTime(_ arg0: Instant?, _ arg1: ZoneId?) -> ChronoZonedDateTime<ChronoLocalDate>!

  @JavaMethod
  public func zonedDateTime(_ arg0: TemporalAccessor?) -> ChronoZonedDateTime<ChronoLocalDate>!

  @JavaMethod
  public func period(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> ChronoPeriod!

  @JavaMethod
  public func isIsoBased() -> Bool
}
extension JavaClass<Chronology> {
  @JavaStaticMethod
  public func of(_ arg0: String) -> Chronology!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> Chronology!

  @JavaStaticMethod
  public func getAvailableChronologies() -> JavaSet<Chronology>!
}
