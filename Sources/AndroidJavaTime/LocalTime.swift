// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.LocalTime", implements: Temporal.self, TemporalAdjuster.self, Comparable.self, Serializable.self)
open class LocalTime: JavaObject {
  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: LocalTime?) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func format(_ arg0: DateTimeFormatter?) -> String

  @JavaMethod
  open func isSupported(_ arg0: TemporalUnit?) -> Bool

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> LocalTime!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> LocalTime!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func getNano() -> Int32

  @JavaMethod
  open func getHour() -> Int32

  @JavaMethod
  open func getMinute() -> Int32

  @JavaMethod
  open func getSecond() -> Int32

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> LocalTime!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> LocalTime!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open func until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open func plusNanos(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func plusSeconds(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func plusHours(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func plusMinutes(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func minusHours(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func minusMinutes(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func minusSeconds(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func minusNanos(_ arg0: Int64) -> LocalTime!

  @JavaMethod
  open func truncatedTo(_ arg0: TemporalUnit?) -> LocalTime!

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func atOffset(_ arg0: ZoneOffset?) -> OffsetTime!

  @JavaMethod
  open func isAfter(_ arg0: LocalTime?) -> Bool

  @JavaMethod
  open func isBefore(_ arg0: LocalTime?) -> Bool

  @JavaMethod
  open func toSecondOfDay() -> Int32

  @JavaMethod
  open func toEpochSecond(_ arg0: LocalDate?, _ arg1: ZoneOffset?) -> Int64

  @JavaMethod
  open func withHour(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open func withMinute(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open func withSecond(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open func withNano(_ arg0: Int32) -> LocalTime!

  @JavaMethod
  open func toNanoOfDay() -> Int64

  @JavaMethod
  open func atDate(_ arg0: LocalDate?) -> LocalDateTime!
}
extension JavaClass<LocalTime> {
  @JavaStaticField(isFinal: true)
  public var MIN: LocalTime!

  @JavaStaticField(isFinal: true)
  public var MAX: LocalTime!

  @JavaStaticField(isFinal: true)
  public var MIDNIGHT: LocalTime!

  @JavaStaticField(isFinal: true)
  public var NOON: LocalTime!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalTime!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> LocalTime!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32) -> LocalTime!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> LocalTime!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?) -> LocalTime!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?, _ arg1: DateTimeFormatter?) -> LocalTime!

  @JavaStaticMethod
  public func now() -> LocalTime!

  @JavaStaticMethod
  public func now(_ arg0: Clock?) -> LocalTime!

  @JavaStaticMethod
  public func now(_ arg0: ZoneId?) -> LocalTime!

  @JavaStaticMethod
  public func ofInstant(_ arg0: Instant?, _ arg1: ZoneId?) -> LocalTime!

  @JavaStaticMethod
  public func ofNanoOfDay(_ arg0: Int64) -> LocalTime!

  @JavaStaticMethod
  public func ofSecondOfDay(_ arg0: Int64) -> LocalTime!
}
