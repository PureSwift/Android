// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.DayOfWeek", implements: TemporalAccessor.self, TemporalAdjuster.self)
open class DayOfWeek: Enum {
  public enum DayOfWeekCases: Equatable {
    case MONDAY
    case TUESDAY
    case WEDNESDAY
    case THURSDAY
    case FRIDAY
    case SATURDAY
    case SUNDAY
  }

  public var enumValue: DayOfWeekCases! {
    let classObj = self.javaClass
    if self.equals(classObj.MONDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.MONDAY
    } else if self.equals(classObj.TUESDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.TUESDAY
    } else if self.equals(classObj.WEDNESDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.WEDNESDAY
    } else if self.equals(classObj.THURSDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.THURSDAY
    } else if self.equals(classObj.FRIDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.FRIDAY
    } else if self.equals(classObj.SATURDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.SATURDAY
    } else if self.equals(classObj.SUNDAY?.as(JavaObject.self)) {
      return DayOfWeekCases.SUNDAY
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: DayOfWeekCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<DayOfWeek>(environment: _environment)
    switch enumValue {
      case .MONDAY:
        if let MONDAY = classObj.MONDAY {
          self.init(javaHolder: MONDAY.javaHolder)
        } else {
          fatalError("Enum value MONDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TUESDAY:
        if let TUESDAY = classObj.TUESDAY {
          self.init(javaHolder: TUESDAY.javaHolder)
        } else {
          fatalError("Enum value TUESDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WEDNESDAY:
        if let WEDNESDAY = classObj.WEDNESDAY {
          self.init(javaHolder: WEDNESDAY.javaHolder)
        } else {
          fatalError("Enum value WEDNESDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .THURSDAY:
        if let THURSDAY = classObj.THURSDAY {
          self.init(javaHolder: THURSDAY.javaHolder)
        } else {
          fatalError("Enum value THURSDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FRIDAY:
        if let FRIDAY = classObj.FRIDAY {
          self.init(javaHolder: FRIDAY.javaHolder)
        } else {
          fatalError("Enum value FRIDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SATURDAY:
        if let SATURDAY = classObj.SATURDAY {
          self.init(javaHolder: SATURDAY.javaHolder)
        } else {
          fatalError("Enum value SATURDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SUNDAY:
        if let SUNDAY = classObj.SUNDAY {
          self.init(javaHolder: SUNDAY.javaHolder)
        } else {
          fatalError("Enum value SUNDAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func getValue() -> Int32

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func minus(_ arg0: Int64) -> DayOfWeek!

  @JavaMethod
  open func plus(_ arg0: Int64) -> DayOfWeek!

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!
}
extension JavaClass<DayOfWeek> {
  @JavaStaticField(isFinal: true)
  public var MONDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var TUESDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var WEDNESDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var THURSDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var FRIDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var SATURDAY: DayOfWeek!

  @JavaStaticField(isFinal: true)
  public var SUNDAY: DayOfWeek!

  @JavaStaticMethod
  public func values() -> [DayOfWeek?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> DayOfWeek!

  @JavaStaticMethod
  public func of(_ arg0: Int32) -> DayOfWeek!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> DayOfWeek!
}
