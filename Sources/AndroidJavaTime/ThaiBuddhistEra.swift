// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.chrono.ThaiBuddhistEra", implements: Era.self)
open class ThaiBuddhistEra: Enum {
  public enum ThaiBuddhistEraCases: Equatable {
    case BEFORE_BE
    case BE
  }

  public var enumValue: ThaiBuddhistEraCases! {
    let classObj = self.javaClass
    if self.equals(classObj.BEFORE_BE?.as(JavaObject.self)) {
      return ThaiBuddhistEraCases.BEFORE_BE
    } else if self.equals(classObj.BE?.as(JavaObject.self)) {
      return ThaiBuddhistEraCases.BE
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: ThaiBuddhistEraCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<ThaiBuddhistEra>(environment: _environment)
    switch enumValue {
      case .BEFORE_BE:
        if let BEFORE_BE = classObj.BEFORE_BE {
          self.init(javaHolder: BEFORE_BE.javaHolder)
        } else {
          fatalError("Enum value BEFORE_BE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BE:
        if let BE = classObj.BE {
          self.init(javaHolder: BE.javaHolder)
        } else {
          fatalError("Enum value BE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getValue() -> Int32
}
extension JavaClass<ThaiBuddhistEra> {
  @JavaStaticField(isFinal: true)
  public var BEFORE_BE: ThaiBuddhistEra!

  @JavaStaticField(isFinal: true)
  public var BE: ThaiBuddhistEra!

  @JavaStaticMethod
  public func values() -> [ThaiBuddhistEra?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ThaiBuddhistEra!

  @JavaStaticMethod
  public func of(_ arg0: Int32) -> ThaiBuddhistEra!
}
