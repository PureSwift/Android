// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.time.Period", implements: ChronoPeriod.self, Serializable.self)
open class Period: JavaObject {
  @JavaMethod
  open func get(_ arg0: TemporalUnit?) -> Int64

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func normalized() -> ChronoPeriod!

  @JavaMethod
  open func normalized() -> Period!

  @JavaMethod
  open func isZero() -> Bool

  @JavaMethod
  open func getMonths() -> Int32

  @JavaMethod
  open func isNegative() -> Bool

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Period!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> ChronoPeriod!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> ChronoPeriod!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Period!

  @JavaMethod
  open func getUnits() -> List<TemporalUnit>!

  @JavaMethod
  open func negated() -> Period!

  @JavaMethod
  open func negated() -> ChronoPeriod!

  @JavaMethod
  open func multipliedBy(_ arg0: Int32) -> ChronoPeriod!

  @JavaMethod
  open func multipliedBy(_ arg0: Int32) -> Period!

  @JavaMethod
  open func plusDays(_ arg0: Int64) -> Period!

  @JavaMethod
  open func minusDays(_ arg0: Int64) -> Period!

  @JavaMethod
  open func addTo(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func subtractFrom(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func plusMonths(_ arg0: Int64) -> Period!

  @JavaMethod
  open func toTotalMonths() -> Int64

  @JavaMethod
  open func getDays() -> Int32

  @JavaMethod
  open func plusYears(_ arg0: Int64) -> Period!

  @JavaMethod
  open func minusMonths(_ arg0: Int64) -> Period!

  @JavaMethod
  open func getChronology() -> Chronology!

  @JavaMethod
  open func getChronology() -> IsoChronology!

  @JavaMethod
  open func minusYears(_ arg0: Int64) -> Period!

  @JavaMethod
  open func getYears() -> Int32

  @JavaMethod
  open func withYears(_ arg0: Int32) -> Period!

  @JavaMethod
  open func withMonths(_ arg0: Int32) -> Period!

  @JavaMethod
  open func withDays(_ arg0: Int32) -> Period!
}
extension JavaClass<Period> {
  @JavaStaticField(isFinal: true)
  public var ZERO: Period!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Period!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAmount?) -> Period!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?) -> Period!

  @JavaStaticMethod
  public func between(_ arg0: LocalDate?, _ arg1: LocalDate?) -> Period!

  @JavaStaticMethod
  public func ofDays(_ arg0: Int32) -> Period!

  @JavaStaticMethod
  public func ofYears(_ arg0: Int32) -> Period!

  @JavaStaticMethod
  public func ofMonths(_ arg0: Int32) -> Period!

  @JavaStaticMethod
  public func ofWeeks(_ arg0: Int32) -> Period!
}
