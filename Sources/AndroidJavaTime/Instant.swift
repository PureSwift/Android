// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.Instant", implements: Temporal.self, TemporalAdjuster.self, Comparable.self, Serializable.self)
open class Instant: JavaObject {
  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: Instant?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func isSupported(_ arg0: TemporalUnit?) -> Bool

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> Instant!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> Instant!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func getEpochSecond() -> Int64

  @JavaMethod
  open func getNano() -> Int32

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Instant!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Instant!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func toEpochMilli() -> Int64

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Instant!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Instant!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open func until(_ arg0: Instant?) -> Duration!

  @JavaMethod
  open func plusNanos(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func plusSeconds(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func plusMillis(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func minusSeconds(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func minusMillis(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func minusNanos(_ arg0: Int64) -> Instant!

  @JavaMethod
  open func truncatedTo(_ arg0: TemporalUnit?) -> Instant!

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func atOffset(_ arg0: ZoneOffset?) -> OffsetDateTime!

  @JavaMethod
  open func atZone(_ arg0: ZoneId?) -> ZonedDateTime!

  @JavaMethod
  open func isAfter(_ arg0: Instant?) -> Bool

  @JavaMethod
  open func isBefore(_ arg0: Instant?) -> Bool
}
extension JavaClass<Instant> {
  @JavaStaticField(isFinal: true)
  public var EPOCH: Instant!

  @JavaStaticField(isFinal: true)
  public var MIN: Instant!

  @JavaStaticField(isFinal: true)
  public var MAX: Instant!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> Instant!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?) -> Instant!

  @JavaStaticMethod
  public func now() -> Instant!

  @JavaStaticMethod
  public func now(_ arg0: Clock?) -> Instant!

  @JavaStaticMethod
  public func ofEpochSecond(_ arg0: Int64, _ arg1: Int64) -> Instant!

  @JavaStaticMethod
  public func ofEpochSecond(_ arg0: Int64) -> Instant!

  @JavaStaticMethod
  public func ofEpochMilli(_ arg0: Int64) -> Instant!
}
