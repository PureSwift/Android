// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.YearMonth", implements: Temporal.self, TemporalAdjuster.self, Comparable.self, Serializable.self)
open class YearMonth: JavaObject {
  @JavaMethod
  open func isValidDay(_ arg0: Int32) -> Bool

  @JavaMethod
  open func atDay(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open func atEndOfMonth() -> LocalDate!

  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: YearMonth?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func format(_ arg0: DateTimeFormatter?) -> String

  @JavaMethod
  open func isSupported(_ arg0: TemporalUnit?) -> Bool

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> YearMonth!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> YearMonth!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func getYear() -> Int32

  @JavaMethod
  open func getMonthValue() -> Int32

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> YearMonth!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> YearMonth!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> YearMonth!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> YearMonth!

  @JavaMethod
  open func until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func isAfter(_ arg0: YearMonth?) -> Bool

  @JavaMethod
  open func isBefore(_ arg0: YearMonth?) -> Bool

  @JavaMethod
  open func isLeapYear() -> Bool

  @JavaMethod
  open func lengthOfMonth() -> Int32

  @JavaMethod
  open func lengthOfYear() -> Int32

  @JavaMethod
  open func getMonth() -> Month!

  @JavaMethod
  open func withMonth(_ arg0: Int32) -> YearMonth!

  @JavaMethod
  open func plusMonths(_ arg0: Int64) -> YearMonth!

  @JavaMethod
  open func withYear(_ arg0: Int32) -> YearMonth!

  @JavaMethod
  open func plusYears(_ arg0: Int64) -> YearMonth!

  @JavaMethod
  open func minusMonths(_ arg0: Int64) -> YearMonth!

  @JavaMethod
  open func minusYears(_ arg0: Int64) -> YearMonth!
}
extension JavaClass<YearMonth> {
  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32) -> YearMonth!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Month?) -> YearMonth!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> YearMonth!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?, _ arg1: DateTimeFormatter?) -> YearMonth!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?) -> YearMonth!

  @JavaStaticMethod
  public func now() -> YearMonth!

  @JavaStaticMethod
  public func now(_ arg0: ZoneId?) -> YearMonth!

  @JavaStaticMethod
  public func now(_ arg0: Clock?) -> YearMonth!
}
