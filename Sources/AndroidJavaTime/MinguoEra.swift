// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.chrono.MinguoEra", implements: Era.self)
open class MinguoEra: Enum {
  public enum MinguoEraCases: Equatable {
    case BEFORE_ROC
    case ROC
  }

  public var enumValue: MinguoEraCases! {
    let classObj = self.javaClass
    if self.equals(classObj.BEFORE_ROC?.as(JavaObject.self)) {
      return MinguoEraCases.BEFORE_ROC
    } else if self.equals(classObj.ROC?.as(JavaObject.self)) {
      return MinguoEraCases.ROC
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: MinguoEraCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<MinguoEra>(environment: _environment)
    switch enumValue {
      case .BEFORE_ROC:
        if let BEFORE_ROC = classObj.BEFORE_ROC {
          self.init(javaHolder: BEFORE_ROC.javaHolder)
        } else {
          fatalError("Enum value BEFORE_ROC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ROC:
        if let ROC = classObj.ROC {
          self.init(javaHolder: ROC.javaHolder)
        } else {
          fatalError("Enum value ROC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getValue() -> Int32
}
extension JavaClass<MinguoEra> {
  @JavaStaticField(isFinal: true)
  public var BEFORE_ROC: MinguoEra!

  @JavaStaticField(isFinal: true)
  public var ROC: MinguoEra!

  @JavaStaticMethod
  public func values() -> [MinguoEra?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> MinguoEra!

  @JavaStaticMethod
  public func of(_ arg0: Int32) -> MinguoEra!
}
