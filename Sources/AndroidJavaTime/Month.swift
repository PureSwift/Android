// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.Month", implements: TemporalAccessor.self, TemporalAdjuster.self)
open class Month: Enum {
  public enum MonthCases: Equatable {
    case JANUARY
    case FEBRUARY
    case MARCH
    case APRIL
    case MAY
    case JUNE
    case JULY
    case AUGUST
    case SEPTEMBER
    case OCTOBER
    case NOVEMBER
    case DECEMBER
  }

  public var enumValue: MonthCases! {
    let classObj = self.javaClass
    if self.equals(classObj.JANUARY?.as(JavaObject.self)) {
      return MonthCases.JANUARY
    } else if self.equals(classObj.FEBRUARY?.as(JavaObject.self)) {
      return MonthCases.FEBRUARY
    } else if self.equals(classObj.MARCH?.as(JavaObject.self)) {
      return MonthCases.MARCH
    } else if self.equals(classObj.APRIL?.as(JavaObject.self)) {
      return MonthCases.APRIL
    } else if self.equals(classObj.MAY?.as(JavaObject.self)) {
      return MonthCases.MAY
    } else if self.equals(classObj.JUNE?.as(JavaObject.self)) {
      return MonthCases.JUNE
    } else if self.equals(classObj.JULY?.as(JavaObject.self)) {
      return MonthCases.JULY
    } else if self.equals(classObj.AUGUST?.as(JavaObject.self)) {
      return MonthCases.AUGUST
    } else if self.equals(classObj.SEPTEMBER?.as(JavaObject.self)) {
      return MonthCases.SEPTEMBER
    } else if self.equals(classObj.OCTOBER?.as(JavaObject.self)) {
      return MonthCases.OCTOBER
    } else if self.equals(classObj.NOVEMBER?.as(JavaObject.self)) {
      return MonthCases.NOVEMBER
    } else if self.equals(classObj.DECEMBER?.as(JavaObject.self)) {
      return MonthCases.DECEMBER
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: MonthCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Month>(environment: _environment)
    switch enumValue {
      case .JANUARY:
        if let JANUARY = classObj.JANUARY {
          self.init(javaHolder: JANUARY.javaHolder)
        } else {
          fatalError("Enum value JANUARY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FEBRUARY:
        if let FEBRUARY = classObj.FEBRUARY {
          self.init(javaHolder: FEBRUARY.javaHolder)
        } else {
          fatalError("Enum value FEBRUARY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MARCH:
        if let MARCH = classObj.MARCH {
          self.init(javaHolder: MARCH.javaHolder)
        } else {
          fatalError("Enum value MARCH was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .APRIL:
        if let APRIL = classObj.APRIL {
          self.init(javaHolder: APRIL.javaHolder)
        } else {
          fatalError("Enum value APRIL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MAY:
        if let MAY = classObj.MAY {
          self.init(javaHolder: MAY.javaHolder)
        } else {
          fatalError("Enum value MAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .JUNE:
        if let JUNE = classObj.JUNE {
          self.init(javaHolder: JUNE.javaHolder)
        } else {
          fatalError("Enum value JUNE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .JULY:
        if let JULY = classObj.JULY {
          self.init(javaHolder: JULY.javaHolder)
        } else {
          fatalError("Enum value JULY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .AUGUST:
        if let AUGUST = classObj.AUGUST {
          self.init(javaHolder: AUGUST.javaHolder)
        } else {
          fatalError("Enum value AUGUST was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SEPTEMBER:
        if let SEPTEMBER = classObj.SEPTEMBER {
          self.init(javaHolder: SEPTEMBER.javaHolder)
        } else {
          fatalError("Enum value SEPTEMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OCTOBER:
        if let OCTOBER = classObj.OCTOBER {
          self.init(javaHolder: OCTOBER.javaHolder)
        } else {
          fatalError("Enum value OCTOBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NOVEMBER:
        if let NOVEMBER = classObj.NOVEMBER {
          self.init(javaHolder: NOVEMBER.javaHolder)
        } else {
          fatalError("Enum value NOVEMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DECEMBER:
        if let DECEMBER = classObj.DECEMBER {
          self.init(javaHolder: DECEMBER.javaHolder)
        } else {
          fatalError("Enum value DECEMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func firstMonthOfQuarter() -> Month!

  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open func length(_ arg0: Bool) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func getValue() -> Int32

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func minLength() -> Int32

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func minus(_ arg0: Int64) -> Month!

  @JavaMethod
  open func plus(_ arg0: Int64) -> Month!

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func firstDayOfYear(_ arg0: Bool) -> Int32

  @JavaMethod
  open func maxLength() -> Int32
}
extension JavaClass<Month> {
  @JavaStaticField(isFinal: true)
  public var JANUARY: Month!

  @JavaStaticField(isFinal: true)
  public var FEBRUARY: Month!

  @JavaStaticField(isFinal: true)
  public var MARCH: Month!

  @JavaStaticField(isFinal: true)
  public var APRIL: Month!

  @JavaStaticField(isFinal: true)
  public var MAY: Month!

  @JavaStaticField(isFinal: true)
  public var JUNE: Month!

  @JavaStaticField(isFinal: true)
  public var JULY: Month!

  @JavaStaticField(isFinal: true)
  public var AUGUST: Month!

  @JavaStaticField(isFinal: true)
  public var SEPTEMBER: Month!

  @JavaStaticField(isFinal: true)
  public var OCTOBER: Month!

  @JavaStaticField(isFinal: true)
  public var NOVEMBER: Month!

  @JavaStaticField(isFinal: true)
  public var DECEMBER: Month!

  @JavaStaticMethod
  public func values() -> [Month?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Month!

  @JavaStaticMethod
  public func of(_ arg0: Int32) -> Month!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> Month!
}
