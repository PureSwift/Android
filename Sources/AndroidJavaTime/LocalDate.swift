// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaRuntime

@JavaClass("java.time.LocalDate", implements: Temporal.self, TemporalAdjuster.self, ChronoLocalDate.self, Serializable.self)
open class LocalDate: JavaObject {
  @JavaMethod
  open func get(_ arg0: TemporalField?) -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: ChronoLocalDate?) -> Int32

  @JavaMethod
  open func getLong(_ arg0: TemporalField?) -> Int64

  @JavaMethod
  open func format(_ arg0: DateTimeFormatter?) -> String

  @JavaMethod
  open func isSupported(_ arg0: TemporalUnit?) -> Bool

  @JavaMethod
  open func isSupported(_ arg0: TemporalField?) -> Bool

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> LocalDate!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> LocalDate!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> Temporal!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> ChronoLocalDate!

  @JavaMethod
  open func with(_ arg0: TemporalField?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open func with(_ arg0: TemporalAdjuster?) -> ChronoLocalDate!

  @JavaMethod
  open func query(_ arg0: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func range(_ arg0: TemporalField?) -> ValueRange!

  @JavaMethod
  open func isEqual(_ arg0: ChronoLocalDate?) -> Bool

  @JavaMethod
  open func getYear() -> Int32

  @JavaMethod
  open func getMonthValue() -> Int32

  @JavaMethod
  open func getDayOfMonth() -> Int32

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> ChronoLocalDate!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> ChronoLocalDate!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalDate!

  @JavaMethod
  open func minus(_ arg0: TemporalAmount?) -> LocalDate!

  @JavaMethod
  open func minus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> ChronoLocalDate!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> ChronoLocalDate!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> LocalDate!

  @JavaMethod
  open func plus(_ arg0: Int64, _ arg1: TemporalUnit?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> Temporal!

  @JavaMethod
  open func plus(_ arg0: TemporalAmount?) -> LocalDate!

  @JavaMethod
  open func until(_ arg0: ChronoLocalDate?) -> Period!

  @JavaMethod
  open func until(_ arg0: Temporal?, _ arg1: TemporalUnit?) -> Int64

  @JavaMethod
  open func until(_ arg0: ChronoLocalDate?) -> ChronoPeriod!

  @JavaMethod
  open func plusDays(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func minusDays(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?) -> Temporal!

  @JavaMethod
  open func isAfter(_ arg0: ChronoLocalDate?) -> Bool

  @JavaMethod
  open func isBefore(_ arg0: ChronoLocalDate?) -> Bool

  @JavaMethod
  open func isLeapYear() -> Bool

  @JavaMethod
  open func lengthOfMonth() -> Int32

  @JavaMethod
  open func lengthOfYear() -> Int32

  @JavaMethod
  open func getMonth() -> Month!

  @JavaMethod
  open func toEpochDay() -> Int64

  @JavaMethod
  open func getDayOfWeek() -> DayOfWeek!

  @JavaMethod
  open func getDayOfYear() -> Int32

  @JavaMethod
  open func withDayOfMonth(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open func withDayOfYear(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open func plusWeeks(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func withMonth(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open func plusMonths(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func withYear(_ arg0: Int32) -> LocalDate!

  @JavaMethod
  open func plusYears(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func minusMonths(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func atTime(_ arg0: LocalTime?) -> ChronoLocalDateTime!

  @JavaMethod
  open func atTime(_ arg0: LocalTime?) -> LocalDateTime!

  @JavaMethod
  open func atTime(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> LocalDateTime!

  @JavaMethod
  open func atTime(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalDateTime!

  @JavaMethod
  open func atTime(_ arg0: OffsetTime?) -> OffsetDateTime!

  @JavaMethod
  open func atTime(_ arg0: Int32, _ arg1: Int32) -> LocalDateTime!

  @JavaMethod
  open func getEra() -> Era!

  @JavaMethod
  open func getEra() -> IsoEra!

  @JavaMethod
  open func getChronology() -> Chronology!

  @JavaMethod
  open func getChronology() -> IsoChronology!

  @JavaMethod
  open func minusYears(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func minusWeeks(_ arg0: Int64) -> LocalDate!

  @JavaMethod
  open func atStartOfDay() -> LocalDateTime!

  @JavaMethod
  open func atStartOfDay(_ arg0: ZoneId?) -> ZonedDateTime!

  @JavaMethod
  open func toEpochSecond(_ arg0: LocalTime?, _ arg1: ZoneOffset?) -> Int64
}
extension JavaClass<LocalDate> {
  @JavaStaticField(isFinal: true)
  public var MIN: LocalDate!

  @JavaStaticField(isFinal: true)
  public var MAX: LocalDate!

  @JavaStaticField(isFinal: true)
  public var EPOCH: LocalDate!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> LocalDate!

  @JavaStaticMethod
  public func of(_ arg0: Int32, _ arg1: Month?, _ arg2: Int32) -> LocalDate!

  @JavaStaticMethod
  public func from(_ arg0: TemporalAccessor?) -> LocalDate!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?) -> LocalDate!

  @JavaStaticMethod
  public func parse(_ arg0: CharSequence?, _ arg1: DateTimeFormatter?) -> LocalDate!

  @JavaStaticMethod
  public func now() -> LocalDate!

  @JavaStaticMethod
  public func now(_ arg0: Clock?) -> LocalDate!

  @JavaStaticMethod
  public func now(_ arg0: ZoneId?) -> LocalDate!

  @JavaStaticMethod
  public func ofInstant(_ arg0: Instant?, _ arg1: ZoneId?) -> LocalDate!

  @JavaStaticMethod
  public func ofEpochDay(_ arg0: Int64) -> LocalDate!

  @JavaStaticMethod
  public func ofYearDay(_ arg0: Int32, _ arg1: Int32) -> LocalDate!
}
