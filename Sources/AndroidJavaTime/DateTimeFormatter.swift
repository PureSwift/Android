// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.time.format.DateTimeFormatter")
open class DateTimeFormatter: JavaObject {
  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func format(_ arg0: TemporalAccessor?) -> String

  @JavaMethod
  open func parse(_ arg0: CharSequence?, _ arg1: TemporalQuery<JavaObject>?) -> JavaObject!

  @JavaMethod
  open func parse(_ arg0: CharSequence?) -> TemporalAccessor!

  @JavaMethod
  open func getZone() -> ZoneId!

  @JavaMethod
  open func withZone(_ arg0: ZoneId?) -> DateTimeFormatter!

  @JavaMethod
  open func formatTo(_ arg0: TemporalAccessor?, _ arg1: Appendable?)

  @JavaMethod
  open func getChronology() -> Chronology!

  @JavaMethod
  open func getDecimalStyle() -> DecimalStyle!

  @JavaMethod
  open func withDecimalStyle(_ arg0: DecimalStyle?) -> DateTimeFormatter!

  @JavaMethod
  open func withChronology(_ arg0: Chronology?) -> DateTimeFormatter!

  @JavaMethod
  open func getResolverStyle() -> ResolverStyle!

  @JavaMethod
  open func withResolverStyle(_ arg0: ResolverStyle?) -> DateTimeFormatter!

  @JavaMethod
  open func getResolverFields() -> JavaSet<TemporalField>!

  @JavaMethod
  open func withResolverFields(_ arg0: [TemporalField?]) -> DateTimeFormatter!

  @JavaMethod
  open func withResolverFields(_ arg0: JavaSet<TemporalField>?) -> DateTimeFormatter!

  @JavaMethod
  open func parseBest(_ arg0: CharSequence?, _ arg1: [TemporalQuery<JavaObject>?]) -> TemporalAccessor!
}
extension JavaClass<DateTimeFormatter> {
  @JavaStaticField(isFinal: true)
  public var ISO_LOCAL_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_OFFSET_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_LOCAL_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_OFFSET_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_LOCAL_DATE_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_OFFSET_DATE_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_ZONED_DATE_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_DATE_TIME: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_ORDINAL_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_WEEK_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var ISO_INSTANT: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var BASIC_ISO_DATE: DateTimeFormatter!

  @JavaStaticField(isFinal: true)
  public var RFC_1123_DATE_TIME: DateTimeFormatter!

  @JavaStaticMethod
  public func ofPattern(_ arg0: String) -> DateTimeFormatter!

  @JavaStaticMethod
  public func ofLocalizedDate(_ arg0: FormatStyle?) -> DateTimeFormatter!

  @JavaStaticMethod
  public func ofLocalizedTime(_ arg0: FormatStyle?) -> DateTimeFormatter!

  @JavaStaticMethod
  public func ofLocalizedDateTime(_ arg0: FormatStyle?) -> DateTimeFormatter!

  @JavaStaticMethod
  public func ofLocalizedDateTime(_ arg0: FormatStyle?, _ arg1: FormatStyle?) -> DateTimeFormatter!

  @JavaStaticMethod
  public func ofLocalizedPattern(_ arg0: String) -> DateTimeFormatter!

  @JavaStaticMethod
  public func parsedExcessDays() -> TemporalQuery<Period>!

  @JavaStaticMethod
  public func parsedLeapSecond() -> TemporalQuery<JavaBoolean>!
}
