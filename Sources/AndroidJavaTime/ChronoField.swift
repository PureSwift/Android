// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.time.temporal.ChronoField", implements: TemporalField.self)
open class ChronoField: Enum {
  public enum ChronoFieldCases: Equatable {
    case NANO_OF_SECOND
    case NANO_OF_DAY
    case MICRO_OF_SECOND
    case MICRO_OF_DAY
    case MILLI_OF_SECOND
    case MILLI_OF_DAY
    case SECOND_OF_MINUTE
    case SECOND_OF_DAY
    case MINUTE_OF_HOUR
    case MINUTE_OF_DAY
    case HOUR_OF_AMPM
    case CLOCK_HOUR_OF_AMPM
    case HOUR_OF_DAY
    case CLOCK_HOUR_OF_DAY
    case AMPM_OF_DAY
    case DAY_OF_WEEK
    case ALIGNED_DAY_OF_WEEK_IN_MONTH
    case ALIGNED_DAY_OF_WEEK_IN_YEAR
    case DAY_OF_MONTH
    case DAY_OF_YEAR
    case EPOCH_DAY
    case ALIGNED_WEEK_OF_MONTH
    case ALIGNED_WEEK_OF_YEAR
    case MONTH_OF_YEAR
    case PROLEPTIC_MONTH
    case YEAR_OF_ERA
    case YEAR
    case ERA
    case INSTANT_SECONDS
    case OFFSET_SECONDS
  }

  public var enumValue: ChronoFieldCases! {
    let classObj = self.javaClass
    if self.equals(classObj.NANO_OF_SECOND?.as(JavaObject.self)) {
      return ChronoFieldCases.NANO_OF_SECOND
    } else if self.equals(classObj.NANO_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.NANO_OF_DAY
    } else if self.equals(classObj.MICRO_OF_SECOND?.as(JavaObject.self)) {
      return ChronoFieldCases.MICRO_OF_SECOND
    } else if self.equals(classObj.MICRO_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.MICRO_OF_DAY
    } else if self.equals(classObj.MILLI_OF_SECOND?.as(JavaObject.self)) {
      return ChronoFieldCases.MILLI_OF_SECOND
    } else if self.equals(classObj.MILLI_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.MILLI_OF_DAY
    } else if self.equals(classObj.SECOND_OF_MINUTE?.as(JavaObject.self)) {
      return ChronoFieldCases.SECOND_OF_MINUTE
    } else if self.equals(classObj.SECOND_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.SECOND_OF_DAY
    } else if self.equals(classObj.MINUTE_OF_HOUR?.as(JavaObject.self)) {
      return ChronoFieldCases.MINUTE_OF_HOUR
    } else if self.equals(classObj.MINUTE_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.MINUTE_OF_DAY
    } else if self.equals(classObj.HOUR_OF_AMPM?.as(JavaObject.self)) {
      return ChronoFieldCases.HOUR_OF_AMPM
    } else if self.equals(classObj.CLOCK_HOUR_OF_AMPM?.as(JavaObject.self)) {
      return ChronoFieldCases.CLOCK_HOUR_OF_AMPM
    } else if self.equals(classObj.HOUR_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.HOUR_OF_DAY
    } else if self.equals(classObj.CLOCK_HOUR_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.CLOCK_HOUR_OF_DAY
    } else if self.equals(classObj.AMPM_OF_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.AMPM_OF_DAY
    } else if self.equals(classObj.DAY_OF_WEEK?.as(JavaObject.self)) {
      return ChronoFieldCases.DAY_OF_WEEK
    } else if self.equals(classObj.ALIGNED_DAY_OF_WEEK_IN_MONTH?.as(JavaObject.self)) {
      return ChronoFieldCases.ALIGNED_DAY_OF_WEEK_IN_MONTH
    } else if self.equals(classObj.ALIGNED_DAY_OF_WEEK_IN_YEAR?.as(JavaObject.self)) {
      return ChronoFieldCases.ALIGNED_DAY_OF_WEEK_IN_YEAR
    } else if self.equals(classObj.DAY_OF_MONTH?.as(JavaObject.self)) {
      return ChronoFieldCases.DAY_OF_MONTH
    } else if self.equals(classObj.DAY_OF_YEAR?.as(JavaObject.self)) {
      return ChronoFieldCases.DAY_OF_YEAR
    } else if self.equals(classObj.EPOCH_DAY?.as(JavaObject.self)) {
      return ChronoFieldCases.EPOCH_DAY
    } else if self.equals(classObj.ALIGNED_WEEK_OF_MONTH?.as(JavaObject.self)) {
      return ChronoFieldCases.ALIGNED_WEEK_OF_MONTH
    } else if self.equals(classObj.ALIGNED_WEEK_OF_YEAR?.as(JavaObject.self)) {
      return ChronoFieldCases.ALIGNED_WEEK_OF_YEAR
    } else if self.equals(classObj.MONTH_OF_YEAR?.as(JavaObject.self)) {
      return ChronoFieldCases.MONTH_OF_YEAR
    } else if self.equals(classObj.PROLEPTIC_MONTH?.as(JavaObject.self)) {
      return ChronoFieldCases.PROLEPTIC_MONTH
    } else if self.equals(classObj.YEAR_OF_ERA?.as(JavaObject.self)) {
      return ChronoFieldCases.YEAR_OF_ERA
    } else if self.equals(classObj.YEAR?.as(JavaObject.self)) {
      return ChronoFieldCases.YEAR
    } else if self.equals(classObj.ERA?.as(JavaObject.self)) {
      return ChronoFieldCases.ERA
    } else if self.equals(classObj.INSTANT_SECONDS?.as(JavaObject.self)) {
      return ChronoFieldCases.INSTANT_SECONDS
    } else if self.equals(classObj.OFFSET_SECONDS?.as(JavaObject.self)) {
      return ChronoFieldCases.OFFSET_SECONDS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: ChronoFieldCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<ChronoField>(environment: _environment)
    switch enumValue {
      case .NANO_OF_SECOND:
        if let NANO_OF_SECOND = classObj.NANO_OF_SECOND {
          self.init(javaHolder: NANO_OF_SECOND.javaHolder)
        } else {
          fatalError("Enum value NANO_OF_SECOND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NANO_OF_DAY:
        if let NANO_OF_DAY = classObj.NANO_OF_DAY {
          self.init(javaHolder: NANO_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value NANO_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MICRO_OF_SECOND:
        if let MICRO_OF_SECOND = classObj.MICRO_OF_SECOND {
          self.init(javaHolder: MICRO_OF_SECOND.javaHolder)
        } else {
          fatalError("Enum value MICRO_OF_SECOND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MICRO_OF_DAY:
        if let MICRO_OF_DAY = classObj.MICRO_OF_DAY {
          self.init(javaHolder: MICRO_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value MICRO_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MILLI_OF_SECOND:
        if let MILLI_OF_SECOND = classObj.MILLI_OF_SECOND {
          self.init(javaHolder: MILLI_OF_SECOND.javaHolder)
        } else {
          fatalError("Enum value MILLI_OF_SECOND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MILLI_OF_DAY:
        if let MILLI_OF_DAY = classObj.MILLI_OF_DAY {
          self.init(javaHolder: MILLI_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value MILLI_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SECOND_OF_MINUTE:
        if let SECOND_OF_MINUTE = classObj.SECOND_OF_MINUTE {
          self.init(javaHolder: SECOND_OF_MINUTE.javaHolder)
        } else {
          fatalError("Enum value SECOND_OF_MINUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SECOND_OF_DAY:
        if let SECOND_OF_DAY = classObj.SECOND_OF_DAY {
          self.init(javaHolder: SECOND_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value SECOND_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MINUTE_OF_HOUR:
        if let MINUTE_OF_HOUR = classObj.MINUTE_OF_HOUR {
          self.init(javaHolder: MINUTE_OF_HOUR.javaHolder)
        } else {
          fatalError("Enum value MINUTE_OF_HOUR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MINUTE_OF_DAY:
        if let MINUTE_OF_DAY = classObj.MINUTE_OF_DAY {
          self.init(javaHolder: MINUTE_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value MINUTE_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HOUR_OF_AMPM:
        if let HOUR_OF_AMPM = classObj.HOUR_OF_AMPM {
          self.init(javaHolder: HOUR_OF_AMPM.javaHolder)
        } else {
          fatalError("Enum value HOUR_OF_AMPM was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CLOCK_HOUR_OF_AMPM:
        if let CLOCK_HOUR_OF_AMPM = classObj.CLOCK_HOUR_OF_AMPM {
          self.init(javaHolder: CLOCK_HOUR_OF_AMPM.javaHolder)
        } else {
          fatalError("Enum value CLOCK_HOUR_OF_AMPM was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HOUR_OF_DAY:
        if let HOUR_OF_DAY = classObj.HOUR_OF_DAY {
          self.init(javaHolder: HOUR_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value HOUR_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CLOCK_HOUR_OF_DAY:
        if let CLOCK_HOUR_OF_DAY = classObj.CLOCK_HOUR_OF_DAY {
          self.init(javaHolder: CLOCK_HOUR_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value CLOCK_HOUR_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .AMPM_OF_DAY:
        if let AMPM_OF_DAY = classObj.AMPM_OF_DAY {
          self.init(javaHolder: AMPM_OF_DAY.javaHolder)
        } else {
          fatalError("Enum value AMPM_OF_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DAY_OF_WEEK:
        if let DAY_OF_WEEK = classObj.DAY_OF_WEEK {
          self.init(javaHolder: DAY_OF_WEEK.javaHolder)
        } else {
          fatalError("Enum value DAY_OF_WEEK was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ALIGNED_DAY_OF_WEEK_IN_MONTH:
        if let ALIGNED_DAY_OF_WEEK_IN_MONTH = classObj.ALIGNED_DAY_OF_WEEK_IN_MONTH {
          self.init(javaHolder: ALIGNED_DAY_OF_WEEK_IN_MONTH.javaHolder)
        } else {
          fatalError("Enum value ALIGNED_DAY_OF_WEEK_IN_MONTH was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ALIGNED_DAY_OF_WEEK_IN_YEAR:
        if let ALIGNED_DAY_OF_WEEK_IN_YEAR = classObj.ALIGNED_DAY_OF_WEEK_IN_YEAR {
          self.init(javaHolder: ALIGNED_DAY_OF_WEEK_IN_YEAR.javaHolder)
        } else {
          fatalError("Enum value ALIGNED_DAY_OF_WEEK_IN_YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DAY_OF_MONTH:
        if let DAY_OF_MONTH = classObj.DAY_OF_MONTH {
          self.init(javaHolder: DAY_OF_MONTH.javaHolder)
        } else {
          fatalError("Enum value DAY_OF_MONTH was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DAY_OF_YEAR:
        if let DAY_OF_YEAR = classObj.DAY_OF_YEAR {
          self.init(javaHolder: DAY_OF_YEAR.javaHolder)
        } else {
          fatalError("Enum value DAY_OF_YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EPOCH_DAY:
        if let EPOCH_DAY = classObj.EPOCH_DAY {
          self.init(javaHolder: EPOCH_DAY.javaHolder)
        } else {
          fatalError("Enum value EPOCH_DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ALIGNED_WEEK_OF_MONTH:
        if let ALIGNED_WEEK_OF_MONTH = classObj.ALIGNED_WEEK_OF_MONTH {
          self.init(javaHolder: ALIGNED_WEEK_OF_MONTH.javaHolder)
        } else {
          fatalError("Enum value ALIGNED_WEEK_OF_MONTH was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ALIGNED_WEEK_OF_YEAR:
        if let ALIGNED_WEEK_OF_YEAR = classObj.ALIGNED_WEEK_OF_YEAR {
          self.init(javaHolder: ALIGNED_WEEK_OF_YEAR.javaHolder)
        } else {
          fatalError("Enum value ALIGNED_WEEK_OF_YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MONTH_OF_YEAR:
        if let MONTH_OF_YEAR = classObj.MONTH_OF_YEAR {
          self.init(javaHolder: MONTH_OF_YEAR.javaHolder)
        } else {
          fatalError("Enum value MONTH_OF_YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PROLEPTIC_MONTH:
        if let PROLEPTIC_MONTH = classObj.PROLEPTIC_MONTH {
          self.init(javaHolder: PROLEPTIC_MONTH.javaHolder)
        } else {
          fatalError("Enum value PROLEPTIC_MONTH was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .YEAR_OF_ERA:
        if let YEAR_OF_ERA = classObj.YEAR_OF_ERA {
          self.init(javaHolder: YEAR_OF_ERA.javaHolder)
        } else {
          fatalError("Enum value YEAR_OF_ERA was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .YEAR:
        if let YEAR = classObj.YEAR {
          self.init(javaHolder: YEAR.javaHolder)
        } else {
          fatalError("Enum value YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ERA:
        if let ERA = classObj.ERA {
          self.init(javaHolder: ERA.javaHolder)
        } else {
          fatalError("Enum value ERA was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INSTANT_SECONDS:
        if let INSTANT_SECONDS = classObj.INSTANT_SECONDS {
          self.init(javaHolder: INSTANT_SECONDS.javaHolder)
        } else {
          fatalError("Enum value INSTANT_SECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OFFSET_SECONDS:
        if let OFFSET_SECONDS = classObj.OFFSET_SECONDS {
          self.init(javaHolder: OFFSET_SECONDS.javaHolder)
        } else {
          fatalError("Enum value OFFSET_SECONDS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func range() -> ValueRange!

  @JavaMethod
  open func checkValidIntValue(_ arg0: Int64) -> Int32

  @JavaMethod
  open func isSupportedBy(_ arg0: TemporalAccessor?) -> Bool

  @JavaMethod
  open func isTimeBased() -> Bool

  @JavaMethod
  open func getFrom(_ arg0: TemporalAccessor?) -> Int64

  @JavaMethod
  open func adjustInto(_ arg0: Temporal?, _ arg1: Int64) -> Temporal!

  @JavaMethod
  open func checkValidValue(_ arg0: Int64) -> Int64

  @JavaMethod
  open func rangeRefinedBy(_ arg0: TemporalAccessor?) -> ValueRange!

  @JavaMethod
  open func isDateBased() -> Bool

  @JavaMethod
  open func getBaseUnit() -> TemporalUnit!

  @JavaMethod
  open func getRangeUnit() -> TemporalUnit!
}
extension JavaClass<ChronoField> {
  @JavaStaticField(isFinal: true)
  public var NANO_OF_SECOND: ChronoField!

  @JavaStaticField(isFinal: true)
  public var NANO_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MICRO_OF_SECOND: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MICRO_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MILLI_OF_SECOND: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MILLI_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var SECOND_OF_MINUTE: ChronoField!

  @JavaStaticField(isFinal: true)
  public var SECOND_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MINUTE_OF_HOUR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MINUTE_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var HOUR_OF_AMPM: ChronoField!

  @JavaStaticField(isFinal: true)
  public var CLOCK_HOUR_OF_AMPM: ChronoField!

  @JavaStaticField(isFinal: true)
  public var HOUR_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var CLOCK_HOUR_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var AMPM_OF_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var DAY_OF_WEEK: ChronoField!

  @JavaStaticField(isFinal: true)
  public var ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoField!

  @JavaStaticField(isFinal: true)
  public var ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var DAY_OF_MONTH: ChronoField!

  @JavaStaticField(isFinal: true)
  public var DAY_OF_YEAR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var EPOCH_DAY: ChronoField!

  @JavaStaticField(isFinal: true)
  public var ALIGNED_WEEK_OF_MONTH: ChronoField!

  @JavaStaticField(isFinal: true)
  public var ALIGNED_WEEK_OF_YEAR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var MONTH_OF_YEAR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var PROLEPTIC_MONTH: ChronoField!

  @JavaStaticField(isFinal: true)
  public var YEAR_OF_ERA: ChronoField!

  @JavaStaticField(isFinal: true)
  public var YEAR: ChronoField!

  @JavaStaticField(isFinal: true)
  public var ERA: ChronoField!

  @JavaStaticField(isFinal: true)
  public var INSTANT_SECONDS: ChronoField!

  @JavaStaticField(isFinal: true)
  public var OFFSET_SECONDS: ChronoField!

  @JavaStaticMethod
  public func values() -> [ChronoField?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ChronoField!
}
