// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.lang.Runtime")
open class Runtime: JavaObject {
  @JavaMethod
  open func exit(_ arg0: Int32)

  @JavaMethod
  open func runFinalization()

  @JavaMethod
  open func load(_ arg0: String)

  @JavaMethod
  open func loadLibrary(_ arg0: String)

  @JavaMethod
  open func gc()

  @JavaMethod
  open func availableProcessors() -> Int32

  @JavaMethod
  open func freeMemory() -> Int64

  @JavaMethod
  open func maxMemory() -> Int64

  @JavaMethod
  open func exec(_ arg0: [String]) throws -> Process!

  @JavaMethod
  open func exec(_ arg0: String, _ arg1: [String], _ arg2: File?) throws -> Process!

  @JavaMethod
  open func exec(_ arg0: String) throws -> Process!

  @JavaMethod
  open func exec(_ arg0: String, _ arg1: [String]) throws -> Process!

  @JavaMethod
  open func exec(_ arg0: [String], _ arg1: [String]) throws -> Process!

  @JavaMethod
  open func exec(_ arg0: [String], _ arg1: [String], _ arg2: File?) throws -> Process!

  @JavaMethod
  open func halt(_ arg0: Int32)

  @JavaMethod
  open func addShutdownHook(_ arg0: Thread?)

  @JavaMethod
  open func removeShutdownHook(_ arg0: Thread?) -> Bool

  @JavaMethod
  open func totalMemory() -> Int64
}
extension Runtime {
  @JavaClass("java.lang.Runtime$Version", implements: Comparable.self)
  open class Version: JavaObject {
  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func version() -> List<JavaInteger>!

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: Runtime.Version?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open func update() -> Int32

  @JavaMethod
  open func major() -> Int32

  @JavaMethod
  open func minor() -> Int32

  @JavaMethod
  open func pre() -> JavaOptional<JavaString>!

  open func preOptional() -> JavaString? {
    Optional(javaOptional: pre())
  }

  @JavaMethod
  open func build() -> JavaOptional<JavaInteger>!

  open func buildOptional() -> JavaInteger? {
    Optional(javaOptional: build())
  }

  @JavaMethod
  open func optional() -> JavaOptional<JavaString>!

  open func optionalOptional() -> JavaString? {
    Optional(javaOptional: optional())
  }

  @JavaMethod
  open func feature() -> Int32

  @JavaMethod
  open func interim() -> Int32

  @JavaMethod
  open func equalsIgnoreOptional(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open func patch() -> Int32

  @JavaMethod
  open func security() -> Int32

  @JavaMethod
  open func compareToIgnoreOptional(_ arg0: Runtime.Version?) -> Int32
  }
}
extension JavaClass<Runtime.Version> {
  @JavaStaticMethod
  public func parse(_ arg0: String) -> Runtime.Version!
}
extension JavaClass<Runtime> {
  @JavaStaticMethod
  public func getRuntime() -> Runtime!

  @JavaStaticMethod
  public func version() -> Runtime.Version!
}
