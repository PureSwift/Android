// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension ProcessBuilder {
  @JavaClass("java.lang.ProcessBuilder$Redirect$Type")
  open class RedirectType: JavaObject {
      
    public enum TypeCases: Equatable {
        case PIPE
        case INHERIT
        case READ
        case WRITE
        case APPEND
    }
      
    public var enumValue: TypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.PIPE?.as(JavaObject.self)) {
        return TypeCases.PIPE
  } else if self.equals(classObj.INHERIT?.as(JavaObject.self)) {
        return TypeCases.INHERIT
  } else if self.equals(classObj.READ?.as(JavaObject.self)) {
        return TypeCases.READ
  } else if self.equals(classObj.WRITE?.as(JavaObject.self)) {
        return TypeCases.WRITE
  } else if self.equals(classObj.APPEND?.as(JavaObject.self)) {
        return TypeCases.APPEND
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: TypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RedirectType>(environment: _environment)
    switch enumValue {
      case .PIPE:
        if let PIPE = classObj.PIPE {
          self.init(javaHolder: PIPE.javaHolder)
        } else {
          fatalError("Enum value PIPE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INHERIT:
        if let INHERIT = classObj.INHERIT {
          self.init(javaHolder: INHERIT.javaHolder)
        } else {
          fatalError("Enum value INHERIT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .READ:
        if let READ = classObj.READ {
          self.init(javaHolder: READ.javaHolder)
        } else {
          fatalError("Enum value READ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WRITE:
        if let WRITE = classObj.WRITE {
          self.init(javaHolder: WRITE.javaHolder)
        } else {
          fatalError("Enum value WRITE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .APPEND:
        if let APPEND = classObj.APPEND {
          self.init(javaHolder: APPEND.javaHolder)
        } else {
          fatalError("Enum value APPEND was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}

extension JavaClass<ProcessBuilder.RedirectType> {
  @JavaStaticField(isFinal: true)
  public var PIPE: ProcessBuilder.RedirectType!

  @JavaStaticField(isFinal: true)
  public var INHERIT: ProcessBuilder.RedirectType!

  @JavaStaticField(isFinal: true)
  public var READ: ProcessBuilder.RedirectType!

  @JavaStaticField(isFinal: true)
  public var WRITE: ProcessBuilder.RedirectType!

  @JavaStaticField(isFinal: true)
  public var APPEND: ProcessBuilder.RedirectType!

  @JavaStaticMethod
  public func values() -> [ProcessBuilder.RedirectType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ProcessBuilder.RedirectType!
}
