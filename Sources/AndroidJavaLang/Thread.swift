// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.lang.Thread", implements: Runnable.self)
open class Thread: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: Runnable?, _ arg2: String, _ arg3: Int64, _ arg4: Bool, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: Runnable?, _ arg2: String, _ arg3: Int64, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: Runnable?, _ arg2: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Runnable?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: Runnable?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Runnable?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open func getStackTrace() -> [StackTraceElement?]

  @JavaMethod
  open func run()

  @JavaMethod
  open func interrupt()

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func clone() throws -> JavaObject!

  @JavaMethod
  open func join() throws

  @JavaMethod
  open func join(_ arg0: Int64) throws

  @JavaMethod
  open func join(_ arg0: Int64, _ arg1: Int32) throws

  @JavaMethod
  open func setContextClassLoader(_ arg0: JavaClassLoader?)

  @JavaMethod
  open func setPriority(_ arg0: Int32)

  @JavaMethod
  open func setDaemon(_ arg0: Bool)

  @JavaMethod
  open func start()

  @JavaMethod
  open func getThreadGroup() -> ThreadGroup!

  @JavaMethod
  open func getPriority() -> Int32

  @JavaMethod
  open func isDaemon() -> Bool

  @JavaMethod
  open func getContextClassLoader() -> JavaClassLoader!

  @JavaMethod
  open func isVirtual() -> Bool

  @JavaMethod
  open func isAlive() -> Bool

  @JavaMethod
  open func threadId() -> Int64

  @JavaMethod
  open func getUncaughtExceptionHandler() -> Thread.UncaughtExceptionHandler!

  @JavaMethod
  open func stop()

  @JavaMethod
  open func isInterrupted() -> Bool

  @JavaMethod
  open func setName(_ arg0: String)

  @JavaMethod
  open func checkAccess()

  @JavaMethod
  open func getId() -> Int64

  @JavaMethod
  open func getState() -> Thread.State!

  @JavaMethod
  open func setUncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?)
}
extension Thread {
  @JavaInterface("java.lang.Thread$Builder")
  public struct Builder {
  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func name(_ arg0: String) -> Thread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> Thread.Builder!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> Thread.Builder!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> Thread.Builder!
  }
}
extension Thread.Builder {
  @JavaInterface("java.lang.Thread$Builder$OfPlatform", extends: Thread.Builder.self)
  public struct OfPlatform {
  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> Thread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func name(_ arg0: String) -> Thread.Builder!

  @JavaMethod
  public func name(_ arg0: String) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func priority(_ arg0: Int32) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func group(_ arg0: ThreadGroup?) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func daemon() -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func daemon(_ arg0: Bool) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> Thread.Builder!

  @JavaMethod
  public func stackSize(_ arg0: Int64) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> Thread.Builder.OfPlatform!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> Thread.Builder!

  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!
  }
}
extension Thread.Builder {
  @JavaInterface("java.lang.Thread$Builder$OfVirtual", extends: Thread.Builder.self)
  public struct OfVirtual {
  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> Thread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> Thread.Builder.OfVirtual!

  @JavaMethod
  public func name(_ arg0: String) -> Thread.Builder!

  @JavaMethod
  public func name(_ arg0: String) -> Thread.Builder.OfVirtual!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> Thread.Builder!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> Thread.Builder.OfVirtual!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> Thread.Builder.OfVirtual!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> Thread.Builder!

  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!
  }
}
extension JavaClass<Thread> {
  @JavaStaticField(isFinal: true)
  public var MIN_PRIORITY: Int32

  @JavaStaticField(isFinal: true)
  public var NORM_PRIORITY: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_PRIORITY: Int32

  @JavaStaticMethod
  public func currentThread() -> Thread!

  @JavaStaticMethod
  public func onSpinWait()

  @JavaStaticMethod
  public func holdsLock(_ arg0: JavaObject?) -> Bool

  @JavaStaticMethod
  public func interrupted() -> Bool

  @JavaStaticMethod
  public func activeCount() -> Int32

  @JavaStaticMethod
  public func enumerate(_ arg0: [Thread?]) -> Int32

  @JavaStaticMethod
  public func yield()

  @JavaStaticMethod
  public func sleep(_ arg0: Int64) throws

  @JavaStaticMethod
  public func sleep(_ arg0: Int64, _ arg1: Int32) throws

  @JavaStaticMethod
  public func ofPlatform() -> Thread.Builder.OfPlatform!

  @JavaStaticMethod
  public func ofVirtual() -> Thread.Builder.OfVirtual!

  @JavaStaticMethod
  public func startVirtualThread(_ arg0: Runnable?) -> Thread!

  @JavaStaticMethod
  public func dumpStack()

  @JavaStaticMethod
  public func setDefaultUncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?)

  @JavaStaticMethod
  public func getDefaultUncaughtExceptionHandler() -> Thread.UncaughtExceptionHandler!
}
