// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.lang.AbstractStringBuilder", implements: Appendable.self, CharSequence.self)
open class AbstractStringBuilder: JavaObject {
  @JavaMethod
  open func length() -> Int32

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func append(_ arg0: CharSequence?) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: [UInt16]) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: JavaObject?) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: String) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: StringBuffer?) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: Int64) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: Float) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: Double) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: UInt16) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: Bool) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func append(_ arg0: CharSequence?, _ arg1: Int32, _ arg2: Int32) throws -> Appendable!

  @JavaMethod
  open func append(_ arg0: CharSequence?) throws -> Appendable!

  @JavaMethod
  open func append(_ arg0: UInt16) throws -> Appendable!

  @JavaMethod
  open func reverse() -> AbstractStringBuilder!

  @JavaMethod
  open func getChars(_ arg0: Int32, _ arg1: Int32, _ arg2: [UInt16], _ arg3: Int32)

  @JavaMethod
  open func indexOf(_ arg0: String, _ arg1: Int32) -> Int32

  @JavaMethod
  open func indexOf(_ arg0: String) -> Int32

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: [UInt16], _ arg2: Int32, _ arg3: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: CharSequence?, _ arg2: Int32, _ arg3: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: Bool) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: String) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: CharSequence?) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: [UInt16]) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: Int64) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: Float) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: UInt16) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: Double) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func insert(_ arg0: Int32, _ arg1: JavaObject?) -> AbstractStringBuilder!

  @JavaMethod
  open func charAt(_ arg0: Int32) -> UInt16

  @JavaMethod
  open func codePointAt(_ arg0: Int32) -> Int32

  @JavaMethod
  open func codePointBefore(_ arg0: Int32) -> Int32

  @JavaMethod
  open func codePointCount(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open func offsetByCodePoints(_ arg0: Int32, _ arg1: Int32) -> Int32

  @JavaMethod
  open func lastIndexOf(_ arg0: String, _ arg1: Int32) -> Int32

  @JavaMethod
  open func lastIndexOf(_ arg0: String) -> Int32

  @JavaMethod
  open func substring(_ arg0: Int32, _ arg1: Int32) -> String

  @JavaMethod
  open func substring(_ arg0: Int32) -> String

  @JavaMethod
  open func replace(_ arg0: Int32, _ arg1: Int32, _ arg2: String) -> AbstractStringBuilder!

  @JavaMethod
  open func `repeat`(_ arg0: Int32, _ arg1: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func `repeat`(_ arg0: CharSequence?, _ arg1: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func subSequence(_ arg0: Int32, _ arg1: Int32) -> CharSequence!

  @JavaMethod
  open func setLength(_ arg0: Int32)

  @JavaMethod
  open func capacity() -> Int32

  @JavaMethod
  open func ensureCapacity(_ arg0: Int32)

  @JavaMethod
  open func trimToSize()

  @JavaMethod
  open func setCharAt(_ arg0: Int32, _ arg1: UInt16)

  @JavaMethod
  open func appendCodePoint(_ arg0: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func delete(_ arg0: Int32, _ arg1: Int32) -> AbstractStringBuilder!

  @JavaMethod
  open func deleteCharAt(_ arg0: Int32) -> AbstractStringBuilder!
}
