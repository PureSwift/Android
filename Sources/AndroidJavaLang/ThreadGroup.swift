// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.lang.ThreadGroup", implements: Thread.UncaughtExceptionHandler.self)
open class ThreadGroup: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ThreadGroup?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open func interrupt()

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func list()

  @JavaMethod
  open func getParent() -> ThreadGroup!

  @JavaMethod
  open func setDaemon(_ arg0: Bool)

  @JavaMethod
  open func getMaxPriority() -> Int32

  @JavaMethod
  open func isDaemon() -> Bool

  @JavaMethod
  open func activeCount() -> Int32

  @JavaMethod
  open func enumerate(_ arg0: [ThreadGroup?], _ arg1: Bool) -> Int32

  @JavaMethod
  open func enumerate(_ arg0: [ThreadGroup?]) -> Int32

  @JavaMethod
  open func enumerate(_ arg0: [Thread?], _ arg1: Bool) -> Int32

  @JavaMethod
  open func enumerate(_ arg0: [Thread?]) -> Int32

  @JavaMethod
  open func uncaughtException(_ arg0: Thread?, _ arg1: Throwable?)

  @JavaMethod
  open func checkAccess()

  @JavaMethod
  open func parentOf(_ arg0: ThreadGroup?) -> Bool

  @JavaMethod
  open func activeGroupCount() -> Int32

  @JavaMethod
  open func setMaxPriority(_ arg0: Int32)

  @JavaMethod
  open func isDestroyed() -> Bool

  @JavaMethod
  open func destroy()
}
