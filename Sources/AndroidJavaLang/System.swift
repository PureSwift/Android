// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitFunction
import JavaRuntime

@JavaClass("java.lang.System")
open class System: JavaObject {

}
extension System {
  @JavaInterface("java.lang.System$Logger")
  public struct Logger {
  @JavaMethod
  public func getName() -> String

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: String, _ arg2: [JavaObject?])

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: JavaSupplier<JavaString>?, _ arg2: Throwable?)

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: String, _ arg2: Throwable?)

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: String)

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: JavaSupplier<JavaString>?)

  @JavaMethod
  public func log(_ arg0: System.Logger.Level?, _ arg1: JavaObject?)

  @JavaMethod
  public func isLoggable(_ arg0: System.Logger.Level?) -> Bool
  }
}
extension System.Logger {
  @JavaClass("java.lang.System$Logger$Level")
  open class Level: JavaObject {
    public enum LevelCases: Equatable {
      case ALL
  case TRACE
  case DEBUG
  case INFO
  case WARNING
  case ERROR
  case OFF
    }

    public var enumValue: LevelCases! {
      let classObj = self.javaClass
      if self.equals(classObj.ALL?.as(JavaObject.self)) {
        return LevelCases.ALL
  } else if self.equals(classObj.TRACE?.as(JavaObject.self)) {
        return LevelCases.TRACE
  } else if self.equals(classObj.DEBUG?.as(JavaObject.self)) {
        return LevelCases.DEBUG
  } else if self.equals(classObj.INFO?.as(JavaObject.self)) {
        return LevelCases.INFO
  } else if self.equals(classObj.WARNING?.as(JavaObject.self)) {
        return LevelCases.WARNING
  } else if self.equals(classObj.ERROR?.as(JavaObject.self)) {
        return LevelCases.ERROR
  } else if self.equals(classObj.OFF?.as(JavaObject.self)) {
        return LevelCases.OFF
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: LevelCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Level>(environment: _environment)
    switch enumValue {
      case .ALL:
        if let ALL = classObj.ALL {
          self.init(javaHolder: ALL.javaHolder)
        } else {
          fatalError("Enum value ALL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TRACE:
        if let TRACE = classObj.TRACE {
          self.init(javaHolder: TRACE.javaHolder)
        } else {
          fatalError("Enum value TRACE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DEBUG:
        if let DEBUG = classObj.DEBUG {
          self.init(javaHolder: DEBUG.javaHolder)
        } else {
          fatalError("Enum value DEBUG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INFO:
        if let INFO = classObj.INFO {
          self.init(javaHolder: INFO.javaHolder)
        } else {
          fatalError("Enum value INFO was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WARNING:
        if let WARNING = classObj.WARNING {
          self.init(javaHolder: WARNING.javaHolder)
        } else {
          fatalError("Enum value WARNING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ERROR:
        if let ERROR = classObj.ERROR {
          self.init(javaHolder: ERROR.javaHolder)
        } else {
          fatalError("Enum value ERROR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OFF:
        if let OFF = classObj.OFF {
          self.init(javaHolder: OFF.javaHolder)
        } else {
          fatalError("Enum value OFF was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }

  @JavaMethod
  open func getName() -> String

  @JavaMethod
  open func getSeverity() -> Int32
  }
}
extension JavaClass<System.Logger.Level> {
  @JavaStaticField(isFinal: true)
  public var ALL: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var TRACE: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var DEBUG: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var INFO: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var WARNING: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var ERROR: System.Logger.Level!

  @JavaStaticField(isFinal: true)
  public var OFF: System.Logger.Level!

  @JavaStaticMethod
  public func values() -> [System.Logger.Level?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> System.Logger.Level!
}
extension System {
  @JavaClass("java.lang.System$LoggerFinder")
  open class LoggerFinder: JavaObject {

  }
}
extension JavaClass<System.LoggerFinder> {
  @JavaStaticMethod
  public func getLoggerFinder() -> System.LoggerFinder!
}
extension JavaClass<System> {
  @JavaStaticField(isFinal: true)
  public var `in`: InputStream!

  @JavaStaticField(isFinal: true)
  public var out: PrintStream!

  @JavaStaticField(isFinal: true)
  public var err: PrintStream!

  @JavaStaticMethod
  public func exit(_ arg0: Int32)

  @JavaStaticMethod
  public func runFinalization()

  @JavaStaticMethod
  public func getProperty(_ arg0: String) -> String

  @JavaStaticMethod
  public func getProperty(_ arg0: String, _ arg1: String) -> String

  @JavaStaticMethod
  public func identityHashCode(_ arg0: JavaObject?) -> Int32

  @JavaStaticMethod
  public func currentTimeMillis() -> Int64

  @JavaStaticMethod
  public func nanoTime() -> Int64

  @JavaStaticMethod
  public func arraycopy(_ arg0: JavaObject?, _ arg1: Int32, _ arg2: JavaObject?, _ arg3: Int32, _ arg4: Int32)

  @JavaStaticMethod
  public func load(_ arg0: String)

  @JavaStaticMethod
  public func loadLibrary(_ arg0: String)

  @JavaStaticMethod
  public func console() -> Console!

  @JavaStaticMethod
  public func lineSeparator() -> String

  @JavaStaticMethod
  public func setProperty(_ arg0: String, _ arg1: String) -> String

  @JavaStaticMethod
  public func getenv(_ arg0: String) -> String

  @JavaStaticMethod
  public func getLogger(_ arg0: String) -> System.Logger!

  @JavaStaticMethod
  public func gc()

  @JavaStaticMethod
  public func setIn(_ arg0: InputStream?)

  @JavaStaticMethod
  public func setOut(_ arg0: PrintStream?)

  @JavaStaticMethod
  public func setErr(_ arg0: PrintStream?)

  @JavaStaticMethod
  public func setSecurityManager(_ arg0: SecurityManager?)

  @JavaStaticMethod
  public func getSecurityManager() -> SecurityManager!

  @JavaStaticMethod
  public func clearProperty(_ arg0: String) -> String

  @JavaStaticMethod
  public func mapLibraryName(_ arg0: String) -> String
}
