// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("java.lang.ProcessBuilder")
open class ProcessBuilder: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: List<JavaString>?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [String], environment: JNIEnvironment? = nil)

  @JavaMethod
  open func redirectInput() -> ProcessBuilder.Redirect!

  @JavaMethod
  open func redirectInput(_ arg0: ProcessBuilder.Redirect?) -> ProcessBuilder!

  @JavaMethod
  open func redirectInput(_ arg0: File?) -> ProcessBuilder!

  @JavaMethod
  open func redirectOutput() -> ProcessBuilder.Redirect!

  @JavaMethod
  open func redirectOutput(_ arg0: ProcessBuilder.Redirect?) -> ProcessBuilder!

  @JavaMethod
  open func redirectOutput(_ arg0: File?) -> ProcessBuilder!

  @JavaMethod
  open func redirectError(_ arg0: File?) -> ProcessBuilder!

  @JavaMethod
  open func redirectError(_ arg0: ProcessBuilder.Redirect?) -> ProcessBuilder!

  @JavaMethod
  open func redirectError() -> ProcessBuilder.Redirect!

  @JavaMethod
  open func redirectErrorStream(_ arg0: Bool) -> ProcessBuilder!

  @JavaMethod
  open func redirectErrorStream() -> Bool

  @JavaMethod
  open func inheritIO() -> ProcessBuilder!

  @JavaMethod
  open func directory() -> File!

  @JavaMethod
  open func directory(_ arg0: File?) -> ProcessBuilder!

  @JavaMethod
  open func start() throws -> Process!

  @JavaMethod
  open func command(_ arg0: List<JavaString>?) -> ProcessBuilder!

  @JavaMethod
  open func command(_ arg0: [String]) -> ProcessBuilder!

  @JavaMethod
  open func command() -> List<JavaString>!
}
extension JavaClass<ProcessBuilder> {
  @JavaStaticMethod
  public func startPipeline(_ arg0: List<ProcessBuilder>?) throws -> List<Process>!
}
