// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.animation.Animator", implements: Cloneable.self)
open class Animator: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setDuration(_ arg0: Int64) -> Animator!

  @JavaMethod
  open func setStartDelay(_ arg0: Int64)

  @JavaMethod
  open func getStartDelay() -> Int64

  @JavaMethod
  open func setInterpolator(_ arg0: TimeInterpolator?)

  @JavaMethod
  open func getInterpolator() -> TimeInterpolator!

  @JavaMethod
  open func isRunning() -> Bool

  @JavaMethod
  open func setupStartValues()

  @JavaMethod
  open func setupEndValues()

  @JavaMethod
  open func pause()

  @JavaMethod
  open func resume()

  @JavaMethod
  open func getTotalDuration() -> Int64

  @JavaMethod
  open func isPaused() -> Bool

  @JavaMethod
  open func addListener(_ arg0: Animator.AnimatorListener?)

  @JavaMethod
  open func removeListener(_ arg0: Animator.AnimatorListener?)

  @JavaMethod
  open func getListeners() -> ArrayList<Animator.AnimatorListener>!

  @JavaMethod
  open func addPauseListener(_ arg0: Animator.AnimatorPauseListener?)

  @JavaMethod
  open func removePauseListener(_ arg0: Animator.AnimatorPauseListener?)

  @JavaMethod
  open func removeAllListeners()

  @JavaMethod
  open override func clone() -> Animator!

  @JavaMethod
  open func end()

  @JavaMethod
  open func start()

  @JavaMethod
  open func cancel()

  @JavaMethod
  open func isStarted() -> Bool

  @JavaMethod
  open func setTarget(_ arg0: JavaObject?)

  @JavaMethod
  open func getDuration() -> Int64
}
extension JavaClass<Animator> {
  @JavaStaticField(isFinal: true)
  public var DURATION_INFINITE: Int64
}
