// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidGraphics
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("com.google.android.material.drawable.DrawableUtils")
open class DrawableUtils: JavaObject {

}
extension JavaClass<DrawableUtils> {
  @JavaStaticField(isFinal: true)
  public var INTRINSIC_SIZE: Int32

  @JavaStaticMethod
  public func updateTintFilter(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> PorterDuffColorFilter!

  @JavaStaticMethod
  public func parseDrawableXml(_ arg0: Context?, _ arg1: Int32, _ arg2: CharSequence?) -> AttributeSet!

  @JavaStaticMethod
  public func setRippleDrawableRadius(_ arg0: RippleDrawable?, _ arg1: Int32)

  @JavaStaticMethod
  public func createTintableDrawableIfNeeded(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> Drawable!

  @JavaStaticMethod
  public func createTintableMutatedDrawableIfNeeded(_ arg0: Drawable?, _ arg1: ColorStateList?, _ arg2: PorterDuff.Mode?) -> Drawable!

  @JavaStaticMethod
  public func compositeTwoLayeredDrawable(_ arg0: Drawable?, _ arg1: Drawable?, _ arg2: Int32, _ arg3: Int32) -> Drawable!

  @JavaStaticMethod
  public func compositeTwoLayeredDrawable(_ arg0: Drawable?, _ arg1: Drawable?) -> Drawable!

  @JavaStaticMethod
  public func getCheckedState(_ arg0: [Int32]) -> [Int32]

  @JavaStaticMethod
  public func getUncheckedState(_ arg0: [Int32]) -> [Int32]

  @JavaStaticMethod
  public func setOutlineToPath(_ arg0: Outline?, _ arg1: Path?)

  @JavaStaticMethod
  public func getColorStateListOrNull(_ arg0: Drawable?) -> ColorStateList!

  @JavaStaticMethod
  public func setTint(_ arg0: Drawable?, _ arg1: Int32)
}
