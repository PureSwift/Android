// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension MaterialDatePicker {
  @JavaClass("com.google.android.material.datepicker.MaterialDatePicker$Builder")
  open class Builder: JavaObject {
  @JavaMethod
  open func setSelection(_ arg0: JavaObject?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setTheme(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setCalendarConstraints(_ arg0: CalendarConstraints?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setDayViewDecorator(_ arg0: DayViewDecorator?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setTitleText(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setTitleText(_ arg0: CharSequence?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setPositiveButtonText(_ arg0: CharSequence?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setPositiveButtonText(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setPositiveButtonContentDescription(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setPositiveButtonContentDescription(_ arg0: CharSequence?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setNegativeButtonText(_ arg0: CharSequence?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setNegativeButtonText(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setNegativeButtonContentDescription(_ arg0: CharSequence?) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setNegativeButtonContentDescription(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func setInputMode(_ arg0: Int32) -> MaterialDatePicker.Builder!

  @JavaMethod
  open func build() -> MaterialDatePicker!
  }
}
extension JavaClass<MaterialDatePicker.Builder> {
  @JavaStaticMethod
  public func customDatePicker<(_ arg0: DateSelector?) -> MaterialDatePicker.Builder!

  @JavaStaticMethod
  public func datePicker() -> MaterialDatePicker.Builder!
}
