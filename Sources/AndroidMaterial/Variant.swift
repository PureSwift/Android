// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

@JavaClass("com.google.android.material.color.utilities.Variant")
open class Variant: Enum {
  public enum VariantCases: Equatable {
    case MONOCHROME
    case NEUTRAL
    case TONAL_SPOT
    case VIBRANT
    case EXPRESSIVE
    case FIDELITY
    case CONTENT
    case RAINBOW
    case FRUIT_SALAD
  }

  public var enumValue: VariantCases! {
    let classObj = self.javaClass
    if self.equals(classObj.MONOCHROME?.as(JavaObject.self)) {
      return VariantCases.MONOCHROME
    } else if self.equals(classObj.NEUTRAL?.as(JavaObject.self)) {
      return VariantCases.NEUTRAL
    } else if self.equals(classObj.TONAL_SPOT?.as(JavaObject.self)) {
      return VariantCases.TONAL_SPOT
    } else if self.equals(classObj.VIBRANT?.as(JavaObject.self)) {
      return VariantCases.VIBRANT
    } else if self.equals(classObj.EXPRESSIVE?.as(JavaObject.self)) {
      return VariantCases.EXPRESSIVE
    } else if self.equals(classObj.FIDELITY?.as(JavaObject.self)) {
      return VariantCases.FIDELITY
    } else if self.equals(classObj.CONTENT?.as(JavaObject.self)) {
      return VariantCases.CONTENT
    } else if self.equals(classObj.RAINBOW?.as(JavaObject.self)) {
      return VariantCases.RAINBOW
    } else if self.equals(classObj.FRUIT_SALAD?.as(JavaObject.self)) {
      return VariantCases.FRUIT_SALAD
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: VariantCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Variant>(environment: _environment)
    switch enumValue {
      case .MONOCHROME:
        if let MONOCHROME = classObj.MONOCHROME {
          self.init(javaHolder: MONOCHROME.javaHolder)
        } else {
          fatalError("Enum value MONOCHROME was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NEUTRAL:
        if let NEUTRAL = classObj.NEUTRAL {
          self.init(javaHolder: NEUTRAL.javaHolder)
        } else {
          fatalError("Enum value NEUTRAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .TONAL_SPOT:
        if let TONAL_SPOT = classObj.TONAL_SPOT {
          self.init(javaHolder: TONAL_SPOT.javaHolder)
        } else {
          fatalError("Enum value TONAL_SPOT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .VIBRANT:
        if let VIBRANT = classObj.VIBRANT {
          self.init(javaHolder: VIBRANT.javaHolder)
        } else {
          fatalError("Enum value VIBRANT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXPRESSIVE:
        if let EXPRESSIVE = classObj.EXPRESSIVE {
          self.init(javaHolder: EXPRESSIVE.javaHolder)
        } else {
          fatalError("Enum value EXPRESSIVE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FIDELITY:
        if let FIDELITY = classObj.FIDELITY {
          self.init(javaHolder: FIDELITY.javaHolder)
        } else {
          fatalError("Enum value FIDELITY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CONTENT:
        if let CONTENT = classObj.CONTENT {
          self.init(javaHolder: CONTENT.javaHolder)
        } else {
          fatalError("Enum value CONTENT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RAINBOW:
        if let RAINBOW = classObj.RAINBOW {
          self.init(javaHolder: RAINBOW.javaHolder)
        } else {
          fatalError("Enum value RAINBOW was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FRUIT_SALAD:
        if let FRUIT_SALAD = classObj.FRUIT_SALAD {
          self.init(javaHolder: FRUIT_SALAD.javaHolder)
        } else {
          fatalError("Enum value FRUIT_SALAD was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension Variant {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<Variant> {
  @JavaStaticField(isFinal: true)
  public var MONOCHROME: Variant!

  @JavaStaticField(isFinal: true)
  public var NEUTRAL: Variant!

  @JavaStaticField(isFinal: true)
  public var TONAL_SPOT: Variant!

  @JavaStaticField(isFinal: true)
  public var VIBRANT: Variant!

  @JavaStaticField(isFinal: true)
  public var EXPRESSIVE: Variant!

  @JavaStaticField(isFinal: true)
  public var FIDELITY: Variant!

  @JavaStaticField(isFinal: true)
  public var CONTENT: Variant!

  @JavaStaticField(isFinal: true)
  public var RAINBOW: Variant!

  @JavaStaticField(isFinal: true)
  public var FRUIT_SALAD: Variant!

  @JavaStaticMethod
  public func values() -> [Variant?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Variant!
}
