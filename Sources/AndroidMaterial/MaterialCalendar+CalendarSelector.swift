// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaLang
import JavaRuntime

extension MaterialCalendar {
  @JavaClass("com.google.android.material.datepicker.MaterialCalendar$CalendarSelector")
  open class CalendarSelector: Enum {
    public enum CalendarSelectorCases: Equatable {
      case DAY
  case YEAR
    }

    public var enumValue: CalendarSelectorCases! {
      let classObj = self.javaClass
      if self.equals(classObj.DAY?.as(JavaObject.self)) {
        return CalendarSelectorCases.DAY
  } else if self.equals(classObj.YEAR?.as(JavaObject.self)) {
        return CalendarSelectorCases.YEAR
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: CalendarSelectorCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<CalendarSelector>(environment: _environment)
    switch enumValue {
      case .DAY:
        if let DAY = classObj.DAY {
          self.init(javaHolder: DAY.javaHolder)
        } else {
          fatalError("Enum value DAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .YEAR:
        if let YEAR = classObj.YEAR {
          self.init(javaHolder: YEAR.javaHolder)
        } else {
          fatalError("Enum value YEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<MaterialCalendar.CalendarSelector> {
  @JavaStaticField(isFinal: true)
  public var DAY: MaterialCalendar.CalendarSelector!

  @JavaStaticField(isFinal: true)
  public var YEAR: MaterialCalendar.CalendarSelector!

  @JavaStaticMethod
  public func values() -> [MaterialCalendar.CalendarSelector?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> MaterialCalendar.CalendarSelector!
}
