// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("android.view.animation.LayoutAnimationController")
open class LayoutAnimationController: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Animation?, _ arg1: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Animation?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: AttributeSet?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func start()

  @JavaMethod
  open func isDone() -> Bool

  @JavaMethod
  open func getAnimationForView(_ arg0: View?) -> Animation!

  @JavaMethod
  open func getTransformedIndex(_ arg0: LayoutAnimationController.AnimationParameters?) -> Int32

  @JavaMethod
  open func getInterpolator() -> Interpolator!

  @JavaMethod
  open func setInterpolator(_ arg0: Interpolator?)

  @JavaMethod
  open func setInterpolator(_ arg0: Context?, _ arg1: Int32)

  @JavaMethod
  open func getAnimation() -> Animation!

  @JavaMethod
  open func setAnimation(_ arg0: Animation?)

  @JavaMethod
  open func setAnimation(_ arg0: Context?, _ arg1: Int32)

  @JavaMethod
  open func willOverlap() -> Bool

  @JavaMethod
  open func getDelayForView(_ arg0: View?) -> Int64

  @JavaMethod
  open func getOrder() -> Int32

  @JavaMethod
  open func setOrder(_ arg0: Int32)

  @JavaMethod
  open func getDelay() -> Float

  @JavaMethod
  open func setDelay(_ arg0: Float)
}
extension JavaClass<LayoutAnimationController> {
  @JavaStaticField(isFinal: true)
  public var ORDER_NORMAL: Int32

  @JavaStaticField(isFinal: true)
  public var ORDER_RANDOM: Int32

  @JavaStaticField(isFinal: true)
  public var ORDER_REVERSE: Int32
}
