// Auto-generated by Java-to-Swift wrapper generator.
import AndroidGraphics
import JavaKit
import JavaRuntime

extension WindowInsets {
  @JavaClass("android.view.WindowInsets$Builder")
  open class Builder: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: WindowInsets?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func build() -> WindowInsets!

  @JavaMethod
  open func setSystemWindowInsets(_ arg0: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setSystemGestureInsets(_ arg0: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setMandatorySystemGestureInsets(_ arg0: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setTappableElementInsets(_ arg0: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setInsetsIgnoringVisibility(_ arg0: Int32, _ arg1: Insets?) throws -> WindowInsets.Builder!

  @JavaMethod
  open func setPrivacyIndicatorBounds(_ arg0: Rect?) -> WindowInsets.Builder!

  @JavaMethod
  open func setInsets(_ arg0: Int32, _ arg1: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setVisible(_ arg0: Int32, _ arg1: Bool) -> WindowInsets.Builder!

  @JavaMethod
  open func setStableInsets(_ arg0: Insets?) -> WindowInsets.Builder!

  @JavaMethod
  open func setDisplayCutout(_ arg0: DisplayCutout?) -> WindowInsets.Builder!

  @JavaMethod
  open func setRoundedCorner(_ arg0: Int32, _ arg1: RoundedCorner?) -> WindowInsets.Builder!
  }
}
