// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidUtil
import JavaKit
import JavaRuntime

extension ViewGroup {
  @JavaClass("android.view.ViewGroup$MarginLayoutParams")
  open class MarginLayoutParams: ViewGroup.LayoutParams {
  @JavaField(isFinal: false)
  public var bottomMargin: Int32

  @JavaField(isFinal: false)
  public var leftMargin: Int32

  @JavaField(isFinal: false)
  public var rightMargin: Int32

  @JavaField(isFinal: false)
  public var topMargin: Int32

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ViewGroup.LayoutParams?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ViewGroup.MarginLayoutParams?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Context?, _ arg1: AttributeSet?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func resolveLayoutDirection(_ arg0: Int32)

  @JavaMethod
  open func setLayoutDirection(_ arg0: Int32)

  @JavaMethod
  open func getLayoutDirection() -> Int32

  @JavaMethod
  open func setMargins(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open func setMarginStart(_ arg0: Int32)

  @JavaMethod
  open func getMarginStart() -> Int32

  @JavaMethod
  open func setMarginEnd(_ arg0: Int32)

  @JavaMethod
  open func getMarginEnd() -> Int32

  @JavaMethod
  open func isMarginRelative() -> Bool
  }
}
extension JavaClass<ViewGroup.MarginLayoutParams> {
  @JavaStaticField(isFinal: true)
  public var FILL_PARENT: Int32

  @JavaStaticField(isFinal: true)
  public var MATCH_PARENT: Int32

  @JavaStaticField(isFinal: true)
  public var WRAP_CONTENT: Int32
}
