// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension ViewDebug {
  @JavaClass("android.view.ViewDebug$RecyclerTraceType")
  open class RecyclerTraceType: Enum {
    public enum RecyclerTraceTypeCases: Equatable {
      case NEW_VIEW
  case BIND_VIEW
  case RECYCLE_FROM_ACTIVE_HEAP
  case RECYCLE_FROM_SCRAP_HEAP
  case MOVE_TO_SCRAP_HEAP
  case MOVE_FROM_ACTIVE_TO_SCRAP_HEAP
    }

    public var enumValue: RecyclerTraceTypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.NEW_VIEW?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.NEW_VIEW
  } else if self.equals(classObj.BIND_VIEW?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.BIND_VIEW
  } else if self.equals(classObj.RECYCLE_FROM_ACTIVE_HEAP?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.RECYCLE_FROM_ACTIVE_HEAP
  } else if self.equals(classObj.RECYCLE_FROM_SCRAP_HEAP?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.RECYCLE_FROM_SCRAP_HEAP
  } else if self.equals(classObj.MOVE_TO_SCRAP_HEAP?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.MOVE_TO_SCRAP_HEAP
  } else if self.equals(classObj.MOVE_FROM_ACTIVE_TO_SCRAP_HEAP?.as(JavaObject.self)) {
        return RecyclerTraceTypeCases.MOVE_FROM_ACTIVE_TO_SCRAP_HEAP
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: RecyclerTraceTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RecyclerTraceType>(environment: _environment)
    switch enumValue {
      case .NEW_VIEW:
        if let NEW_VIEW = classObj.NEW_VIEW {
          self.init(javaHolder: NEW_VIEW.javaHolder)
        } else {
          fatalError("Enum value NEW_VIEW was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BIND_VIEW:
        if let BIND_VIEW = classObj.BIND_VIEW {
          self.init(javaHolder: BIND_VIEW.javaHolder)
        } else {
          fatalError("Enum value BIND_VIEW was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RECYCLE_FROM_ACTIVE_HEAP:
        if let RECYCLE_FROM_ACTIVE_HEAP = classObj.RECYCLE_FROM_ACTIVE_HEAP {
          self.init(javaHolder: RECYCLE_FROM_ACTIVE_HEAP.javaHolder)
        } else {
          fatalError("Enum value RECYCLE_FROM_ACTIVE_HEAP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RECYCLE_FROM_SCRAP_HEAP:
        if let RECYCLE_FROM_SCRAP_HEAP = classObj.RECYCLE_FROM_SCRAP_HEAP {
          self.init(javaHolder: RECYCLE_FROM_SCRAP_HEAP.javaHolder)
        } else {
          fatalError("Enum value RECYCLE_FROM_SCRAP_HEAP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MOVE_TO_SCRAP_HEAP:
        if let MOVE_TO_SCRAP_HEAP = classObj.MOVE_TO_SCRAP_HEAP {
          self.init(javaHolder: MOVE_TO_SCRAP_HEAP.javaHolder)
        } else {
          fatalError("Enum value MOVE_TO_SCRAP_HEAP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MOVE_FROM_ACTIVE_TO_SCRAP_HEAP:
        if let MOVE_FROM_ACTIVE_TO_SCRAP_HEAP = classObj.MOVE_FROM_ACTIVE_TO_SCRAP_HEAP {
          self.init(javaHolder: MOVE_FROM_ACTIVE_TO_SCRAP_HEAP.javaHolder)
        } else {
          fatalError("Enum value MOVE_FROM_ACTIVE_TO_SCRAP_HEAP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<ViewDebug.RecyclerTraceType> {
  @JavaStaticField(isFinal: true)
  public var NEW_VIEW: ViewDebug.RecyclerTraceType!

  @JavaStaticField(isFinal: true)
  public var BIND_VIEW: ViewDebug.RecyclerTraceType!

  @JavaStaticField(isFinal: true)
  public var RECYCLE_FROM_ACTIVE_HEAP: ViewDebug.RecyclerTraceType!

  @JavaStaticField(isFinal: true)
  public var RECYCLE_FROM_SCRAP_HEAP: ViewDebug.RecyclerTraceType!

  @JavaStaticField(isFinal: true)
  public var MOVE_TO_SCRAP_HEAP: ViewDebug.RecyclerTraceType!

  @JavaStaticField(isFinal: true)
  public var MOVE_FROM_ACTIVE_TO_SCRAP_HEAP: ViewDebug.RecyclerTraceType!

  @JavaStaticMethod
  public func values() -> [ViewDebug.RecyclerTraceType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ViewDebug.RecyclerTraceType!
}
