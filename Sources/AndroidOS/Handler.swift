// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.os.Handler")
open class Handler: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Handler.Callback?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Looper?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Looper?, _ arg1: Handler.Callback?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func handleMessage(_ arg0: Message?)

  @JavaMethod
  open func dispatchMessage(_ arg0: Message?)

  @JavaMethod
  open func getMessageName(_ arg0: Message?) -> String

  @JavaMethod
  open func obtainMessage() -> Message!

  @JavaMethod
  open func obtainMessage(_ arg0: Int32) -> Message!

  @JavaMethod
  open func obtainMessage(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: JavaObject?) -> Message!

  @JavaMethod
  open func obtainMessage(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Message!

  @JavaMethod
  open func obtainMessage(_ arg0: Int32, _ arg1: JavaObject?) -> Message!

  @JavaMethod
  open func postAtTime(_ arg0: Runnable?, _ arg1: Int64) -> Bool

  @JavaMethod
  open func postAtTime(_ arg0: Runnable?, _ arg1: JavaObject?, _ arg2: Int64) -> Bool

  @JavaMethod
  open func postDelayed(_ arg0: Runnable?, _ arg1: JavaObject?, _ arg2: Int64) -> Bool

  @JavaMethod
  open func postDelayed(_ arg0: Runnable?, _ arg1: Int64) -> Bool

  @JavaMethod
  open func postAtFrontOfQueue(_ arg0: Runnable?) -> Bool

  @JavaMethod
  open func removeCallbacks(_ arg0: Runnable?, _ arg1: JavaObject?)

  @JavaMethod
  open func removeCallbacks(_ arg0: Runnable?)

  @JavaMethod
  open func sendMessage(_ arg0: Message?) -> Bool

  @JavaMethod
  open func sendEmptyMessage(_ arg0: Int32) -> Bool

  @JavaMethod
  open func sendEmptyMessageDelayed(_ arg0: Int32, _ arg1: Int64) -> Bool

  @JavaMethod
  open func sendEmptyMessageAtTime(_ arg0: Int32, _ arg1: Int64) -> Bool

  @JavaMethod
  open func sendMessageDelayed(_ arg0: Message?, _ arg1: Int64) -> Bool

  @JavaMethod
  open func sendMessageAtTime(_ arg0: Message?, _ arg1: Int64) -> Bool

  @JavaMethod
  open func sendMessageAtFrontOfQueue(_ arg0: Message?) -> Bool

  @JavaMethod
  open func removeMessages(_ arg0: Int32)

  @JavaMethod
  open func removeMessages(_ arg0: Int32, _ arg1: JavaObject?)

  @JavaMethod
  open func removeCallbacksAndMessages(_ arg0: JavaObject?)

  @JavaMethod
  open func hasCallbacks(_ arg0: Runnable?) -> Bool

  @JavaMethod
  open func getLooper() -> Looper!

  @JavaMethod
  open func hasMessages(_ arg0: Int32, _ arg1: JavaObject?) -> Bool

  @JavaMethod
  open func hasMessages(_ arg0: Int32) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func post(_ arg0: Runnable?) -> Bool
}
extension JavaClass<Handler> {
  @JavaStaticMethod
  public func createAsync(_ arg0: Looper?) -> Handler!

  @JavaStaticMethod
  public func createAsync(_ arg0: Looper?, _ arg1: Handler.Callback?) -> Handler!
}
