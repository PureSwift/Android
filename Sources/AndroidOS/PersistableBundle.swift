// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.os.PersistableBundle", implements: Cloneable.self, Parcelable.self)
open class PersistableBundle: BaseBundle {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: PersistableBundle?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func putPersistableBundle(_ arg0: String, _ arg1: PersistableBundle?)

  @JavaMethod
  open func writeToStream(_ arg0: OutputStream?) throws

  @JavaMethod
  open func getPersistableBundle(_ arg0: String) -> PersistableBundle!

  @JavaMethod
  open func describeContents() -> Int32

  @JavaMethod
  open func writeToParcel(_ arg0: Parcel?, _ arg1: Int32)

  @JavaMethod
  open func deepCopy() -> PersistableBundle!

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func clone() -> JavaObject!
}
extension JavaClass<PersistableBundle> {
  @JavaStaticField(isFinal: true)
  public var CREATOR: Parcelable.Creator<PersistableBundle>!

  @JavaStaticField(isFinal: true)
  public var EMPTY: PersistableBundle!

  @JavaStaticField(isFinal: true)
  public var CONTENTS_FILE_DESCRIPTOR: Int32

  @JavaStaticField(isFinal: true)
  public var PARCELABLE_WRITE_RETURN_VALUE: Int32

  @JavaStaticMethod
  public func readFromStream(_ arg0: InputStream?) throws -> PersistableBundle!
}
