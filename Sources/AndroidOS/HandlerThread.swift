// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.os.HandlerThread")
open class HandlerThread: Thread {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getLooper() -> Looper!

  @JavaMethod
  open func onLooperPrepared()

  @JavaMethod
  open func quit() -> Bool

  @JavaMethod
  open func quitSafely() -> Bool

  @JavaMethod
  open override func run()

  @JavaMethod
  open func getThreadId() -> Int32
}
extension HandlerThread {
  @JavaInterface("java.lang.Thread$Builder")
  public struct Builder {
  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func name(_ arg0: String) -> HandlerThread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> HandlerThread.Builder!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> HandlerThread.Builder!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> HandlerThread.Builder!
  }
}
extension HandlerThread.Builder {
  @JavaInterface("java.lang.Thread$Builder$OfPlatform", extends: HandlerThread.Builder.self)
  public struct OfPlatform {
  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> HandlerThread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func name(_ arg0: String) -> HandlerThread.Builder!

  @JavaMethod
  public func name(_ arg0: String) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func priority(_ arg0: Int32) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func group(_ arg0: ThreadGroup?) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func daemon() -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func daemon(_ arg0: Bool) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> HandlerThread.Builder!

  @JavaMethod
  public func stackSize(_ arg0: Int64) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> HandlerThread.Builder.OfPlatform!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> HandlerThread.Builder!

  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!
  }
}
extension HandlerThread.Builder {
  @JavaInterface("java.lang.Thread$Builder$OfVirtual", extends: HandlerThread.Builder.self)
  public struct OfVirtual {
  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> HandlerThread.Builder!

  @JavaMethod
  public func name(_ arg0: String, _ arg1: Int64) -> HandlerThread.Builder.OfVirtual!

  @JavaMethod
  public func name(_ arg0: String) -> HandlerThread.Builder!

  @JavaMethod
  public func name(_ arg0: String) -> HandlerThread.Builder.OfVirtual!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> HandlerThread.Builder!

  @JavaMethod
  public func uncaughtExceptionHandler(_ arg0: Thread.UncaughtExceptionHandler?) -> HandlerThread.Builder.OfVirtual!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> HandlerThread.Builder.OfVirtual!

  @JavaMethod
  public func inheritInheritableThreadLocals(_ arg0: Bool) -> HandlerThread.Builder!

  @JavaMethod
  public func unstarted(_ arg0: Runnable?) -> Thread!

  @JavaMethod
  public func start(_ arg0: Runnable?) -> Thread!
  }
}
extension JavaClass<HandlerThread> {
  @JavaStaticField(isFinal: true)
  public var MIN_PRIORITY: Int32

  @JavaStaticField(isFinal: true)
  public var NORM_PRIORITY: Int32

  @JavaStaticField(isFinal: true)
  public var MAX_PRIORITY: Int32
}
