// Auto-generated by Java-to-Swift wrapper generator.
import JavaUtil
import JavaKit
import JavaRuntime

extension Debug {
  @JavaClass("android.os.Debug$MemoryInfo", implements: Parcelable.self)
  open class MemoryInfo: JavaObject {
  @JavaField(isFinal: false)
  public var dalvikPrivateDirty: Int32

  @JavaField(isFinal: false)
  public var dalvikPss: Int32

  @JavaField(isFinal: false)
  public var dalvikSharedDirty: Int32

  @JavaField(isFinal: false)
  public var nativePrivateDirty: Int32

  @JavaField(isFinal: false)
  public var nativePss: Int32

  @JavaField(isFinal: false)
  public var nativeSharedDirty: Int32

  @JavaField(isFinal: false)
  public var otherPrivateDirty: Int32

  @JavaField(isFinal: false)
  public var otherPss: Int32

  @JavaField(isFinal: false)
  public var otherSharedDirty: Int32

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getTotalPss() -> Int32

  @JavaMethod
  open func getTotalSwappablePss() -> Int32

  @JavaMethod
  open func getTotalPrivateDirty() -> Int32

  @JavaMethod
  open func getTotalSharedDirty() -> Int32

  @JavaMethod
  open func getTotalPrivateClean() -> Int32

  @JavaMethod
  open func getTotalSharedClean() -> Int32

  @JavaMethod
  open func getMemoryStat(_ arg0: String) -> String

  @JavaMethod
  open func getMemoryStats() -> Map<JavaString, JavaString>!

  @JavaMethod
  open func describeContents() -> Int32

  @JavaMethod
  open func writeToParcel(_ arg0: Parcel?, _ arg1: Int32)

  @JavaMethod
  open func readFromParcel(_ arg0: Parcel?)
  }
}
extension JavaClass<Debug.MemoryInfo> {
  @JavaStaticField(isFinal: true)
  public var CREATOR: Parcelable.Creator<Debug.MemoryInfo>!

  @JavaStaticField(isFinal: true)
  public var CONTENTS_FILE_DESCRIPTOR: Int32

  @JavaStaticField(isFinal: true)
  public var PARCELABLE_WRITE_RETURN_VALUE: Int32
}
