// Auto-generated by Java-to-Swift wrapper generator.
import AndroidOS
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.content.pm.LauncherApps")
open class LauncherApps: JavaObject {
  @JavaMethod
  open func resolveActivity(_ arg0: Intent?, _ arg1: UserHandle?) -> LauncherActivityInfo!

  @JavaMethod
  open func getProfiles() -> List<UserHandle>!

  @JavaMethod
  open func getActivityList(_ arg0: String, _ arg1: UserHandle?) -> List<LauncherActivityInfo>!

  @JavaMethod
  open func getShortcutConfigActivityList(_ arg0: String, _ arg1: UserHandle?) -> List<LauncherActivityInfo>!

  @JavaMethod
  open func getShortcutConfigActivityIntent(_ arg0: LauncherActivityInfo?) -> IntentSender!

  @JavaMethod
  open func isPackageEnabled(_ arg0: String, _ arg1: UserHandle?) -> Bool

  @JavaMethod
  open func getSuspendedPackageLauncherExtras(_ arg0: String, _ arg1: UserHandle?) -> Bundle!

  @JavaMethod
  open func shouldHideFromSuggestions(_ arg0: String, _ arg1: UserHandle?) -> Bool

  @JavaMethod
  open func getApplicationInfo(_ arg0: String, _ arg1: Int32, _ arg2: UserHandle?) throws -> ApplicationInfo!

  @JavaMethod
  open func isActivityEnabled(_ arg0: ComponentName?, _ arg1: UserHandle?) -> Bool

  @JavaMethod
  open func hasShortcutHostPermission() -> Bool

  @JavaMethod
  open func getShortcuts(_ arg0: LauncherApps.ShortcutQuery?, _ arg1: UserHandle?) -> List<ShortcutInfo>!

  @JavaMethod
  open func pinShortcuts(_ arg0: String, _ arg1: List<JavaString>?, _ arg2: UserHandle?)

  @JavaMethod
  open func registerCallback(_ arg0: LauncherApps.Callback?)

  @JavaMethod
  open func registerCallback(_ arg0: LauncherApps.Callback?, _ arg1: Handler?)

  @JavaMethod
  open func unregisterCallback(_ arg0: LauncherApps.Callback?)

  @JavaMethod
  open func unregisterPackageInstallerSessionCallback(_ arg0: PackageInstaller.SessionCallback?)

  @JavaMethod
  open func getAllPackageInstallerSessions() -> List<PackageInstaller.SessionInfo>!

  @JavaMethod
  open func getPinItemRequest(_ arg0: Intent?) -> LauncherApps.PinItemRequest!
}
extension JavaClass<LauncherApps> {
  @JavaStaticField(isFinal: true)
  public var ACTION_CONFIRM_PIN_APPWIDGET: String

  @JavaStaticField(isFinal: true)
  public var ACTION_CONFIRM_PIN_SHORTCUT: String

  @JavaStaticField(isFinal: true)
  public var EXTRA_PIN_ITEM_REQUEST: String
}
