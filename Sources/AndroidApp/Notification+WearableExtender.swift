// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitCollection
import JavaRuntime

extension Notification {
  @JavaClass("android.app.Notification$WearableExtender", implements: Notification.Extender.self)
  open class WearableExtender: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Notification?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func addActions(_ arg0: List<Notification.Action>?) -> Notification.WearableExtender!

  @JavaMethod
  open func clearActions() -> Notification.WearableExtender!

  @JavaMethod
  open func setDisplayIntent(_ arg0: PendingIntent?) -> Notification.WearableExtender!

  @JavaMethod
  open func getDisplayIntent() -> PendingIntent!

  @JavaMethod
  open func addPage(_ arg0: Notification?) -> Notification.WearableExtender!

  @JavaMethod
  open func addPages(_ arg0: List<Notification>?) -> Notification.WearableExtender!

  @JavaMethod
  open func clearPages() -> Notification.WearableExtender!

  @JavaMethod
  open func getPages() -> List<Notification>!

  @JavaMethod
  open func setContentIcon(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getContentIcon() -> Int32

  @JavaMethod
  open func setContentIconGravity(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getContentIconGravity() -> Int32

  @JavaMethod
  open func setContentAction(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getContentAction() -> Int32

  @JavaMethod
  open func setGravity(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getGravity() -> Int32

  @JavaMethod
  open func setCustomSizePreset(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getCustomSizePreset() -> Int32

  @JavaMethod
  open func setCustomContentHeight(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getCustomContentHeight() -> Int32

  @JavaMethod
  open func setStartScrollBottom(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getStartScrollBottom() -> Bool

  @JavaMethod
  open func setContentIntentAvailableOffline(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getContentIntentAvailableOffline() -> Bool

  @JavaMethod
  open func setHintHideIcon(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintHideIcon() -> Bool

  @JavaMethod
  open func setHintShowBackgroundOnly(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintShowBackgroundOnly() -> Bool

  @JavaMethod
  open func setHintAvoidBackgroundClipping(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintAvoidBackgroundClipping() -> Bool

  @JavaMethod
  open func setHintScreenTimeout(_ arg0: Int32) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintScreenTimeout() -> Int32

  @JavaMethod
  open func setHintAmbientBigPicture(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintAmbientBigPicture() -> Bool

  @JavaMethod
  open func setHintContentIntentLaunchesActivity(_ arg0: Bool) -> Notification.WearableExtender!

  @JavaMethod
  open func getHintContentIntentLaunchesActivity() -> Bool

  @JavaMethod
  open func setDismissalId(_ arg0: String) -> Notification.WearableExtender!

  @JavaMethod
  open func getDismissalId() -> String

  @JavaMethod
  open func setBridgeTag(_ arg0: String) -> Notification.WearableExtender!

  @JavaMethod
  open func getBridgeTag() -> String

  @JavaMethod
  open func addAction(_ arg0: Notification.Action?) -> Notification.WearableExtender!

  @JavaMethod
  open func extend(_ arg0: Notification.Builder?) -> Notification.Builder!

  @JavaMethod
  open override func clone() -> Notification.WearableExtender!

  @JavaMethod
  open func getActions() -> List<Notification.Action>!
  }
}
extension JavaClass<Notification.WearableExtender> {
  @JavaStaticField(isFinal: true)
  public var SCREEN_TIMEOUT_LONG: Int32

  @JavaStaticField(isFinal: true)
  public var SCREEN_TIMEOUT_SHORT: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_DEFAULT: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_FULL_SCREEN: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_LARGE: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_MEDIUM: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_SMALL: Int32

  @JavaStaticField(isFinal: true)
  public var SIZE_XSMALL: Int32

  @JavaStaticField(isFinal: true)
  public var UNSET_ACTION_INDEX: Int32
}
