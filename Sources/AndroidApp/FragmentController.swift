// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.app.FragmentController")
open class FragmentController: JavaObject {
  @JavaMethod
  open func getFragmentManager() -> FragmentManager!

  @JavaMethod
  open func getLoaderManager() -> LoaderManager!

  @JavaMethod
  open func findFragmentByWho(_ arg0: String) -> Fragment!

  @JavaMethod
  open func attachHost(_ arg0: Fragment?)

  @JavaMethod
  open func noteStateNotSaved()

  @JavaMethod
  open func retainNonConfig() -> List<Fragment>!

  @JavaMethod
  open func retainNestedNonConfig() -> FragmentManagerNonConfig!

  @JavaMethod
  open func dispatchCreate()

  @JavaMethod
  open func dispatchActivityCreated()

  @JavaMethod
  open func dispatchStart()

  @JavaMethod
  open func dispatchResume()

  @JavaMethod
  open func dispatchPause()

  @JavaMethod
  open func dispatchStop()

  @JavaMethod
  open func dispatchDestroyView()

  @JavaMethod
  open func dispatchDestroy()

  @JavaMethod
  open func dispatchMultiWindowModeChanged(_ arg0: Bool)

  @JavaMethod
  open func dispatchPictureInPictureModeChanged(_ arg0: Bool)

  @JavaMethod
  open func dispatchLowMemory()

  @JavaMethod
  open func dispatchTrimMemory(_ arg0: Int32)

  @JavaMethod
  open func execPendingActions() -> Bool

  @JavaMethod
  open func doLoaderStart()

  @JavaMethod
  open func doLoaderStop(_ arg0: Bool)

  @JavaMethod
  open func doLoaderDestroy()

  @JavaMethod
  open func reportLoaderStart()

  @JavaMethod
  open func dumpLoaders(_ arg0: String, _ arg1: FileDescriptor?, _ arg2: PrintWriter?, _ arg3: [String])
}
extension JavaClass<FragmentController> {
  @JavaStaticMethod
  public func createController(_ arg0: FragmentHostCallback<JavaObject>?) -> FragmentController!
}
