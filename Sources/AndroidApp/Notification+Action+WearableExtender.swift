// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

extension Notification.Action {
  @JavaClass("android.app.Notification$Action$WearableExtender", implements: Notification.Action.Extender.self)
  open class WearableExtender: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Notification.Action?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setAvailableOffline(_ arg0: Bool) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func isAvailableOffline() -> Bool

  @JavaMethod
  open func setInProgressLabel(_ arg0: CharSequence?) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func getInProgressLabel() -> CharSequence!

  @JavaMethod
  open func setConfirmLabel(_ arg0: CharSequence?) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func getConfirmLabel() -> CharSequence!

  @JavaMethod
  open func setCancelLabel(_ arg0: CharSequence?) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func getCancelLabel() -> CharSequence!

  @JavaMethod
  open func setHintLaunchesActivity(_ arg0: Bool) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func getHintLaunchesActivity() -> Bool

  @JavaMethod
  open func setHintDisplayActionInline(_ arg0: Bool) -> Notification.Action.WearableExtender!

  @JavaMethod
  open func getHintDisplayActionInline() -> Bool

  @JavaMethod
  open func extend(_ arg0: Notification.Action.Builder?) -> Notification.Action.Builder!

  @JavaMethod
  open override func clone() -> Notification.Action.WearableExtender!
  }
}
