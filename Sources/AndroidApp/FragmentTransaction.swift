// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.app.FragmentTransaction")
open class FragmentTransaction: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setPrimaryNavigationFragment(_ arg0: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func setCustomAnimations(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> FragmentTransaction!

  @JavaMethod
  open func setCustomAnimations(_ arg0: Int32, _ arg1: Int32) -> FragmentTransaction!

  @JavaMethod
  open func setTransition(_ arg0: Int32) -> FragmentTransaction!

  @JavaMethod
  open func setTransitionStyle(_ arg0: Int32) -> FragmentTransaction!

  @JavaMethod
  open func addToBackStack(_ arg0: String) -> FragmentTransaction!

  @JavaMethod
  open func isAddToBackStackAllowed() -> Bool

  @JavaMethod
  open func disallowAddToBackStack() -> FragmentTransaction!

  @JavaMethod
  open func setBreadCrumbTitle(_ arg0: Int32) -> FragmentTransaction!

  @JavaMethod
  open func setBreadCrumbTitle(_ arg0: CharSequence?) -> FragmentTransaction!

  @JavaMethod
  open func setBreadCrumbShortTitle(_ arg0: CharSequence?) -> FragmentTransaction!

  @JavaMethod
  open func setBreadCrumbShortTitle(_ arg0: Int32) -> FragmentTransaction!

  @JavaMethod
  open func setReorderingAllowed(_ arg0: Bool) -> FragmentTransaction!

  @JavaMethod
  open func runOnCommit(_ arg0: Runnable?) -> FragmentTransaction!

  @JavaMethod
  open func commitAllowingStateLoss() -> Int32

  @JavaMethod
  open func commitNow()

  @JavaMethod
  open func commitNowAllowingStateLoss()

  @JavaMethod
  open func show(_ arg0: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func hide(_ arg0: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func remove(_ arg0: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func commit() -> Int32

  @JavaMethod
  open func isEmpty() -> Bool

  @JavaMethod
  open func replace(_ arg0: Int32, _ arg1: Fragment?, _ arg2: String) -> FragmentTransaction!

  @JavaMethod
  open func replace(_ arg0: Int32, _ arg1: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func add(_ arg0: Fragment?, _ arg1: String) -> FragmentTransaction!

  @JavaMethod
  open func add(_ arg0: Int32, _ arg1: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func add(_ arg0: Int32, _ arg1: Fragment?, _ arg2: String) -> FragmentTransaction!

  @JavaMethod
  open func attach(_ arg0: Fragment?) -> FragmentTransaction!

  @JavaMethod
  open func detach(_ arg0: Fragment?) -> FragmentTransaction!
}
extension JavaClass<FragmentTransaction> {
  @JavaStaticField(isFinal: true)
  public var TRANSIT_ENTER_MASK: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_EXIT_MASK: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_FRAGMENT_CLOSE: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_FRAGMENT_FADE: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_FRAGMENT_OPEN: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_NONE: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSIT_UNSET: Int32
}
