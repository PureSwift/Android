// Auto-generated by Java-to-Swift wrapper generator.
import JavaIO
import JavaKit
import JavaKitCollection
import JavaRuntime

@JavaClass("android.app.ActivityManager")
open class ActivityManager: JavaObject {
  @JavaMethod
  open func clearApplicationUserData() -> Bool

  @JavaMethod
  open func getMemoryClass() -> Int32

  @JavaMethod
  open func getLargeMemoryClass() -> Int32

  @JavaMethod
  open func isLowRamDevice() -> Bool

  @JavaMethod
  open func getRecentTasks(_ arg0: Int32, _ arg1: Int32) throws -> List<ActivityManager.RecentTaskInfo>!

  @JavaMethod
  open func getAppTasks() -> List<ActivityManager.AppTask>!

  @JavaMethod
  open func getRunningTasks(_ arg0: Int32) throws -> List<ActivityManager.RunningTaskInfo>!

  @JavaMethod
  open func moveTaskToFront(_ arg0: Int32, _ arg1: Int32)

  @JavaMethod
  open func getRunningServices(_ arg0: Int32) throws -> List<ActivityManager.RunningServiceInfo>!

  @JavaMethod
  open func getMemoryInfo(_ arg0: ActivityManager.MemoryInfo?)

  @JavaMethod
  open func getProcessesInErrorState() -> List<ActivityManager.ProcessErrorStateInfo>!

  @JavaMethod
  open func isBackgroundRestricted() -> Bool

  @JavaMethod
  open func getRunningAppProcesses() -> List<ActivityManager.RunningAppProcessInfo>!

  @JavaMethod
  open func getHistoricalProcessExitReasons(_ arg0: String, _ arg1: Int32, _ arg2: Int32) -> List<ApplicationExitInfo>!

  @JavaMethod
  open func setProcessStateSummary(_ arg0: [Int8])

  @JavaMethod
  open func restartPackage(_ arg0: String)

  @JavaMethod
  open func killBackgroundProcesses(_ arg0: String)

  @JavaMethod
  open func getLauncherLargeIconDensity() -> Int32

  @JavaMethod
  open func getLauncherLargeIconSize() -> Int32

  @JavaMethod
  open func dumpPackageState(_ arg0: FileDescriptor?, _ arg1: String)

  @JavaMethod
  open func setWatchHeapLimit(_ arg0: Int64)

  @JavaMethod
  open func clearWatchHeapLimit()

  @JavaMethod
  open func isInLockTaskMode() -> Bool

  @JavaMethod
  open func getLockTaskModeState() -> Int32

  @JavaMethod
  open func appNotResponding(_ arg0: String)
}
extension JavaClass<ActivityManager> {
  @JavaStaticField(isFinal: true)
  public var ACTION_REPORT_HEAP_LIMIT: String

  @JavaStaticField(isFinal: true)
  public var LOCK_TASK_MODE_LOCKED: Int32

  @JavaStaticField(isFinal: true)
  public var LOCK_TASK_MODE_NONE: Int32

  @JavaStaticField(isFinal: true)
  public var LOCK_TASK_MODE_PINNED: Int32

  @JavaStaticField(isFinal: true)
  public var META_HOME_ALTERNATE: String

  @JavaStaticField(isFinal: true)
  public var MOVE_TASK_NO_USER_ACTION: Int32

  @JavaStaticField(isFinal: true)
  public var MOVE_TASK_WITH_HOME: Int32

  @JavaStaticField(isFinal: true)
  public var RECENT_IGNORE_UNAVAILABLE: Int32

  @JavaStaticField(isFinal: true)
  public var RECENT_WITH_EXCLUDED: Int32

  @JavaStaticMethod
  public func isLowMemoryKillReportSupported() -> Bool

  @JavaStaticMethod
  public func getMyMemoryState(_ arg0: ActivityManager.RunningAppProcessInfo?)

  @JavaStaticMethod
  public func isUserAMonkey() -> Bool

  @JavaStaticMethod
  public func isRunningInTestHarness() -> Bool

  @JavaStaticMethod
  public func isRunningInUserTestHarness() -> Bool

  @JavaStaticMethod
  public func setVrThread(_ arg0: Int32)
}
