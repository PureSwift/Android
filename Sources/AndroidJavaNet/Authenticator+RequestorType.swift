// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension Authenticator {
  @JavaClass("java.net.Authenticator$RequestorType")
  open class RequestorType: Enum {
    public enum RequestorTypeCases: Equatable {
      case PROXY
  case SERVER
    }

    public var enumValue: RequestorTypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.PROXY?.as(JavaObject.self)) {
        return RequestorTypeCases.PROXY
  } else if self.equals(classObj.SERVER?.as(JavaObject.self)) {
        return RequestorTypeCases.SERVER
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: RequestorTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RequestorType>(environment: _environment)
    switch enumValue {
      case .PROXY:
        if let PROXY = classObj.PROXY {
          self.init(javaHolder: PROXY.javaHolder)
        } else {
          fatalError("Enum value PROXY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SERVER:
        if let SERVER = classObj.SERVER {
          self.init(javaHolder: SERVER.javaHolder)
        } else {
          fatalError("Enum value SERVER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Authenticator.RequestorType> {
  @JavaStaticField(isFinal: true)
  public var PROXY: Authenticator.RequestorType!

  @JavaStaticField(isFinal: true)
  public var SERVER: Authenticator.RequestorType!

  @JavaStaticMethod
  public func values() -> [Authenticator.RequestorType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Authenticator.RequestorType!
}
