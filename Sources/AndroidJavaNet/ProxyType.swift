// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.net.Proxy$Type")
open class ProxyType: Enum {
  public enum ProxyTypeCases: Equatable {
    case DIRECT
    case HTTP
    case SOCKS
  }

  public var enumValue: ProxyTypeCases! {
    let classObj = self.javaClass
    if self.equals(classObj.DIRECT?.as(JavaObject.self)) {
      return ProxyTypeCases.DIRECT
    } else if self.equals(classObj.HTTP?.as(JavaObject.self)) {
      return ProxyTypeCases.HTTP
    } else if self.equals(classObj.SOCKS?.as(JavaObject.self)) {
      return ProxyTypeCases.SOCKS
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: ProxyTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<ProxyType>(environment: _environment)
    switch enumValue {
      case .DIRECT:
        if let DIRECT = classObj.DIRECT {
          self.init(javaHolder: DIRECT.javaHolder)
        } else {
          fatalError("Enum value DIRECT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HTTP:
        if let HTTP = classObj.HTTP {
          self.init(javaHolder: HTTP.javaHolder)
        } else {
          fatalError("Enum value HTTP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SOCKS:
        if let SOCKS = classObj.SOCKS {
          self.init(javaHolder: SOCKS.javaHolder)
        } else {
          fatalError("Enum value SOCKS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension ProxyType {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<ProxyType> {
  @JavaStaticField(isFinal: true)
  public var DIRECT: ProxyType!

  @JavaStaticField(isFinal: true)
  public var HTTP: ProxyType!

  @JavaStaticField(isFinal: true)
  public var SOCKS: ProxyType!

  @JavaStaticMethod
  public func values() -> [ProxyType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ProxyType!
}
