// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("java.net.DatagramPacket")
open class DatagramPacket: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, _ arg3: SocketAddress?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: InetAddress?, _ arg3: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: SocketAddress?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, _ arg3: InetAddress?, _ arg4: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setData(_ arg0: [Int8])

  @JavaMethod
  open func setData(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open func setAddress(_ arg0: InetAddress?)

  @JavaMethod
  open func setPort(_ arg0: Int32)

  @JavaMethod
  open func setSocketAddress(_ arg0: SocketAddress?)

  @JavaMethod
  open func getSocketAddress() -> SocketAddress!

  @JavaMethod
  open func getLength() -> Int32

  @JavaMethod
  open func setLength(_ arg0: Int32)

  @JavaMethod
  open func getAddress() -> InetAddress!

  @JavaMethod
  open func getPort() -> Int32

  @JavaMethod
  open func getOffset() -> Int32

  @JavaMethod
  open func getData() -> [Int8]
}
