// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension Proxy {
  @JavaClass("java.net.Proxy$Type")
  open class Type: Enum {
    public enum TypeCases: Equatable {
      case DIRECT
  case HTTP
  case SOCKS
    }

    public var enumValue: TypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.DIRECT?.as(JavaObject.self)) {
        return TypeCases.DIRECT
  } else if self.equals(classObj.HTTP?.as(JavaObject.self)) {
        return TypeCases.HTTP
  } else if self.equals(classObj.SOCKS?.as(JavaObject.self)) {
        return TypeCases.SOCKS
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: TypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Type>(environment: _environment)
    switch enumValue {
      case .DIRECT:
        if let DIRECT = classObj.DIRECT {
          self.init(javaHolder: DIRECT.javaHolder)
        } else {
          fatalError("Enum value DIRECT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HTTP:
        if let HTTP = classObj.HTTP {
          self.init(javaHolder: HTTP.javaHolder)
        } else {
          fatalError("Enum value HTTP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SOCKS:
        if let SOCKS = classObj.SOCKS {
          self.init(javaHolder: SOCKS.javaHolder)
        } else {
          fatalError("Enum value SOCKS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Proxy.Type> {
  @JavaStaticField(isFinal: true)
  public var DIRECT: Proxy.`Type`!

  @JavaStaticField(isFinal: true)
  public var HTTP: Proxy.`Type`!

  @JavaStaticField(isFinal: true)
  public var SOCKS: Proxy.`Type`!

  @JavaStaticMethod
  public func values() -> [Proxy.`Type`?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Proxy.`Type`!
}
