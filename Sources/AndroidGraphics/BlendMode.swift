// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.BlendMode")
open class BlendMode: Enum {
  public enum BlendModeCases: Equatable {
    case CLEAR
    case SRC
    case DST
    case SRC_OVER
    case DST_OVER
    case SRC_IN
    case DST_IN
    case SRC_OUT
    case DST_OUT
    case SRC_ATOP
    case DST_ATOP
    case XOR
    case PLUS
    case MODULATE
    case SCREEN
    case OVERLAY
    case DARKEN
    case LIGHTEN
    case COLOR_DODGE
    case COLOR_BURN
    case HARD_LIGHT
    case SOFT_LIGHT
    case DIFFERENCE
    case EXCLUSION
    case MULTIPLY
    case HUE
    case SATURATION
    case COLOR
    case LUMINOSITY
  }

  public var enumValue: BlendModeCases! {
    let classObj = self.javaClass
    if self.equals(classObj.CLEAR?.as(JavaObject.self)) {
      return BlendModeCases.CLEAR
    } else if self.equals(classObj.SRC?.as(JavaObject.self)) {
      return BlendModeCases.SRC
    } else if self.equals(classObj.DST?.as(JavaObject.self)) {
      return BlendModeCases.DST
    } else if self.equals(classObj.SRC_OVER?.as(JavaObject.self)) {
      return BlendModeCases.SRC_OVER
    } else if self.equals(classObj.DST_OVER?.as(JavaObject.self)) {
      return BlendModeCases.DST_OVER
    } else if self.equals(classObj.SRC_IN?.as(JavaObject.self)) {
      return BlendModeCases.SRC_IN
    } else if self.equals(classObj.DST_IN?.as(JavaObject.self)) {
      return BlendModeCases.DST_IN
    } else if self.equals(classObj.SRC_OUT?.as(JavaObject.self)) {
      return BlendModeCases.SRC_OUT
    } else if self.equals(classObj.DST_OUT?.as(JavaObject.self)) {
      return BlendModeCases.DST_OUT
    } else if self.equals(classObj.SRC_ATOP?.as(JavaObject.self)) {
      return BlendModeCases.SRC_ATOP
    } else if self.equals(classObj.DST_ATOP?.as(JavaObject.self)) {
      return BlendModeCases.DST_ATOP
    } else if self.equals(classObj.XOR?.as(JavaObject.self)) {
      return BlendModeCases.XOR
    } else if self.equals(classObj.PLUS?.as(JavaObject.self)) {
      return BlendModeCases.PLUS
    } else if self.equals(classObj.MODULATE?.as(JavaObject.self)) {
      return BlendModeCases.MODULATE
    } else if self.equals(classObj.SCREEN?.as(JavaObject.self)) {
      return BlendModeCases.SCREEN
    } else if self.equals(classObj.OVERLAY?.as(JavaObject.self)) {
      return BlendModeCases.OVERLAY
    } else if self.equals(classObj.DARKEN?.as(JavaObject.self)) {
      return BlendModeCases.DARKEN
    } else if self.equals(classObj.LIGHTEN?.as(JavaObject.self)) {
      return BlendModeCases.LIGHTEN
    } else if self.equals(classObj.COLOR_DODGE?.as(JavaObject.self)) {
      return BlendModeCases.COLOR_DODGE
    } else if self.equals(classObj.COLOR_BURN?.as(JavaObject.self)) {
      return BlendModeCases.COLOR_BURN
    } else if self.equals(classObj.HARD_LIGHT?.as(JavaObject.self)) {
      return BlendModeCases.HARD_LIGHT
    } else if self.equals(classObj.SOFT_LIGHT?.as(JavaObject.self)) {
      return BlendModeCases.SOFT_LIGHT
    } else if self.equals(classObj.DIFFERENCE?.as(JavaObject.self)) {
      return BlendModeCases.DIFFERENCE
    } else if self.equals(classObj.EXCLUSION?.as(JavaObject.self)) {
      return BlendModeCases.EXCLUSION
    } else if self.equals(classObj.MULTIPLY?.as(JavaObject.self)) {
      return BlendModeCases.MULTIPLY
    } else if self.equals(classObj.HUE?.as(JavaObject.self)) {
      return BlendModeCases.HUE
    } else if self.equals(classObj.SATURATION?.as(JavaObject.self)) {
      return BlendModeCases.SATURATION
    } else if self.equals(classObj.COLOR?.as(JavaObject.self)) {
      return BlendModeCases.COLOR
    } else if self.equals(classObj.LUMINOSITY?.as(JavaObject.self)) {
      return BlendModeCases.LUMINOSITY
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: BlendModeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<BlendMode>(environment: _environment)
    switch enumValue {
      case .CLEAR:
        if let CLEAR = classObj.CLEAR {
          self.init(javaHolder: CLEAR.javaHolder)
        } else {
          fatalError("Enum value CLEAR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SRC:
        if let SRC = classObj.SRC {
          self.init(javaHolder: SRC.javaHolder)
        } else {
          fatalError("Enum value SRC was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DST:
        if let DST = classObj.DST {
          self.init(javaHolder: DST.javaHolder)
        } else {
          fatalError("Enum value DST was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SRC_OVER:
        if let SRC_OVER = classObj.SRC_OVER {
          self.init(javaHolder: SRC_OVER.javaHolder)
        } else {
          fatalError("Enum value SRC_OVER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DST_OVER:
        if let DST_OVER = classObj.DST_OVER {
          self.init(javaHolder: DST_OVER.javaHolder)
        } else {
          fatalError("Enum value DST_OVER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SRC_IN:
        if let SRC_IN = classObj.SRC_IN {
          self.init(javaHolder: SRC_IN.javaHolder)
        } else {
          fatalError("Enum value SRC_IN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DST_IN:
        if let DST_IN = classObj.DST_IN {
          self.init(javaHolder: DST_IN.javaHolder)
        } else {
          fatalError("Enum value DST_IN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SRC_OUT:
        if let SRC_OUT = classObj.SRC_OUT {
          self.init(javaHolder: SRC_OUT.javaHolder)
        } else {
          fatalError("Enum value SRC_OUT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DST_OUT:
        if let DST_OUT = classObj.DST_OUT {
          self.init(javaHolder: DST_OUT.javaHolder)
        } else {
          fatalError("Enum value DST_OUT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SRC_ATOP:
        if let SRC_ATOP = classObj.SRC_ATOP {
          self.init(javaHolder: SRC_ATOP.javaHolder)
        } else {
          fatalError("Enum value SRC_ATOP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DST_ATOP:
        if let DST_ATOP = classObj.DST_ATOP {
          self.init(javaHolder: DST_ATOP.javaHolder)
        } else {
          fatalError("Enum value DST_ATOP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .XOR:
        if let XOR = classObj.XOR {
          self.init(javaHolder: XOR.javaHolder)
        } else {
          fatalError("Enum value XOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PLUS:
        if let PLUS = classObj.PLUS {
          self.init(javaHolder: PLUS.javaHolder)
        } else {
          fatalError("Enum value PLUS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MODULATE:
        if let MODULATE = classObj.MODULATE {
          self.init(javaHolder: MODULATE.javaHolder)
        } else {
          fatalError("Enum value MODULATE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SCREEN:
        if let SCREEN = classObj.SCREEN {
          self.init(javaHolder: SCREEN.javaHolder)
        } else {
          fatalError("Enum value SCREEN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .OVERLAY:
        if let OVERLAY = classObj.OVERLAY {
          self.init(javaHolder: OVERLAY.javaHolder)
        } else {
          fatalError("Enum value OVERLAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DARKEN:
        if let DARKEN = classObj.DARKEN {
          self.init(javaHolder: DARKEN.javaHolder)
        } else {
          fatalError("Enum value DARKEN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LIGHTEN:
        if let LIGHTEN = classObj.LIGHTEN {
          self.init(javaHolder: LIGHTEN.javaHolder)
        } else {
          fatalError("Enum value LIGHTEN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COLOR_DODGE:
        if let COLOR_DODGE = classObj.COLOR_DODGE {
          self.init(javaHolder: COLOR_DODGE.javaHolder)
        } else {
          fatalError("Enum value COLOR_DODGE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COLOR_BURN:
        if let COLOR_BURN = classObj.COLOR_BURN {
          self.init(javaHolder: COLOR_BURN.javaHolder)
        } else {
          fatalError("Enum value COLOR_BURN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HARD_LIGHT:
        if let HARD_LIGHT = classObj.HARD_LIGHT {
          self.init(javaHolder: HARD_LIGHT.javaHolder)
        } else {
          fatalError("Enum value HARD_LIGHT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SOFT_LIGHT:
        if let SOFT_LIGHT = classObj.SOFT_LIGHT {
          self.init(javaHolder: SOFT_LIGHT.javaHolder)
        } else {
          fatalError("Enum value SOFT_LIGHT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DIFFERENCE:
        if let DIFFERENCE = classObj.DIFFERENCE {
          self.init(javaHolder: DIFFERENCE.javaHolder)
        } else {
          fatalError("Enum value DIFFERENCE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXCLUSION:
        if let EXCLUSION = classObj.EXCLUSION {
          self.init(javaHolder: EXCLUSION.javaHolder)
        } else {
          fatalError("Enum value EXCLUSION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .MULTIPLY:
        if let MULTIPLY = classObj.MULTIPLY {
          self.init(javaHolder: MULTIPLY.javaHolder)
        } else {
          fatalError("Enum value MULTIPLY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HUE:
        if let HUE = classObj.HUE {
          self.init(javaHolder: HUE.javaHolder)
        } else {
          fatalError("Enum value HUE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SATURATION:
        if let SATURATION = classObj.SATURATION {
          self.init(javaHolder: SATURATION.javaHolder)
        } else {
          fatalError("Enum value SATURATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .COLOR:
        if let COLOR = classObj.COLOR {
          self.init(javaHolder: COLOR.javaHolder)
        } else {
          fatalError("Enum value COLOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LUMINOSITY:
        if let LUMINOSITY = classObj.LUMINOSITY {
          self.init(javaHolder: LUMINOSITY.javaHolder)
        } else {
          fatalError("Enum value LUMINOSITY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JavaClass<BlendMode> {
  @JavaStaticField(isFinal: true)
  public var CLEAR: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SRC: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DST: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SRC_OVER: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DST_OVER: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SRC_IN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DST_IN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SRC_OUT: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DST_OUT: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SRC_ATOP: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DST_ATOP: BlendMode!

  @JavaStaticField(isFinal: true)
  public var XOR: BlendMode!

  @JavaStaticField(isFinal: true)
  public var PLUS: BlendMode!

  @JavaStaticField(isFinal: true)
  public var MODULATE: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SCREEN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var OVERLAY: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DARKEN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var LIGHTEN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var COLOR_DODGE: BlendMode!

  @JavaStaticField(isFinal: true)
  public var COLOR_BURN: BlendMode!

  @JavaStaticField(isFinal: true)
  public var HARD_LIGHT: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SOFT_LIGHT: BlendMode!

  @JavaStaticField(isFinal: true)
  public var DIFFERENCE: BlendMode!

  @JavaStaticField(isFinal: true)
  public var EXCLUSION: BlendMode!

  @JavaStaticField(isFinal: true)
  public var MULTIPLY: BlendMode!

  @JavaStaticField(isFinal: true)
  public var HUE: BlendMode!

  @JavaStaticField(isFinal: true)
  public var SATURATION: BlendMode!

  @JavaStaticField(isFinal: true)
  public var COLOR: BlendMode!

  @JavaStaticField(isFinal: true)
  public var LUMINOSITY: BlendMode!

  @JavaStaticMethod
  public func values() -> [BlendMode?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> BlendMode!
}
