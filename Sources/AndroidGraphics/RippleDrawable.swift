// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.drawable.RippleDrawable")
open class RippleDrawable: LayerDrawable {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: ColorStateList?, _ arg1: Drawable?, _ arg2: Drawable?, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func canApplyTheme() -> Bool

  @JavaMethod
  open override func getOpacity() -> Int32

  @JavaMethod
  open override func isStateful() -> Bool

  @JavaMethod
  open override func setDrawableByLayerId(_ arg0: Int32, _ arg1: Drawable?) -> Bool

  @JavaMethod
  open override func setPaddingMode(_ arg0: Int32)

  @JavaMethod
  open override func draw(_ arg0: Canvas?)

  @JavaMethod
  open override func hasFocusStateSpecified() -> Bool

  @JavaMethod
  open override func applyTheme(_ arg0: Resources.Theme?)

  @JavaMethod
  open override func onBoundsChange(_ arg0: Rect?)

  @JavaMethod
  open override func onStateChange(_ arg0: [Int32]) -> Bool

  @JavaMethod
  open override func getConstantState() -> Drawable.ConstantState!

  @JavaMethod
  open override func mutate() -> Drawable!

  @JavaMethod
  open override func getDirtyBounds() -> Rect!

  @JavaMethod
  open override func invalidateSelf()

  @JavaMethod
  open override func setHotspot(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open override func setHotspotBounds(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open override func getHotspotBounds(_ arg0: Rect?)

  @JavaMethod
  open override func isProjected() -> Bool

  @JavaMethod
  open override func jumpToCurrentState()

  @JavaMethod
  open override func setVisible(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open override func getOutline(_ arg0: Outline?)

  @JavaMethod
  open func setEffectColor(_ arg0: ColorStateList?)

  @JavaMethod
  open func getEffectColor() -> ColorStateList!

  @JavaMethod
  open func setRadius(_ arg0: Int32)

  @JavaMethod
  open func getRadius() -> Int32

  @JavaMethod
  open func setColor(_ arg0: ColorStateList?)
}
extension JavaClass<RippleDrawable> {
  @JavaStaticField(isFinal: true)
  public var RADIUS_AUTO: Int32

  @JavaStaticField(isFinal: true)
  public var INSET_UNDEFINED: Int32

  @JavaStaticField(isFinal: true)
  public var PADDING_MODE_NEST: Int32

  @JavaStaticField(isFinal: true)
  public var PADDING_MODE_STACK: Int32
}
