// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.RuntimeShader")
open class RuntimeShader: Shader {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setColorUniform(_ arg0: String, _ arg1: Int64)

  @JavaMethod
  open func setColorUniform(_ arg0: String, _ arg1: Int32)

  @JavaMethod
  open func setColorUniform(_ arg0: String, _ arg1: Color?)

  @JavaMethod
  open func setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float)

  @JavaMethod
  open func setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float, _ arg3: Float)

  @JavaMethod
  open func setFloatUniform(_ arg0: String, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float)

  @JavaMethod
  open func setFloatUniform(_ arg0: String, _ arg1: Float)

  @JavaMethod
  open func setFloatUniform(_ arg0: String, _ arg1: [Float])

  @JavaMethod
  open func setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32, _ arg4: Int32)

  @JavaMethod
  open func setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open func setIntUniform(_ arg0: String, _ arg1: [Int32])

  @JavaMethod
  open func setIntUniform(_ arg0: String, _ arg1: Int32, _ arg2: Int32)

  @JavaMethod
  open func setIntUniform(_ arg0: String, _ arg1: Int32)

  @JavaMethod
  open func setInputShader(_ arg0: String, _ arg1: Shader?)

  @JavaMethod
  open func setInputBuffer(_ arg0: String, _ arg1: BitmapShader?)
}
