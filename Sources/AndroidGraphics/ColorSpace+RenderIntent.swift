// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension ColorSpace {
  @JavaClass("android.graphics.ColorSpace$RenderIntent")
  open class RenderIntent: Enum {
    public enum RenderIntentCases: Equatable {
      case PERCEPTUAL
  case RELATIVE
  case SATURATION
  case ABSOLUTE
    }

    public var enumValue: RenderIntentCases! {
      let classObj = self.javaClass
      if self.equals(classObj.PERCEPTUAL?.as(JavaObject.self)) {
        return RenderIntentCases.PERCEPTUAL
  } else if self.equals(classObj.RELATIVE?.as(JavaObject.self)) {
        return RenderIntentCases.RELATIVE
  } else if self.equals(classObj.SATURATION?.as(JavaObject.self)) {
        return RenderIntentCases.SATURATION
  } else if self.equals(classObj.ABSOLUTE?.as(JavaObject.self)) {
        return RenderIntentCases.ABSOLUTE
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: RenderIntentCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RenderIntent>(environment: _environment)
    switch enumValue {
      case .PERCEPTUAL:
        if let PERCEPTUAL = classObj.PERCEPTUAL {
          self.init(javaHolder: PERCEPTUAL.javaHolder)
        } else {
          fatalError("Enum value PERCEPTUAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RELATIVE:
        if let RELATIVE = classObj.RELATIVE {
          self.init(javaHolder: RELATIVE.javaHolder)
        } else {
          fatalError("Enum value RELATIVE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SATURATION:
        if let SATURATION = classObj.SATURATION {
          self.init(javaHolder: SATURATION.javaHolder)
        } else {
          fatalError("Enum value SATURATION was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ABSOLUTE:
        if let ABSOLUTE = classObj.ABSOLUTE {
          self.init(javaHolder: ABSOLUTE.javaHolder)
        } else {
          fatalError("Enum value ABSOLUTE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<ColorSpace.RenderIntent> {
  @JavaStaticField(isFinal: true)
  public var PERCEPTUAL: ColorSpace.RenderIntent!

  @JavaStaticField(isFinal: true)
  public var RELATIVE: ColorSpace.RenderIntent!

  @JavaStaticField(isFinal: true)
  public var SATURATION: ColorSpace.RenderIntent!

  @JavaStaticField(isFinal: true)
  public var ABSOLUTE: ColorSpace.RenderIntent!

  @JavaStaticMethod
  public func values() -> [ColorSpace.RenderIntent?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ColorSpace.RenderIntent!
}
