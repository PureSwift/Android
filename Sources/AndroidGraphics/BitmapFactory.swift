// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidJavaIO
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.BitmapFactory")
open class BitmapFactory: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)
}
extension JavaClass<BitmapFactory> {
  @JavaStaticMethod
  public func decodeFile(_ arg0: String) -> Bitmap!

  @JavaStaticMethod
  public func decodeFile(_ arg0: String, _ arg1: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeResourceStream(_ arg0: Resources?, _ arg1: TypedValue?, _ arg2: InputStream?, _ arg3: Rect?, _ arg4: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeResource(_ arg0: Resources?, _ arg1: Int32, _ arg2: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeResource(_ arg0: Resources?, _ arg1: Int32) -> Bitmap!

  @JavaStaticMethod
  public func decodeByteArray(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> Bitmap!

  @JavaStaticMethod
  public func decodeByteArray(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, _ arg3: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeStream(_ arg0: InputStream?) -> Bitmap!

  @JavaStaticMethod
  public func decodeStream(_ arg0: InputStream?, _ arg1: Rect?, _ arg2: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeFileDescriptor(_ arg0: FileDescriptor?, _ arg1: Rect?, _ arg2: BitmapFactory.Options?) -> Bitmap!

  @JavaStaticMethod
  public func decodeFileDescriptor(_ arg0: FileDescriptor?) -> Bitmap!
}
