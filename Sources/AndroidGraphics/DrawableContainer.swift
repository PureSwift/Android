// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.drawable.DrawableContainer", implements: Drawable.Callback.self)
open class DrawableContainer: Drawable {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func canApplyTheme() -> Bool

  @JavaMethod
  open override func getChangingConfigurations() -> Int32

  @JavaMethod
  open func setEnterFadeDuration(_ arg0: Int32)

  @JavaMethod
  open func setExitFadeDuration(_ arg0: Int32)

  @JavaMethod
  open override func getOpacity() -> Int32

  @JavaMethod
  open override func isStateful() -> Bool

  @JavaMethod
  open func setConstantState(_ arg0: DrawableContainer.DrawableContainerState?)

  @JavaMethod
  open func selectDrawable(_ arg0: Int32) -> Bool

  @JavaMethod
  open override func draw(_ arg0: Canvas?)

  @JavaMethod
  open override func getAlpha() -> Int32

  @JavaMethod
  open override func hasFocusStateSpecified() -> Bool

  @JavaMethod
  open override func getCurrent() -> Drawable!

  @JavaMethod
  open override func applyTheme(_ arg0: Resources.Theme?)

  @JavaMethod
  open override func setAlpha(_ arg0: Int32)

  @JavaMethod
  open override func setTintList(_ arg0: ColorStateList?)

  @JavaMethod
  open override func setTintBlendMode(_ arg0: BlendMode?)

  @JavaMethod
  open override func setColorFilter(_ arg0: ColorFilter?)

  @JavaMethod
  open override func onBoundsChange(_ arg0: Rect?)

  @JavaMethod
  open override func onStateChange(_ arg0: [Int32]) -> Bool

  @JavaMethod
  open func invalidateDrawable(_ arg0: Drawable?)

  @JavaMethod
  open func scheduleDrawable(_ arg0: Drawable?, _ arg1: Runnable?, _ arg2: Int64)

  @JavaMethod
  open func unscheduleDrawable(_ arg0: Drawable?, _ arg1: Runnable?)

  @JavaMethod
  open override func getConstantState() -> Drawable.ConstantState!

  @JavaMethod
  open override func mutate() -> Drawable!

  @JavaMethod
  open override func setDither(_ arg0: Bool)

  @JavaMethod
  open override func onLayoutDirectionChanged(_ arg0: Int32) -> Bool

  @JavaMethod
  open override func setHotspot(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open override func setHotspotBounds(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32)

  @JavaMethod
  open override func getHotspotBounds(_ arg0: Rect?)

  @JavaMethod
  open override func jumpToCurrentState()

  @JavaMethod
  open override func setVisible(_ arg0: Bool, _ arg1: Bool) -> Bool

  @JavaMethod
  open override func setAutoMirrored(_ arg0: Bool)

  @JavaMethod
  open override func isAutoMirrored() -> Bool

  @JavaMethod
  open override func onLevelChange(_ arg0: Int32) -> Bool

  @JavaMethod
  open override func getIntrinsicWidth() -> Int32

  @JavaMethod
  open override func getIntrinsicHeight() -> Int32

  @JavaMethod
  open override func getMinimumWidth() -> Int32

  @JavaMethod
  open override func getMinimumHeight() -> Int32

  @JavaMethod
  open override func getPadding(_ arg0: Rect?) -> Bool

  @JavaMethod
  open override func getOpticalInsets() -> Insets!

  @JavaMethod
  open override func getOutline(_ arg0: Outline?)
}
