// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.Color")
open class Color: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getModel() -> ColorSpace.Model!

  @JavaMethod
  open func getComponentCount() -> Int32

  @JavaMethod
  open func isSrgb() -> Bool

  @JavaMethod
  open func isWideGamut() -> Bool

  @JavaMethod
  open func pack() -> Int64

  @JavaMethod
  open func toArgb() -> Int32

  @JavaMethod
  open func green() -> Float

  @JavaMethod
  open func blue() -> Float

  @JavaMethod
  open func getComponents() -> [Float]

  @JavaMethod
  open func getComponents(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func luminance() -> Float

  @JavaMethod
  open func alpha() -> Float

  @JavaMethod
  open func getColorSpace() -> ColorSpace!

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func convert(_ arg0: ColorSpace?) -> Color!

  @JavaMethod
  open func red() -> Float

  @JavaMethod
  open func getComponent(_ arg0: Int32) -> Float
}
extension JavaClass<Color> {
  @JavaStaticField(isFinal: true)
  public var BLACK: Int32

  @JavaStaticField(isFinal: true)
  public var BLUE: Int32

  @JavaStaticField(isFinal: true)
  public var CYAN: Int32

  @JavaStaticField(isFinal: true)
  public var DKGRAY: Int32

  @JavaStaticField(isFinal: true)
  public var GRAY: Int32

  @JavaStaticField(isFinal: true)
  public var GREEN: Int32

  @JavaStaticField(isFinal: true)
  public var LTGRAY: Int32

  @JavaStaticField(isFinal: true)
  public var MAGENTA: Int32

  @JavaStaticField(isFinal: true)
  public var RED: Int32

  @JavaStaticField(isFinal: true)
  public var TRANSPARENT: Int32

  @JavaStaticField(isFinal: true)
  public var WHITE: Int32

  @JavaStaticField(isFinal: true)
  public var YELLOW: Int32

  @JavaStaticMethod
  public func colorSpace(_ arg0: Int64) -> ColorSpace!

  @JavaStaticMethod
  public func isSrgb(_ arg0: Int64) -> Bool

  @JavaStaticMethod
  public func isWideGamut(_ arg0: Int64) -> Bool

  @JavaStaticMethod
  public func pack(_ arg0: Int32) -> Int64

  @JavaStaticMethod
  public func pack(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: ColorSpace?) -> Int64

  @JavaStaticMethod
  public func pack(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> Int64

  @JavaStaticMethod
  public func pack(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float) -> Int64

  @JavaStaticMethod
  public func toArgb(_ arg0: Int64) -> Int32

  @JavaStaticMethod
  public func green(_ arg0: Int64) -> Float

  @JavaStaticMethod
  public func green(_ arg0: Int32) -> Int32

  @JavaStaticMethod
  public func blue(_ arg0: Int64) -> Float

  @JavaStaticMethod
  public func blue(_ arg0: Int32) -> Int32

  @JavaStaticMethod
  public func luminance(_ arg0: Int64) -> Float

  @JavaStaticMethod
  public func luminance(_ arg0: Int32) -> Float

  @JavaStaticMethod
  public func isInColorSpace(_ arg0: Int64, _ arg1: ColorSpace?) -> Bool

  @JavaStaticMethod
  public func rgb(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> Int32

  @JavaStaticMethod
  public func rgb(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32) -> Int32

  @JavaStaticMethod
  public func parseColor(_ arg0: String) -> Int32

  @JavaStaticMethod
  public func RGBToHSV(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: [Float])

  @JavaStaticMethod
  public func colorToHSV(_ arg0: Int32, _ arg1: [Float])

  @JavaStaticMethod
  public func HSVToColor(_ arg0: [Float]) -> Int32

  @JavaStaticMethod
  public func HSVToColor(_ arg0: Int32, _ arg1: [Float]) -> Int32

  @JavaStaticMethod
  public func argb(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float) -> Int32

  @JavaStaticMethod
  public func argb(_ arg0: Int32, _ arg1: Int32, _ arg2: Int32, _ arg3: Int32) -> Int32

  @JavaStaticMethod
  public func alpha(_ arg0: Int64) -> Float

  @JavaStaticMethod
  public func alpha(_ arg0: Int32) -> Int32

  @JavaStaticMethod
  public func convert(_ arg0: Int32, _ arg1: ColorSpace?) -> Int64

  @JavaStaticMethod
  public func convert(_ arg0: Int64, _ arg1: ColorSpace?) -> Int64

  @JavaStaticMethod
  public func convert(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: ColorSpace?, _ arg5: ColorSpace?) -> Int64

  @JavaStaticMethod
  public func convert(_ arg0: Int64, _ arg1: ColorSpace.Connector?) -> Int64

  @JavaStaticMethod
  public func convert(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: ColorSpace.Connector?) -> Int64

  @JavaStaticMethod
  public func valueOf(_ arg0: Int32) -> Color!

  @JavaStaticMethod
  public func valueOf(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: ColorSpace?) -> Color!

  @JavaStaticMethod
  public func valueOf(_ arg0: [Float], _ arg1: ColorSpace?) -> Color!

  @JavaStaticMethod
  public func valueOf(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float) -> Color!

  @JavaStaticMethod
  public func valueOf(_ arg0: Int64) -> Color!

  @JavaStaticMethod
  public func valueOf(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> Color!

  @JavaStaticMethod
  public func red(_ arg0: Int32) -> Int32

  @JavaStaticMethod
  public func red(_ arg0: Int64) -> Float
}
