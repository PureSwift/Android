// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.RenderEffect")
open class RenderEffect: JavaObject {

}
extension JavaClass<RenderEffect> {
  @JavaStaticMethod
  public func createOffsetEffect(_ arg0: Float, _ arg1: Float, _ arg2: RenderEffect?) -> RenderEffect!

  @JavaStaticMethod
  public func createOffsetEffect(_ arg0: Float, _ arg1: Float) -> RenderEffect!

  @JavaStaticMethod
  public func createBlurEffect(_ arg0: Float, _ arg1: Float, _ arg2: RenderEffect?, _ arg3: Shader.TileMode?) -> RenderEffect!

  @JavaStaticMethod
  public func createBlurEffect(_ arg0: Float, _ arg1: Float, _ arg2: Shader.TileMode?) -> RenderEffect!

  @JavaStaticMethod
  public func createBitmapEffect(_ arg0: Bitmap?) -> RenderEffect!

  @JavaStaticMethod
  public func createBitmapEffect(_ arg0: Bitmap?, _ arg1: Rect?, _ arg2: Rect?) -> RenderEffect!

  @JavaStaticMethod
  public func createColorFilterEffect(_ arg0: ColorFilter?) -> RenderEffect!

  @JavaStaticMethod
  public func createColorFilterEffect(_ arg0: ColorFilter?, _ arg1: RenderEffect?) -> RenderEffect!

  @JavaStaticMethod
  public func createBlendModeEffect(_ arg0: RenderEffect?, _ arg1: RenderEffect?, _ arg2: BlendMode?) -> RenderEffect!

  @JavaStaticMethod
  public func createChainEffect(_ arg0: RenderEffect?, _ arg1: RenderEffect?) -> RenderEffect!

  @JavaStaticMethod
  public func createShaderEffect(_ arg0: Shader?) -> RenderEffect!

  @JavaStaticMethod
  public func createRuntimeShaderEffect(_ arg0: RuntimeShader?, _ arg1: String) -> RenderEffect!
}
