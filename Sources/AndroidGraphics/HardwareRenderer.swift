// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.HardwareRenderer")
open class HardwareRenderer: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func setLightSourceGeometry(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float)

  @JavaMethod
  open func setLightSourceAlpha(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func setContentRoot(_ arg0: RenderNode?)

  @JavaMethod
  open func createRenderRequest() -> HardwareRenderer.FrameRenderRequest!

  @JavaMethod
  open func clearContent()

  @JavaMethod
  open func notifyFramePending()

  @JavaMethod
  open func start()

  @JavaMethod
  open func stop()

  @JavaMethod
  open func setName(_ arg0: String)

  @JavaMethod
  open func destroy()

  @JavaMethod
  open func setOpaque(_ arg0: Bool)

  @JavaMethod
  open func isOpaque() -> Bool
}
extension JavaClass<HardwareRenderer> {
  @JavaStaticField(isFinal: true)
  public var SYNC_CONTEXT_IS_STOPPED: Int32

  @JavaStaticField(isFinal: true)
  public var SYNC_FRAME_DROPPED: Int32

  @JavaStaticField(isFinal: true)
  public var SYNC_LOST_SURFACE_REWARD_IF_FOUND: Int32

  @JavaStaticField(isFinal: true)
  public var SYNC_OK: Int32

  @JavaStaticField(isFinal: true)
  public var SYNC_REDRAW_REQUESTED: Int32

  @JavaStaticMethod
  public func isDrawingEnabled() -> Bool

  @JavaStaticMethod
  public func setDrawingEnabled(_ arg0: Bool)
}
