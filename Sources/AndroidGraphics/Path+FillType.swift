// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension Path {
  @JavaClass("android.graphics.Path$FillType")
  open class FillType: Enum {
    public enum FillTypeCases: Equatable {
      case WINDING
  case EVEN_ODD
  case INVERSE_WINDING
  case INVERSE_EVEN_ODD
    }

    public var enumValue: FillTypeCases! {
      let classObj = self.javaClass
      if self.equals(classObj.WINDING?.as(JavaObject.self)) {
        return FillTypeCases.WINDING
  } else if self.equals(classObj.EVEN_ODD?.as(JavaObject.self)) {
        return FillTypeCases.EVEN_ODD
  } else if self.equals(classObj.INVERSE_WINDING?.as(JavaObject.self)) {
        return FillTypeCases.INVERSE_WINDING
  } else if self.equals(classObj.INVERSE_EVEN_ODD?.as(JavaObject.self)) {
        return FillTypeCases.INVERSE_EVEN_ODD
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: FillTypeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<FillType>(environment: _environment)
    switch enumValue {
      case .WINDING:
        if let WINDING = classObj.WINDING {
          self.init(javaHolder: WINDING.javaHolder)
        } else {
          fatalError("Enum value WINDING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EVEN_ODD:
        if let EVEN_ODD = classObj.EVEN_ODD {
          self.init(javaHolder: EVEN_ODD.javaHolder)
        } else {
          fatalError("Enum value EVEN_ODD was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INVERSE_WINDING:
        if let INVERSE_WINDING = classObj.INVERSE_WINDING {
          self.init(javaHolder: INVERSE_WINDING.javaHolder)
        } else {
          fatalError("Enum value INVERSE_WINDING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .INVERSE_EVEN_ODD:
        if let INVERSE_EVEN_ODD = classObj.INVERSE_EVEN_ODD {
          self.init(javaHolder: INVERSE_EVEN_ODD.javaHolder)
        } else {
          fatalError("Enum value INVERSE_EVEN_ODD was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Path.FillType> {
  @JavaStaticField(isFinal: true)
  public var WINDING: Path.FillType!

  @JavaStaticField(isFinal: true)
  public var EVEN_ODD: Path.FillType!

  @JavaStaticField(isFinal: true)
  public var INVERSE_WINDING: Path.FillType!

  @JavaStaticField(isFinal: true)
  public var INVERSE_EVEN_ODD: Path.FillType!

  @JavaStaticMethod
  public func values() -> [Path.FillType?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Path.FillType!
}
