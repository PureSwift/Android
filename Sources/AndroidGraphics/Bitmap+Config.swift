// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

extension Bitmap {
  @JavaClass("android.graphics.Bitmap$Config")
  open class Config: Enum {
    public enum ConfigCases: Equatable {
      case ALPHA_8
  case RGB_565
  case ARGB_4444
  case ARGB_8888
  case RGBA_F16
  case HARDWARE
  case RGBA_1010102
    }

    public var enumValue: ConfigCases! {
      let classObj = self.javaClass
      if self.equals(classObj.ALPHA_8?.as(JavaObject.self)) {
        return ConfigCases.ALPHA_8
  } else if self.equals(classObj.RGB_565?.as(JavaObject.self)) {
        return ConfigCases.RGB_565
  } else if self.equals(classObj.ARGB_4444?.as(JavaObject.self)) {
        return ConfigCases.ARGB_4444
  } else if self.equals(classObj.ARGB_8888?.as(JavaObject.self)) {
        return ConfigCases.ARGB_8888
  } else if self.equals(classObj.RGBA_F16?.as(JavaObject.self)) {
        return ConfigCases.RGBA_F16
  } else if self.equals(classObj.HARDWARE?.as(JavaObject.self)) {
        return ConfigCases.HARDWARE
  } else if self.equals(classObj.RGBA_1010102?.as(JavaObject.self)) {
        return ConfigCases.RGBA_1010102
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: ConfigCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Config>(environment: _environment)
    switch enumValue {
      case .ALPHA_8:
        if let ALPHA_8 = classObj.ALPHA_8 {
          self.init(javaHolder: ALPHA_8.javaHolder)
        } else {
          fatalError("Enum value ALPHA_8 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RGB_565:
        if let RGB_565 = classObj.RGB_565 {
          self.init(javaHolder: RGB_565.javaHolder)
        } else {
          fatalError("Enum value RGB_565 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ARGB_4444:
        if let ARGB_4444 = classObj.ARGB_4444 {
          self.init(javaHolder: ARGB_4444.javaHolder)
        } else {
          fatalError("Enum value ARGB_4444 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ARGB_8888:
        if let ARGB_8888 = classObj.ARGB_8888 {
          self.init(javaHolder: ARGB_8888.javaHolder)
        } else {
          fatalError("Enum value ARGB_8888 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RGBA_F16:
        if let RGBA_F16 = classObj.RGBA_F16 {
          self.init(javaHolder: RGBA_F16.javaHolder)
        } else {
          fatalError("Enum value RGBA_F16 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HARDWARE:
        if let HARDWARE = classObj.HARDWARE {
          self.init(javaHolder: HARDWARE.javaHolder)
        } else {
          fatalError("Enum value HARDWARE was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .RGBA_1010102:
        if let RGBA_1010102 = classObj.RGBA_1010102 {
          self.init(javaHolder: RGBA_1010102.javaHolder)
        } else {
          fatalError("Enum value RGBA_1010102 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Bitmap.Config> {
  @JavaStaticField(isFinal: true)
  public var ALPHA_8: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var RGB_565: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var ARGB_4444: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var ARGB_8888: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var RGBA_F16: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var HARDWARE: Bitmap.Config!

  @JavaStaticField(isFinal: true)
  public var RGBA_1010102: Bitmap.Config!

  @JavaStaticMethod
  public func values() -> [Bitmap.Config?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Bitmap.Config!
}
