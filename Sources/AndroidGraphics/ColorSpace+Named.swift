// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension ColorSpace {
  @JavaClass("android.graphics.ColorSpace$Named")
  open class Named: Enum {
    public enum NamedCases: Equatable {
      case SRGB
  case LINEAR_SRGB
  case EXTENDED_SRGB
  case LINEAR_EXTENDED_SRGB
  case BT709
  case BT2020
  case DCI_P3
  case DISPLAY_P3
  case NTSC_1953
  case SMPTE_C
  case ADOBE_RGB
  case PRO_PHOTO_RGB
  case ACES
  case ACESCG
  case CIE_XYZ
  case CIE_LAB
    }

    public var enumValue: NamedCases! {
      let classObj = self.javaClass
      if self.equals(classObj.SRGB?.as(JavaObject.self)) {
        return NamedCases.SRGB
  } else if self.equals(classObj.LINEAR_SRGB?.as(JavaObject.self)) {
        return NamedCases.LINEAR_SRGB
  } else if self.equals(classObj.EXTENDED_SRGB?.as(JavaObject.self)) {
        return NamedCases.EXTENDED_SRGB
  } else if self.equals(classObj.LINEAR_EXTENDED_SRGB?.as(JavaObject.self)) {
        return NamedCases.LINEAR_EXTENDED_SRGB
  } else if self.equals(classObj.BT709?.as(JavaObject.self)) {
        return NamedCases.BT709
  } else if self.equals(classObj.BT2020?.as(JavaObject.self)) {
        return NamedCases.BT2020
  } else if self.equals(classObj.DCI_P3?.as(JavaObject.self)) {
        return NamedCases.DCI_P3
  } else if self.equals(classObj.DISPLAY_P3?.as(JavaObject.self)) {
        return NamedCases.DISPLAY_P3
  } else if self.equals(classObj.NTSC_1953?.as(JavaObject.self)) {
        return NamedCases.NTSC_1953
  } else if self.equals(classObj.SMPTE_C?.as(JavaObject.self)) {
        return NamedCases.SMPTE_C
  } else if self.equals(classObj.ADOBE_RGB?.as(JavaObject.self)) {
        return NamedCases.ADOBE_RGB
  } else if self.equals(classObj.PRO_PHOTO_RGB?.as(JavaObject.self)) {
        return NamedCases.PRO_PHOTO_RGB
  } else if self.equals(classObj.ACES?.as(JavaObject.self)) {
        return NamedCases.ACES
  } else if self.equals(classObj.ACESCG?.as(JavaObject.self)) {
        return NamedCases.ACESCG
  } else if self.equals(classObj.CIE_XYZ?.as(JavaObject.self)) {
        return NamedCases.CIE_XYZ
  } else if self.equals(classObj.CIE_LAB?.as(JavaObject.self)) {
        return NamedCases.CIE_LAB
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: NamedCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Named>(environment: _environment)
    switch enumValue {
      case .SRGB:
        if let SRGB = classObj.SRGB {
          self.init(javaHolder: SRGB.javaHolder)
        } else {
          fatalError("Enum value SRGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LINEAR_SRGB:
        if let LINEAR_SRGB = classObj.LINEAR_SRGB {
          self.init(javaHolder: LINEAR_SRGB.javaHolder)
        } else {
          fatalError("Enum value LINEAR_SRGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .EXTENDED_SRGB:
        if let EXTENDED_SRGB = classObj.EXTENDED_SRGB {
          self.init(javaHolder: EXTENDED_SRGB.javaHolder)
        } else {
          fatalError("Enum value EXTENDED_SRGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .LINEAR_EXTENDED_SRGB:
        if let LINEAR_EXTENDED_SRGB = classObj.LINEAR_EXTENDED_SRGB {
          self.init(javaHolder: LINEAR_EXTENDED_SRGB.javaHolder)
        } else {
          fatalError("Enum value LINEAR_EXTENDED_SRGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BT709:
        if let BT709 = classObj.BT709 {
          self.init(javaHolder: BT709.javaHolder)
        } else {
          fatalError("Enum value BT709 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BT2020:
        if let BT2020 = classObj.BT2020 {
          self.init(javaHolder: BT2020.javaHolder)
        } else {
          fatalError("Enum value BT2020 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DCI_P3:
        if let DCI_P3 = classObj.DCI_P3 {
          self.init(javaHolder: DCI_P3.javaHolder)
        } else {
          fatalError("Enum value DCI_P3 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DISPLAY_P3:
        if let DISPLAY_P3 = classObj.DISPLAY_P3 {
          self.init(javaHolder: DISPLAY_P3.javaHolder)
        } else {
          fatalError("Enum value DISPLAY_P3 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NTSC_1953:
        if let NTSC_1953 = classObj.NTSC_1953 {
          self.init(javaHolder: NTSC_1953.javaHolder)
        } else {
          fatalError("Enum value NTSC_1953 was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .SMPTE_C:
        if let SMPTE_C = classObj.SMPTE_C {
          self.init(javaHolder: SMPTE_C.javaHolder)
        } else {
          fatalError("Enum value SMPTE_C was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ADOBE_RGB:
        if let ADOBE_RGB = classObj.ADOBE_RGB {
          self.init(javaHolder: ADOBE_RGB.javaHolder)
        } else {
          fatalError("Enum value ADOBE_RGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PRO_PHOTO_RGB:
        if let PRO_PHOTO_RGB = classObj.PRO_PHOTO_RGB {
          self.init(javaHolder: PRO_PHOTO_RGB.javaHolder)
        } else {
          fatalError("Enum value PRO_PHOTO_RGB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ACES:
        if let ACES = classObj.ACES {
          self.init(javaHolder: ACES.javaHolder)
        } else {
          fatalError("Enum value ACES was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .ACESCG:
        if let ACESCG = classObj.ACESCG {
          self.init(javaHolder: ACESCG.javaHolder)
        } else {
          fatalError("Enum value ACESCG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CIE_XYZ:
        if let CIE_XYZ = classObj.CIE_XYZ {
          self.init(javaHolder: CIE_XYZ.javaHolder)
        } else {
          fatalError("Enum value CIE_XYZ was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CIE_LAB:
        if let CIE_LAB = classObj.CIE_LAB {
          self.init(javaHolder: CIE_LAB.javaHolder)
        } else {
          fatalError("Enum value CIE_LAB was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<ColorSpace.Named> {
  @JavaStaticField(isFinal: true)
  public var SRGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var LINEAR_SRGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var EXTENDED_SRGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var LINEAR_EXTENDED_SRGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var BT709: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var BT2020: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var DCI_P3: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var DISPLAY_P3: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var NTSC_1953: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var SMPTE_C: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var ADOBE_RGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var PRO_PHOTO_RGB: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var ACES: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var ACESCG: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var CIE_XYZ: ColorSpace.Named!

  @JavaStaticField(isFinal: true)
  public var CIE_LAB: ColorSpace.Named!

  @JavaStaticMethod
  public func values() -> [ColorSpace.Named?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> ColorSpace.Named!
}
