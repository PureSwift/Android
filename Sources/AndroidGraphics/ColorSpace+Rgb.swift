// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitFunction
import JavaRuntime

extension ColorSpace {
  @JavaClass("android.graphics.ColorSpace$Rgb")
  open class Rgb: ColorSpace {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: JavaDoubleUnaryOperator?, _ arg4: JavaDoubleUnaryOperator?, _ arg5: Float, _ arg6: Float, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: ColorSpace.Rgb.TransferParameters?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: ColorSpace.Rgb.TransferParameters?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: JavaDoubleUnaryOperator?, _ arg3: JavaDoubleUnaryOperator?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: [Float], _ arg3: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: [Float], _ arg2: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getWhitePoint(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func getWhitePoint() -> [Float]

  @JavaMethod
  open func getPrimaries() -> [Float]

  @JavaMethod
  open func getPrimaries(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func getTransform(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func getTransform() -> [Float]

  @JavaMethod
  open func getInverseTransform() -> [Float]

  @JavaMethod
  open func getInverseTransform(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func getOetf() -> JavaDoubleUnaryOperator!

  @JavaMethod
  open func getEotf() -> JavaDoubleUnaryOperator!

  @JavaMethod
  open func getTransferParameters() -> ColorSpace.Rgb.TransferParameters!

  @JavaMethod
  open override func isSrgb() -> Bool

  @JavaMethod
  open override func isWideGamut() -> Bool

  @JavaMethod
  open override func getMinValue(_ arg0: Int32) -> Float

  @JavaMethod
  open override func getMaxValue(_ arg0: Int32) -> Float

  @JavaMethod
  open func toLinear(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open func toLinear(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open func fromLinear(_ arg0: Float, _ arg1: Float, _ arg2: Float) -> [Float]

  @JavaMethod
  open func fromLinear(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override func toXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override func fromXyz(_ arg0: [Float]) -> [Float]

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func hashCode() -> Int32
  }
}
extension JavaClass<ColorSpace.Rgb> {
  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_A: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_B: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_C: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D50: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D55: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D60: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D65: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_D75: [Float]

  @JavaStaticField(isFinal: true)
  public var ILLUMINANT_E: [Float]

  @JavaStaticField(isFinal: true)
  public var MAX_ID: Int32

  @JavaStaticField(isFinal: true)
  public var MIN_ID: Int32
}
