// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension Bitmap {
  @JavaClass("android.graphics.Bitmap$CompressFormat")
  open class CompressFormat: Enum {
    public enum CompressFormatCases: Equatable {
      case JPEG
  case PNG
  case WEBP
  case WEBP_LOSSY
  case WEBP_LOSSLESS
    }

    public var enumValue: CompressFormatCases! {
      let classObj = self.javaClass
      if self.equals(classObj.JPEG?.as(JavaObject.self)) {
        return CompressFormatCases.JPEG
  } else if self.equals(classObj.PNG?.as(JavaObject.self)) {
        return CompressFormatCases.PNG
  } else if self.equals(classObj.WEBP?.as(JavaObject.self)) {
        return CompressFormatCases.WEBP
  } else if self.equals(classObj.WEBP_LOSSY?.as(JavaObject.self)) {
        return CompressFormatCases.WEBP_LOSSY
  } else if self.equals(classObj.WEBP_LOSSLESS?.as(JavaObject.self)) {
        return CompressFormatCases.WEBP_LOSSLESS
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: CompressFormatCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<CompressFormat>(environment: _environment)
    switch enumValue {
      case .JPEG:
        if let JPEG = classObj.JPEG {
          self.init(javaHolder: JPEG.javaHolder)
        } else {
          fatalError("Enum value JPEG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .PNG:
        if let PNG = classObj.PNG {
          self.init(javaHolder: PNG.javaHolder)
        } else {
          fatalError("Enum value PNG was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WEBP:
        if let WEBP = classObj.WEBP {
          self.init(javaHolder: WEBP.javaHolder)
        } else {
          fatalError("Enum value WEBP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WEBP_LOSSY:
        if let WEBP_LOSSY = classObj.WEBP_LOSSY {
          self.init(javaHolder: WEBP_LOSSY.javaHolder)
        } else {
          fatalError("Enum value WEBP_LOSSY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .WEBP_LOSSLESS:
        if let WEBP_LOSSLESS = classObj.WEBP_LOSSLESS {
          self.init(javaHolder: WEBP_LOSSLESS.javaHolder)
        } else {
          fatalError("Enum value WEBP_LOSSLESS was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension JavaClass<Bitmap.CompressFormat> {
  @JavaStaticField(isFinal: true)
  public var JPEG: Bitmap.CompressFormat!

  @JavaStaticField(isFinal: true)
  public var PNG: Bitmap.CompressFormat!

  @JavaStaticField(isFinal: true)
  public var WEBP: Bitmap.CompressFormat!

  @JavaStaticField(isFinal: true)
  public var WEBP_LOSSY: Bitmap.CompressFormat!

  @JavaStaticField(isFinal: true)
  public var WEBP_LOSSLESS: Bitmap.CompressFormat!

  @JavaStaticMethod
  public func values() -> [Bitmap.CompressFormat?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Bitmap.CompressFormat!
}
