// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import JavaIO
import AndroidUtil
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.drawable.BitmapDrawable")
open class BitmapDrawable: Drawable {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Resources?, _ arg1: Bitmap?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Bitmap?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Resources?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Resources?, _ arg1: InputStream?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: InputStream?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Resources?, _ arg1: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  open override func canApplyTheme() -> Bool

  @JavaMethod
  open override func getChangingConfigurations() -> Int32

  @JavaMethod
  open override func getOpacity() -> Int32

  @JavaMethod
  open override func isStateful() -> Bool

  @JavaMethod
  open func setTargetDensity(_ arg0: Canvas?)

  @JavaMethod
  open func setTargetDensity(_ arg0: Int32)

  @JavaMethod
  open func setTargetDensity(_ arg0: DisplayMetrics?)

  @JavaMethod
  open func getPaint() -> Paint!

  @JavaMethod
  open func setAntiAlias(_ arg0: Bool)

  @JavaMethod
  open override func draw(_ arg0: Canvas?)

  @JavaMethod
  open override func getAlpha() -> Int32

  @JavaMethod
  open override func hasFocusStateSpecified() -> Bool

  @JavaMethod
  open override func applyTheme(_ arg0: Resources.Theme?)

  @JavaMethod
  open override func setAlpha(_ arg0: Int32)

  @JavaMethod
  open override func setTintList(_ arg0: ColorStateList?)

  @JavaMethod
  open override func setTintBlendMode(_ arg0: BlendMode?)

  @JavaMethod
  open override func getColorFilter() -> ColorFilter!

  @JavaMethod
  open override func setColorFilter(_ arg0: ColorFilter?)

  @JavaMethod
  open override func onBoundsChange(_ arg0: Rect?)

  @JavaMethod
  open override func onStateChange(_ arg0: [Int32]) -> Bool

  @JavaMethod
  open override func getConstantState() -> Drawable.ConstantState!

  @JavaMethod
  open override func mutate() -> Drawable!

  @JavaMethod
  open override func setDither(_ arg0: Bool)

  @JavaMethod
  open override func setFilterBitmap(_ arg0: Bool)

  @JavaMethod
  open override func isFilterBitmap() -> Bool

  @JavaMethod
  open override func setAutoMirrored(_ arg0: Bool)

  @JavaMethod
  open override func isAutoMirrored() -> Bool

  @JavaMethod
  open override func getIntrinsicWidth() -> Int32

  @JavaMethod
  open override func getIntrinsicHeight() -> Int32

  @JavaMethod
  open override func getOpticalInsets() -> Insets!

  @JavaMethod
  open override func getOutline(_ arg0: Outline?)

  @JavaMethod
  open func getBitmap() -> Bitmap!

  @JavaMethod
  open func hasMipMap() -> Bool

  @JavaMethod
  open func setBitmap(_ arg0: Bitmap?)

  @JavaMethod
  open func getGravity() -> Int32

  @JavaMethod
  open func setGravity(_ arg0: Int32)

  @JavaMethod
  open func setMipMap(_ arg0: Bool)

  @JavaMethod
  open func hasAntiAlias() -> Bool

  @JavaMethod
  open func getTileModeX() -> Shader.TileMode!

  @JavaMethod
  open func getTileModeY() -> Shader.TileMode!

  @JavaMethod
  open func setTileModeX(_ arg0: Shader.TileMode?)

  @JavaMethod
  open func setTileModeY(_ arg0: Shader.TileMode?)

  @JavaMethod
  open func setTileModeXY(_ arg0: Shader.TileMode?, _ arg1: Shader.TileMode?)
}
