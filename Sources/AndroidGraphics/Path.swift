// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.Path")
open class Path: JavaObject {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Path?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func isConvex() -> Bool

  @JavaMethod
  open func getFillType() -> Path.FillType!

  @JavaMethod
  open func setFillType(_ arg0: Path.FillType?)

  @JavaMethod
  open func isInverseFillType() -> Bool

  @JavaMethod
  open func toggleInverseFillType()

  @JavaMethod
  open func isRect(_ arg0: RectF?) -> Bool

  @JavaMethod
  open func computeBounds(_ arg0: RectF?, _ arg1: Bool)

  @JavaMethod
  open func incReserve(_ arg0: Int32)

  @JavaMethod
  open func moveTo(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func rMoveTo(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func lineTo(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func rLineTo(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func quadTo(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float)

  @JavaMethod
  open func rQuadTo(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float)

  @JavaMethod
  open func cubicTo(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float, _ arg5: Float)

  @JavaMethod
  open func rCubicTo(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float, _ arg5: Float)

  @JavaMethod
  open func arcTo(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float, _ arg5: Float, _ arg6: Bool)

  @JavaMethod
  open func arcTo(_ arg0: RectF?, _ arg1: Float, _ arg2: Float)

  @JavaMethod
  open func arcTo(_ arg0: RectF?, _ arg1: Float, _ arg2: Float, _ arg3: Bool)

  @JavaMethod
  open func addRect(_ arg0: RectF?, _ arg1: Path.Direction?)

  @JavaMethod
  open func addRect(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Path.Direction?)

  @JavaMethod
  open func addOval(_ arg0: RectF?, _ arg1: Path.Direction?)

  @JavaMethod
  open func addOval(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Path.Direction?)

  @JavaMethod
  open func addCircle(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Path.Direction?)

  @JavaMethod
  open func addArc(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float, _ arg5: Float)

  @JavaMethod
  open func addArc(_ arg0: RectF?, _ arg1: Float, _ arg2: Float)

  @JavaMethod
  open func addRoundRect(_ arg0: RectF?, _ arg1: [Float], _ arg2: Path.Direction?)

  @JavaMethod
  open func addRoundRect(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: Float, _ arg5: Float, _ arg6: Path.Direction?)

  @JavaMethod
  open func addRoundRect(_ arg0: RectF?, _ arg1: Float, _ arg2: Float, _ arg3: Path.Direction?)

  @JavaMethod
  open func addRoundRect(_ arg0: Float, _ arg1: Float, _ arg2: Float, _ arg3: Float, _ arg4: [Float], _ arg5: Path.Direction?)

  @JavaMethod
  open func addPath(_ arg0: Path?, _ arg1: Matrix?)

  @JavaMethod
  open func addPath(_ arg0: Path?, _ arg1: Float, _ arg2: Float)

  @JavaMethod
  open func addPath(_ arg0: Path?)

  @JavaMethod
  open func setLastPoint(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func approximate(_ arg0: Float) -> [Float]

  @JavaMethod
  open func reset()

  @JavaMethod
  open func isEmpty() -> Bool

  @JavaMethod
  open func offset(_ arg0: Float, _ arg1: Float, _ arg2: Path?)

  @JavaMethod
  open func offset(_ arg0: Float, _ arg1: Float)

  @JavaMethod
  open func transform(_ arg0: Matrix?)

  @JavaMethod
  open func transform(_ arg0: Matrix?, _ arg1: Path?)

  @JavaMethod
  open func set(_ arg0: Path?)

  @JavaMethod
  open func op(_ arg0: Path?, _ arg1: Path.Op?) -> Bool

  @JavaMethod
  open func op(_ arg0: Path?, _ arg1: Path?, _ arg2: Path.Op?) -> Bool

  @JavaMethod
  open func close()

  @JavaMethod
  open func rewind()
}
