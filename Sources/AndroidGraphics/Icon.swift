// Auto-generated by Java-to-Swift wrapper generator.
import AndroidContent
import AndroidOS
import JavaKit
import JavaRuntime

@JavaClass("android.graphics.drawable.Icon", implements: Parcelable.self)
open class Icon: JavaObject {
  @JavaMethod
  open func describeContents() -> Int32

  @JavaMethod
  open func writeToParcel(_ arg0: Parcel?, _ arg1: Int32)

  @JavaMethod
  open func setTintList(_ arg0: ColorStateList?) -> Icon!

  @JavaMethod
  open func setTintBlendMode(_ arg0: BlendMode?) -> Icon!

  @JavaMethod
  open func setTint(_ arg0: Int32) -> Icon!

  @JavaMethod
  open func setTintMode(_ arg0: PorterDuff.Mode?) -> Icon!

  @JavaMethod
  open func getResPackage() -> String

  @JavaMethod
  open func getResId() -> Int32

  @JavaMethod
  open func loadDrawableAsync(_ arg0: Context?, _ arg1: Icon.OnDrawableLoadedListener?, _ arg2: Handler?)

  @JavaMethod
  open func loadDrawableAsync(_ arg0: Context?, _ arg1: Message?)

  @JavaMethod
  open func loadDrawable(_ arg0: Context?) -> Drawable!

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func getType() -> Int32
}
extension JavaClass<Icon> {
  @JavaStaticField(isFinal: true)
  public var CREATOR: Parcelable.Creator<Icon>!

  @JavaStaticField(isFinal: true)
  public var TYPE_ADAPTIVE_BITMAP: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE_BITMAP: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE_DATA: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE_RESOURCE: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE_URI: Int32

  @JavaStaticField(isFinal: true)
  public var TYPE_URI_ADAPTIVE_BITMAP: Int32

  @JavaStaticField(isFinal: true)
  public var CONTENTS_FILE_DESCRIPTOR: Int32

  @JavaStaticField(isFinal: true)
  public var PARCELABLE_WRITE_RETURN_VALUE: Int32

  @JavaStaticMethod
  public func createWithResource(_ arg0: String, _ arg1: Int32) -> Icon!

  @JavaStaticMethod
  public func createWithResource(_ arg0: Context?, _ arg1: Int32) -> Icon!

  @JavaStaticMethod
  public func createWithBitmap(_ arg0: Bitmap?) -> Icon!

  @JavaStaticMethod
  public func createWithAdaptiveBitmap(_ arg0: Bitmap?) -> Icon!

  @JavaStaticMethod
  public func createWithData(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32) -> Icon!

  @JavaStaticMethod
  public func createWithContentUri(_ arg0: String) -> Icon!

  @JavaStaticMethod
  public func createWithAdaptiveBitmapContentUri(_ arg0: String) -> Icon!

  @JavaStaticMethod
  public func createWithFilePath(_ arg0: String) -> Icon!
}
