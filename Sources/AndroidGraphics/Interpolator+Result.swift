// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

extension Interpolator {
  @JavaClass("android.graphics.Interpolator$Result")
  open class Result: Enum {
    public enum ResultCases: Equatable {
      case NORMAL
  case FREEZE_START
  case FREEZE_END
    }

    public var enumValue: ResultCases! {
      let classObj = self.javaClass
      if self.equals(classObj.NORMAL?.as(JavaObject.self)) {
        return ResultCases.NORMAL
  } else if self.equals(classObj.FREEZE_START?.as(JavaObject.self)) {
        return ResultCases.FREEZE_START
  } else if self.equals(classObj.FREEZE_END?.as(JavaObject.self)) {
        return ResultCases.FREEZE_END
  } else {
        return nil
      }
    }

  public convenience init(_ enumValue: ResultCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<Result>(environment: _environment)
    switch enumValue {
      case .NORMAL:
        if let NORMAL = classObj.NORMAL {
          self.init(javaHolder: NORMAL.javaHolder)
        } else {
          fatalError("Enum value NORMAL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FREEZE_START:
        if let FREEZE_START = classObj.FREEZE_START {
          self.init(javaHolder: FREEZE_START.javaHolder)
        } else {
          fatalError("Enum value FREEZE_START was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FREEZE_END:
        if let FREEZE_END = classObj.FREEZE_END {
          self.init(javaHolder: FREEZE_END.javaHolder)
        } else {
          fatalError("Enum value FREEZE_END was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
  }
}
extension Interpolator.Result {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<Interpolator.Result> {
  @JavaStaticField(isFinal: true)
  public var NORMAL: Interpolator.Result!

  @JavaStaticField(isFinal: true)
  public var FREEZE_START: Interpolator.Result!

  @JavaStaticField(isFinal: true)
  public var FREEZE_END: Interpolator.Result!

  @JavaStaticMethod
  public func values() -> [Interpolator.Result?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> Interpolator.Result!
}
