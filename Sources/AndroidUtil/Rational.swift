// Auto-generated by Java-to-Swift wrapper generator.
import JavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.util.Rational", implements: Comparable.self)
open class Rational: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getNumerator() -> Int32

  @JavaMethod
  open func getDenominator() -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func isInfinite() -> Bool

  @JavaMethod
  open func isFinite() -> Bool

  @JavaMethod
  open func compareTo(_ arg0: Rational?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open override func shortValue() -> Int16

  @JavaMethod
  open override func intValue() -> Int32

  @JavaMethod
  open override func longValue() -> Int64

  @JavaMethod
  open override func floatValue() -> Float

  @JavaMethod
  open override func doubleValue() -> Double

  @JavaMethod
  open func isNaN() -> Bool

  @JavaMethod
  open func isZero() -> Bool
}
extension JavaClass<Rational> {
  @JavaStaticField(isFinal: true)
  public var NEGATIVE_INFINITY: Rational!

  @JavaStaticField(isFinal: true)
  public var NaN: Rational!

  @JavaStaticField(isFinal: true)
  public var POSITIVE_INFINITY: Rational!

  @JavaStaticField(isFinal: true)
  public var ZERO: Rational!

  @JavaStaticMethod
  public func parseRational(_ arg0: String) throws -> Rational!
}
