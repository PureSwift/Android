// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("android.util.JsonToken")
open class JsonToken: Enum {
  public enum JsonTokenCases: Equatable {
    case BEGIN_ARRAY
    case END_ARRAY
    case BEGIN_OBJECT
    case END_OBJECT
    case NAME
    case STRING
    case NUMBER
    case BOOLEAN
    case NULL
    case END_DOCUMENT
  }

  public var enumValue: JsonTokenCases! {
    let classObj = self.javaClass
    if self.equals(classObj.BEGIN_ARRAY?.as(JavaObject.self)) {
      return JsonTokenCases.BEGIN_ARRAY
    } else if self.equals(classObj.END_ARRAY?.as(JavaObject.self)) {
      return JsonTokenCases.END_ARRAY
    } else if self.equals(classObj.BEGIN_OBJECT?.as(JavaObject.self)) {
      return JsonTokenCases.BEGIN_OBJECT
    } else if self.equals(classObj.END_OBJECT?.as(JavaObject.self)) {
      return JsonTokenCases.END_OBJECT
    } else if self.equals(classObj.NAME?.as(JavaObject.self)) {
      return JsonTokenCases.NAME
    } else if self.equals(classObj.STRING?.as(JavaObject.self)) {
      return JsonTokenCases.STRING
    } else if self.equals(classObj.NUMBER?.as(JavaObject.self)) {
      return JsonTokenCases.NUMBER
    } else if self.equals(classObj.BOOLEAN?.as(JavaObject.self)) {
      return JsonTokenCases.BOOLEAN
    } else if self.equals(classObj.NULL?.as(JavaObject.self)) {
      return JsonTokenCases.NULL
    } else if self.equals(classObj.END_DOCUMENT?.as(JavaObject.self)) {
      return JsonTokenCases.END_DOCUMENT
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: JsonTokenCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<JsonToken>(environment: _environment)
    switch enumValue {
      case .BEGIN_ARRAY:
        if let BEGIN_ARRAY = classObj.BEGIN_ARRAY {
          self.init(javaHolder: BEGIN_ARRAY.javaHolder)
        } else {
          fatalError("Enum value BEGIN_ARRAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .END_ARRAY:
        if let END_ARRAY = classObj.END_ARRAY {
          self.init(javaHolder: END_ARRAY.javaHolder)
        } else {
          fatalError("Enum value END_ARRAY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BEGIN_OBJECT:
        if let BEGIN_OBJECT = classObj.BEGIN_OBJECT {
          self.init(javaHolder: BEGIN_OBJECT.javaHolder)
        } else {
          fatalError("Enum value BEGIN_OBJECT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .END_OBJECT:
        if let END_OBJECT = classObj.END_OBJECT {
          self.init(javaHolder: END_OBJECT.javaHolder)
        } else {
          fatalError("Enum value END_OBJECT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NAME:
        if let NAME = classObj.NAME {
          self.init(javaHolder: NAME.javaHolder)
        } else {
          fatalError("Enum value NAME was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .STRING:
        if let STRING = classObj.STRING {
          self.init(javaHolder: STRING.javaHolder)
        } else {
          fatalError("Enum value STRING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NUMBER:
        if let NUMBER = classObj.NUMBER {
          self.init(javaHolder: NUMBER.javaHolder)
        } else {
          fatalError("Enum value NUMBER was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .BOOLEAN:
        if let BOOLEAN = classObj.BOOLEAN {
          self.init(javaHolder: BOOLEAN.javaHolder)
        } else {
          fatalError("Enum value BOOLEAN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .NULL:
        if let NULL = classObj.NULL {
          self.init(javaHolder: NULL.javaHolder)
        } else {
          fatalError("Enum value NULL was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .END_DOCUMENT:
        if let END_DOCUMENT = classObj.END_DOCUMENT {
          self.init(javaHolder: END_DOCUMENT.javaHolder)
        } else {
          fatalError("Enum value END_DOCUMENT was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension JsonToken {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<JsonToken> {
  @JavaStaticField(isFinal: true)
  public var BEGIN_ARRAY: JsonToken!

  @JavaStaticField(isFinal: true)
  public var END_ARRAY: JsonToken!

  @JavaStaticField(isFinal: true)
  public var BEGIN_OBJECT: JsonToken!

  @JavaStaticField(isFinal: true)
  public var END_OBJECT: JsonToken!

  @JavaStaticField(isFinal: true)
  public var NAME: JsonToken!

  @JavaStaticField(isFinal: true)
  public var STRING: JsonToken!

  @JavaStaticField(isFinal: true)
  public var NUMBER: JsonToken!

  @JavaStaticField(isFinal: true)
  public var BOOLEAN: JsonToken!

  @JavaStaticField(isFinal: true)
  public var NULL: JsonToken!

  @JavaStaticField(isFinal: true)
  public var END_DOCUMENT: JsonToken!

  @JavaStaticMethod
  public func values() -> [JsonToken?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> JsonToken!
}
