// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.math.BigDecimal", implements: Comparable.self)
open class BigDecimal: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], _ arg1: Int32, _ arg2: Int32, _ arg3: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [UInt16], _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: BigInteger?, _ arg1: Int32, _ arg2: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int64, _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Double, _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: BigInteger?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: BigInteger?, _ arg1: MathContext?, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: BigInteger?, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  open func stripTrailingZeros() -> BigDecimal!

  @JavaMethod
  open func movePointLeft(_ arg0: Int32) -> BigDecimal!

  @JavaMethod
  open func toEngineeringString() -> String

  @JavaMethod
  open func toPlainString() -> String

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func abs() -> BigDecimal!

  @JavaMethod
  open func abs(_ arg0: MathContext?) -> BigDecimal!

  @JavaMethod
  open func sqrt(_ arg0: MathContext?) -> BigDecimal!

  @JavaMethod
  open func pow(_ arg0: Int32, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func pow(_ arg0: Int32) -> BigDecimal!

  @JavaMethod
  open func min(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func max(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func round(_ arg0: MathContext?) -> BigDecimal!

  @JavaMethod
  open func signum() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: BigDecimal?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open override func intValue() -> Int32

  @JavaMethod
  open override func longValue() -> Int64

  @JavaMethod
  open override func floatValue() -> Float

  @JavaMethod
  open override func doubleValue() -> Double

  @JavaMethod
  open func scale() -> Int32

  @JavaMethod
  open func add(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func add(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func multiply(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func multiply(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func ulp() -> BigDecimal!

  @JavaMethod
  open func negate() -> BigDecimal!

  @JavaMethod
  open func negate(_ arg0: MathContext?) -> BigDecimal!

  @JavaMethod
  open func remainder(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func remainder(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func subtract(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func subtract(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func toBigInteger() -> BigInteger!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?, _ arg1: Int32, _ arg2: RoundingMode?) -> BigDecimal!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?, _ arg1: Int32) -> BigDecimal!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?, _ arg1: RoundingMode?) -> BigDecimal!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?, _ arg1: Int32, _ arg2: Int32) -> BigDecimal!

  @JavaMethod
  open func divide(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func divideAndRemainder(_ arg0: BigDecimal?, _ arg1: MathContext?) -> [BigDecimal?]

  @JavaMethod
  open func divideAndRemainder(_ arg0: BigDecimal?) -> [BigDecimal?]

  @JavaMethod
  open func longValueExact() -> Int64

  @JavaMethod
  open func intValueExact() -> Int32

  @JavaMethod
  open func shortValueExact() -> Int16

  @JavaMethod
  open func byteValueExact() -> Int8

  @JavaMethod
  open func scaleByPowerOfTen(_ arg0: Int32) -> BigDecimal!

  @JavaMethod
  open func plus(_ arg0: MathContext?) -> BigDecimal!

  @JavaMethod
  open func plus() -> BigDecimal!

  @JavaMethod
  open func divideToIntegralValue(_ arg0: BigDecimal?) -> BigDecimal!

  @JavaMethod
  open func divideToIntegralValue(_ arg0: BigDecimal?, _ arg1: MathContext?) -> BigDecimal!

  @JavaMethod
  open func movePointRight(_ arg0: Int32) -> BigDecimal!

  @JavaMethod
  open func toBigIntegerExact() -> BigInteger!

  @JavaMethod
  open func precision() -> Int32

  @JavaMethod
  open func unscaledValue() -> BigInteger!

  @JavaMethod
  open func setScale(_ arg0: Int32, _ arg1: RoundingMode?) -> BigDecimal!

  @JavaMethod
  open func setScale(_ arg0: Int32) -> BigDecimal!

  @JavaMethod
  open func setScale(_ arg0: Int32, _ arg1: Int32) -> BigDecimal!
}
extension JavaClass<BigDecimal> {
  @JavaStaticField(isFinal: true)
  public var ZERO: BigDecimal!

  @JavaStaticField(isFinal: true)
  public var ONE: BigDecimal!

  @JavaStaticField(isFinal: true)
  public var TWO: BigDecimal!

  @JavaStaticField(isFinal: true)
  public var TEN: BigDecimal!

  @JavaStaticField(isFinal: true)
  public var ROUND_UP: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_DOWN: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_CEILING: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_FLOOR: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_HALF_UP: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_HALF_DOWN: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_HALF_EVEN: Int32

  @JavaStaticField(isFinal: true)
  public var ROUND_UNNECESSARY: Int32

  @JavaStaticMethod
  public func valueOf(_ arg0: Int64, _ arg1: Int32) -> BigDecimal!

  @JavaStaticMethod
  public func valueOf(_ arg0: Int64) -> BigDecimal!

  @JavaStaticMethod
  public func valueOf(_ arg0: Double) -> BigDecimal!
}
