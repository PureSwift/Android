// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.math.BigInteger", implements: Comparable.self)
open class BigInteger: JavaNumber {
  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: [Int8], _ arg2: Int32, _ arg3: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: [Int8], _ arg1: Int32, _ arg2: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: String, _ arg1: Int32, environment: JNIEnvironment? = nil)

  @JavaMethod
  @_nonoverride public convenience init(_ arg0: Int32, _ arg1: [Int8], environment: JNIEnvironment? = nil)

  @JavaMethod
  open func bitCount() -> Int32

  @JavaMethod
  open override func equals(_ arg0: JavaObject?) -> Bool

  @JavaMethod
  open override func toString() -> String

  @JavaMethod
  open func toString(_ arg0: Int32) -> String

  @JavaMethod
  open override func hashCode() -> Int32

  @JavaMethod
  open func abs() -> BigInteger!

  @JavaMethod
  open func sqrt() -> BigInteger!

  @JavaMethod
  open func pow(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func min(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func max(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func signum() -> Int32

  @JavaMethod
  open func compareTo(_ arg0: BigInteger?) -> Int32

  @JavaMethod
  open func compareTo(_ arg0: JavaObject?) -> Int32

  @JavaMethod
  open override func intValue() -> Int32

  @JavaMethod
  open override func longValue() -> Int64

  @JavaMethod
  open override func floatValue() -> Float

  @JavaMethod
  open override func doubleValue() -> Double

  @JavaMethod
  open func add(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func mod(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func setBit(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func shiftLeft(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func toByteArray() -> [Int8]

  @JavaMethod
  open func multiply(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func or(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func negate() -> BigInteger!

  @JavaMethod
  open func and(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func not() -> BigInteger!

  @JavaMethod
  open func remainder(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func bitLength() -> Int32

  @JavaMethod
  open func testBit(_ arg0: Int32) -> Bool

  @JavaMethod
  open func subtract(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func shiftRight(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func getLowestSetBit() -> Int32

  @JavaMethod
  open func modPow(_ arg0: BigInteger?, _ arg1: BigInteger?) -> BigInteger!

  @JavaMethod
  open func modInverse(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func divide(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func divideAndRemainder(_ arg0: BigInteger?) -> [BigInteger?]

  @JavaMethod
  open func nextProbablePrime() -> BigInteger!

  @JavaMethod
  open func parallelMultiply(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func sqrtAndRemainder() -> [BigInteger?]

  @JavaMethod
  open func gcd(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func xor(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func andNot(_ arg0: BigInteger?) -> BigInteger!

  @JavaMethod
  open func clearBit(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func flipBit(_ arg0: Int32) -> BigInteger!

  @JavaMethod
  open func isProbablePrime(_ arg0: Int32) -> Bool

  @JavaMethod
  open func longValueExact() -> Int64

  @JavaMethod
  open func intValueExact() -> Int32

  @JavaMethod
  open func shortValueExact() -> Int16

  @JavaMethod
  open func byteValueExact() -> Int8
}
extension JavaClass<BigInteger> {
  @JavaStaticField(isFinal: true)
  public var ZERO: BigInteger!

  @JavaStaticField(isFinal: true)
  public var ONE: BigInteger!

  @JavaStaticField(isFinal: true)
  public var TWO: BigInteger!

  @JavaStaticField(isFinal: true)
  public var TEN: BigInteger!

  @JavaStaticMethod
  public func valueOf(_ arg0: Int64) -> BigInteger!
}
