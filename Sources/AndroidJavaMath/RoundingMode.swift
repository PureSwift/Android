// Auto-generated by Java-to-Swift wrapper generator.
import AndroidJavaLang
import JavaKit
import JavaRuntime

@JavaClass("java.math.RoundingMode")
open class RoundingMode: Enum {
  public enum RoundingModeCases: Equatable {
    case UP
    case DOWN
    case CEILING
    case FLOOR
    case HALF_UP
    case HALF_DOWN
    case HALF_EVEN
    case UNNECESSARY
  }

  public var enumValue: RoundingModeCases! {
    let classObj = self.javaClass
    if self.equals(classObj.UP?.as(JavaObject.self)) {
      return RoundingModeCases.UP
    } else if self.equals(classObj.DOWN?.as(JavaObject.self)) {
      return RoundingModeCases.DOWN
    } else if self.equals(classObj.CEILING?.as(JavaObject.self)) {
      return RoundingModeCases.CEILING
    } else if self.equals(classObj.FLOOR?.as(JavaObject.self)) {
      return RoundingModeCases.FLOOR
    } else if self.equals(classObj.HALF_UP?.as(JavaObject.self)) {
      return RoundingModeCases.HALF_UP
    } else if self.equals(classObj.HALF_DOWN?.as(JavaObject.self)) {
      return RoundingModeCases.HALF_DOWN
    } else if self.equals(classObj.HALF_EVEN?.as(JavaObject.self)) {
      return RoundingModeCases.HALF_EVEN
    } else if self.equals(classObj.UNNECESSARY?.as(JavaObject.self)) {
      return RoundingModeCases.UNNECESSARY
    } else {
      return nil
    }
  }

  public convenience init(_ enumValue: RoundingModeCases, environment: JNIEnvironment? = nil) {
    let _environment = if let environment {
      environment
    } else {
      try! JavaVirtualMachine.shared().environment()
    }
    let classObj = try! JavaClass<RoundingMode>(environment: _environment)
    switch enumValue {
      case .UP:
        if let UP = classObj.UP {
          self.init(javaHolder: UP.javaHolder)
        } else {
          fatalError("Enum value UP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .DOWN:
        if let DOWN = classObj.DOWN {
          self.init(javaHolder: DOWN.javaHolder)
        } else {
          fatalError("Enum value DOWN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .CEILING:
        if let CEILING = classObj.CEILING {
          self.init(javaHolder: CEILING.javaHolder)
        } else {
          fatalError("Enum value CEILING was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .FLOOR:
        if let FLOOR = classObj.FLOOR {
          self.init(javaHolder: FLOOR.javaHolder)
        } else {
          fatalError("Enum value FLOOR was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HALF_UP:
        if let HALF_UP = classObj.HALF_UP {
          self.init(javaHolder: HALF_UP.javaHolder)
        } else {
          fatalError("Enum value HALF_UP was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HALF_DOWN:
        if let HALF_DOWN = classObj.HALF_DOWN {
          self.init(javaHolder: HALF_DOWN.javaHolder)
        } else {
          fatalError("Enum value HALF_DOWN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .HALF_EVEN:
        if let HALF_EVEN = classObj.HALF_EVEN {
          self.init(javaHolder: HALF_EVEN.javaHolder)
        } else {
          fatalError("Enum value HALF_EVEN was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
      case .UNNECESSARY:
        if let UNNECESSARY = classObj.UNNECESSARY {
          self.init(javaHolder: UNNECESSARY.javaHolder)
        } else {
          fatalError("Enum value UNNECESSARY was unexpectedly nil, please re-run Java2Swift on the most updated Java class")
        }
    }
  }
}
extension RoundingMode {
  @JavaClass("java.lang.Enum$EnumDesc")
  open class EnumDesc<E: AnyJavaObject>: JavaObject {
  @JavaMethod
  open override func toString() -> String
  }
}
extension JavaClass<RoundingMode> {
  @JavaStaticField(isFinal: true)
  public var UP: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var DOWN: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var CEILING: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var FLOOR: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var HALF_UP: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var HALF_DOWN: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var HALF_EVEN: RoundingMode!

  @JavaStaticField(isFinal: true)
  public var UNNECESSARY: RoundingMode!

  @JavaStaticMethod
  public func values() -> [RoundingMode?]

  @JavaStaticMethod
  public func valueOf(_ arg0: String) -> RoundingMode!

  @JavaStaticMethod
  public func valueOf(_ arg0: Int32) -> RoundingMode!
}
