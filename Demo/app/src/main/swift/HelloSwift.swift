// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaKitFunction
import JavaRuntime

@JavaClass("com.example.swift.HelloSwift")
open class HelloSwift: JavaObject {
  @JavaField(isFinal: false)
  public var value: Double

  @JavaField(isFinal: false)
  public var name: String

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func greet(_ name: String)

  @JavaMethod
  open func sayHelloBack(_ i: Int32) -> Double

  @JavaMethod
  open func lessThanTen() -> JavaPredicate<JavaInteger>!

  @JavaMethod
  open func doublesToStrings(_ doubles: [Double]) -> [String]

  @JavaMethod
  open func throwMessage(_ message: String) throws
}
extension JavaClass<HelloSwift> {
  @JavaStaticField(isFinal: false)
  public var initialValue: Double
}
/// Describes the Java `native` methods for ``HelloSwift``.
///
/// To implement all of the `native` methods for HelloSwift in Swift,
/// extend HelloSwift to conform to this protocol and mark
/// each implementation of the protocol requirement with
/// `@JavaMethod`.
protocol HelloSwiftNativeMethods {
  func throwMessageFromSwift(_ message: String) throws -> String

  func sayHello(_ x: Int32, _ y: Int32) -> Int32
}
