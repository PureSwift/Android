// Auto-generated by Java-to-Swift wrapper generator.
import JavaKit
import JavaRuntime

@JavaClass("com.example.swift.ThreadSafeHelperClass")
open class ThreadSafeHelperClass: JavaObject {
  @JavaField(isFinal: false)
  public var text: JavaOptional<JavaString>!


  public var textOptional: JavaString? {
    get {
      Optional(javaOptional: text)
    }
    set {
      text = newValue.toJavaOptional()
    }
  }

  @JavaField(isFinal: true)
  public var val: JavaOptionalDouble!


  public var valOptional: Double? {
    get {
      Optional(javaOptional: val)
    }
  }

  @JavaMethod
  @_nonoverride public convenience init(environment: JNIEnvironment? = nil)

  @JavaMethod
  open func getValue(_ name: JavaOptional<JavaString>?) -> String

  open func getValueOptional(_ name: JavaString?) -> String {
    getValue(name.toJavaOptional())
  }

  @JavaMethod
  open func from(_ value: JavaOptionalInt?) -> JavaOptionalLong!

  open func fromOptional(_ value: Int32?) -> Int64? {
    Optional(javaOptional: from(value.toJavaOptional()))
  }

  @JavaMethod
  open func getText() -> JavaOptional<JavaString>!

  open func getTextOptional() -> JavaString? {
    Optional(javaOptional: getText())
  }
}
extension ThreadSafeHelperClass: @unchecked Swift.Sendable { }
